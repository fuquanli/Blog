{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0},{"_id":"source/images/Blog.png","path":"images/Blog.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Docker命令.md","hash":"5f928a353422e4987b769975dc6e7bdbb2ca1151","modified":1689647829726},{"_id":"source/_posts/Docker配置加速器.md","hash":"6582a3cc44b6dae302adf84b58878dbd93a67db1","modified":1689647829726},{"_id":"source/_posts/GIT常用命令.md","hash":"c9e838dd5cbf69cee3b15b3261c0cc292e66179c","modified":1689647829726},{"_id":"source/_posts/IFormFile始终为空的问题.md","hash":"e59888320207f1cf2b890b484cd3879e112192a1","modified":1689647829726},{"_id":"source/_posts/JS设置localStorage有效期.md","hash":"8ea7651421371c4ef51b8bd95e8e46528304ab15","modified":1689647829726},{"_id":"source/_posts/Linux常用命令.md","hash":"93f35366c0a5ac93f9eeb47da0830d93b65abbd0","modified":1689647829726},{"_id":"source/_posts/Python学习笔记-Python数据类型.md","hash":"2007fe510680a3b113ca436bd887f2014ad08965","modified":1689647829726},{"_id":"source/_posts/SQLServer批量修改和插入.md","hash":"7390c9f5acb7eba7bd6f11d238ef956a51cf73c4","modified":1689647829726},{"_id":"source/_posts/Ubuntu部署netcore网站.md","hash":"af5a192dae92be1465821bec2f56f00d8ff55d22","modified":1689647829741},{"_id":"source/_posts/Ubuntu部署netcore网站无法访问.md","hash":"50a9e18d993eba6bbefea71ee13605e41cc2da9c","modified":1689647829743},{"_id":"source/_posts/Webbench的使用.md","hash":"97092798b724f4963d37042c1f29b33877ad5135","modified":1689647829743},{"_id":"source/_posts/Zabbix部署及简单使用.md","hash":"c697f423d0f990c608d2a6405925221d43db3288","modified":1689647829743},{"_id":"source/_posts/redis工具类.md","hash":"62b5fc278be179ccd27c15361979ae9afeea0f07","modified":1689647829743},{"_id":"source/_posts/上传本地项目到GitHub.md","hash":"0187a097c54978d99043c55841d49926b750373a","modified":1689647829743},{"_id":"source/_posts/关于IoC和DI.md","hash":"3f2fd0229f81246b7e05465dd42cbe2a1baa026e","modified":1689647829750},{"_id":"source/_posts/利用反射把查询到的Table、Reader转换成List、Model.md","hash":"fa49ff533981d000985687ad15aa2bd76069d550","modified":1689647829750},{"_id":"source/_posts/对于异步的理解.md","hash":"006d10c5c628b08352f735305013c9aebd56fca2","modified":1689647829750},{"_id":"source/_posts/设计模式六大原则.md","hash":"cb7a23cb74788001b391508ff37318026785f2b7","modified":1689647829750},{"_id":"source/categories/index.md","hash":"648134920c06fe42b932cbf6d03f6e771bd0c3b8","modified":1689647829760},{"_id":"source/README.md","hash":"cf2559448faf13d8913ab3f4120668e230dda3e5","modified":1689647829726},{"_id":"source/.DS_Store","hash":"d0df18a38a63cafe5785a3bef001b5cb0191906f","modified":1689303740501},{"_id":"source/tags/index.md","hash":"bdf2e1f5b50d2c8fe460ec85cff49565ce56ea3d","modified":1689647829775},{"_id":"source/images/Blog.png","hash":"90095758dbc17f23a4c5d798e88a5738890fd346","modified":1689303649352},{"_id":"source/about/index.md","hash":"8511f6bd808b360d68a0c3d12475de02d7358ca1","modified":1701669726165},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689309375912},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689309375905},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689309375905},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689309375905},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689309375911},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689309375911},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689299945886},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689299945886},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1689647829775},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1689647829790},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1689647829775},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1689647829775},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1689647829792},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1689647829794},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1689647829794},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1689647829794},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1689647829794},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1689647829794},{"_id":"themes/next/_config.yml","hash":"1ec0dd0340bc9d4630fe93a337d6585ffd2dee21","modified":1689647829794},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1689647829794},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1689647829794},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1689647829961},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1689647829794},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1689647829794},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1689647829775},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1689647829775},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1689299945869},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1689647829775},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1689647829808},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1689647829811},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1689647829811},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1689647829810},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1689647829811},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1689647829811},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1689647829811},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1689647829811},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1689647829811},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1689647829811},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1689647829811},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1689647829811},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1689647829961},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1689647829811},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1689647829825},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1689647829826},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1689647829826},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1689647829976},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1689647829961},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1689647829961},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1689647829826},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1689647829961},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1689647829961},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1689647830478},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1689647829961},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1689647830478},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1689647829976},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1689647829976},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1689647830478},{"_id":"themes/next/scripts/tags/exturl.js","hash":"0a9044c2e4b59168561ea6c3d17d1b3351711d3c","modified":1689647829976},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1689647829976},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1689647829976},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1689647829976},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1689647829990},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1689647829976},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1689647829961},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1689647829992},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1689647830219},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1689309375912},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1689309375913},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1689647830224},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1689647830228},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1689647830233},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1689647830228},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1689647830233},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1689647829961},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1689647830240},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1689647830233},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1689647830233},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1689309375915},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1689309375915},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1689647830247},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1689309375915},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1689647830247},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1689647830247},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1689309375916},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1689647829826},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1689647829826},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1689647829843},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1689647829843},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1689647829843},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1689647829853},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"f19fb0be2d1a5b553e9ded67f822cca16ef30ee0","modified":1689647829857},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1689647829860},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1689647829931},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1689647829931},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1689647829941},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1689647829944},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1689309375914},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1689647829944},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1689647829944},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1689647829944},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1689647829853},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1689647829826},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1689647829826},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1689647829826},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1689647829880},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1689647829882},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1689647829899},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1689647829826},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1689647830149},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1689647830149},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1689647830149},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1689647830147},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1689647829841},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1689647830209},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1689647830211},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1689647830211},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1689309375924},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1689309375928},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1689647830310},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1689647829843},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1689647830342},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1689647830342},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1689647830342},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1689647830342},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1689647830342},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1689647830356},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1689647830358},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1689647830361},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1689647830361},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1689647830395},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1689647830395},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1689647830395},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1689647830395},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1689647830403},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1689647830407},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1689647830403},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1689647830413},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1689647830415},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1689647830411},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1689309375958},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1689309375959},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1689309375959},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1689309375959},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1689309375959},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1689309375960},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1689309375960},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1689309375960},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1689309375961},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1689309375961},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1689309375962},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1689309375962},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1689309375962},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1689647830438},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1689647830442},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1689647830444},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1689647830461},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1689647830444},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1689647830211},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1689647830461},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1689647830461},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1689647830461},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1689647830473},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1689647830247},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1689647830247},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1689647830259},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1689647830259},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1689647830259},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1689647830259},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1689647830259},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1689647830259},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1689647830259},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1689647830259},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1689647830274},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1689647829851},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1689647829851},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1689647829861},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1689647829861},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1689647829861},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1689647829861},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1689647829861},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1689647829902},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1689647829861},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1689647829902},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1689647829861},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1689647829907},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"16cb23818909f57dac1a5ada66869971c33d7bd8","modified":1689647829910},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1689647829910},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1689647829910},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1689647829910},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1689647829910},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1689647829910},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1689647829910},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1689647829910},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1689647829910},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1689647829910},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1689647829910},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1689647829925},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1689647829925},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1689647829929},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1689647829929},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1689647829931},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1689647829931},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1689647829931},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1689647829931},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1689647829944},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1689647829944},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1689647829957},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1689647829961},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1689647829896},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1689647829887},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1689647829893},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1689647829996},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1689647829996},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1689647829996},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1689647829996},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1689647829996},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1689647830027},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1689647830085},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1689647830131},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1689647830131},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1689647830131},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1689647830131},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1689647830131},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1689647830141},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1689647830144},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1689647830162},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1689647830185},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1689647830185},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1689647830190},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1689647830192},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1689647830194},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1689647830165},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1689647830166},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1689647830168},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1689647830170},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1689647830171},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1689647830173},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"053f31e30d3b9a27ca071656d2486873f5507097","modified":1689647830178},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1689647830194},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1689647830194},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1689647830194},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1689647830194},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1689647830194},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1689647830194},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1689647830279},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1689647830295},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1689647830295},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1689309375929},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1689309375929},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1689309375930},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1689309375930},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1689309375930},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1689309375931},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1689647830326},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1689647830326},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1689647830342},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1689647830342},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1689309375935},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1689647830361},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1689647830361},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1689647830361},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1689647830458},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1689647830461},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1689647830259},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1689647829944},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1689647830007},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1689647829996},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1689647830011},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1689647830011},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1689647830011},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1689647830011},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1689647829944},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1689647830011},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1689647830011},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1689647830011},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1689647830011},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1689647830024},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1689647830027},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1689647830027},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1689647830027},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1689647830027},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1689647830027},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1689647830027},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1689647830027},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1689647830041},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1689647830045},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1689647830046},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1689647830048},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1689647830049},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1689647830049},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1689647830049},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1689647830053},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1689647830057},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1689647830060},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"5a276e622c89229eebf838ae53df7932b62f4921","modified":1689647830062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1689647830064},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bfb165aaf68d49e82a4f592201bb69dbc9d78331","modified":1689647830064},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1689647830064},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1689647830064},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1689647830064},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1689647830074},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1689647830078},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1689647830078},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1689647830078},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1689647830083},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1689647830087},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1689647830091},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1689647830094},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1689647830096},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1689647830098},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1689647830103},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1689647830101},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1689647830103},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1689647830107},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1689647830111},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1689647830111},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1689647830113},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1689647830113},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1689647830113},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1689647830113},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1689647830113},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1689647830123},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1689647830126},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1689647830128},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1689647830194},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1689647830181},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1689647830183},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1689309375920},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1689309375920},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1689309375920},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1689309375920},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1689309375921},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1689309375931},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1689647830326},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1689647830326},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1689647830326},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1689647830326},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1689647830326},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1689647830395},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1689647830291},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1689309375949},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1689309375950},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1689309375939},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1689309375942},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1689309375948},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1689647830461},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1689647830295},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1689647830377},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1689647830444},{"_id":"source/images/avatar.jpeg","hash":"e4290454cbfc5e4e0bccc0f15c5e9674b470ba6b","modified":1701668042198},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1689668258756},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1689668258753},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1689668258754},{"_id":"themes/hexo-theme-next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1689668258790},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1689668258791},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1689668258793},{"_id":"themes/hexo-theme-next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1689668258797},{"_id":"themes/hexo-theme-next/_config.yml","hash":"22806c24424b0dada6db84311aa64264ba05cd54","modified":1701667960378},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1689668258800},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1689668258795},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1689668258760},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1689668258758},{"_id":"themes/hexo-theme-next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1689668258840},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1689668258773},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1689668258771},{"_id":"themes/hexo-theme-next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1689668258775},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1689668258779},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1689668258783},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1689668258777},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1689668258788},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1689668258781},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1689668258803},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1689668258785},{"_id":"themes/hexo-theme-next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1689668259024},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1689668258804},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1689668258806},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1689668258807},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1689668258808},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1689668258810},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1689668258813},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1689668258843},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1689668258811},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1689668258815},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1689668258845},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1689668258847},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1689668258849},{"_id":"themes/hexo-theme-next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1689668258853},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1689668258855},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1689668258851},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1689668258848},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1689668258852},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1689668258856},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1689668258861},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1689668258858},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1689668258862},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1689668258863},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1689668258859},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1689668258865},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1689668258866},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1689668258868},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1689668258870},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1689668258873},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1689668258869},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1689668258877},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1689668258874},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1689668259016},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1689668259014},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1689668259020},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1689668259018},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1689668259024},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1689668259021},{"_id":"themes/hexo-theme-next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1689668259072},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1689668258817},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1689668258765},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1689668258762},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1689668258767},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1689668258819},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1689668258769},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1689668258822},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1689668258881},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1689668258820},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1689668258879},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1689668258884},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1689668258886},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1689668258882},{"_id":"themes/hexo-theme-next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1689668258902},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1689668258912},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1689668258938},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1689668258824},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1689668258825},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1689668258828},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1689668258829},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1689668258833},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1689668258831},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1689668258836},{"_id":"themes/hexo-theme-next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1689668258941},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1689668258838},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1689668258943},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1689668258835},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1689668259055},{"_id":"themes/hexo-theme-next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1689668258956},{"_id":"themes/hexo-theme-next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1689668259057},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1689668258958},{"_id":"themes/hexo-theme-next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1689668258947},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1689668258968},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1689668259058},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1689668259063},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1689668259061},{"_id":"themes/hexo-theme-next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1689668258985},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1689668259065},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1689668258993},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1689668259028},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1689668258992},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1689668259094},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1689668259069},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1689668259067},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1689668259071},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1689668259229},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1689668259075},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1689668259280},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1689668259078},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1689668259076},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1689668259080},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1689668259082},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1689668259083},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1689668259087},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1689668259085},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1689668259089},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1689668259091},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1689668259286},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1689668259283},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1689668259285},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1689668259288},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1689668259291},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1689668259289},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1689668259296},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1689668259293},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1689668259298},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1689668259305},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1689668259299},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1689668259308},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1689668259331},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1689668259317},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1689668259312},{"_id":"themes/hexo-theme-next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1689668259314},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1689668259328},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1689668258896},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1689668259320},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1689668258893},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1689668258894},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1689668258899},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1689668258901},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1689668259301},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1689668259303},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1689668258888},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1689668258890},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1689668258907},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1689668258914},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1689668258922},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1689668258910},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1689668258919},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1689668258917},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1689668258935},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1689668258924},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1689668258946},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1689668258927},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1689668258930},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1689668258932},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1689668258950},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1689668258952},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1689668259039},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1689668258953},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1689668258955},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1689668259044},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1689668259041},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1689668259046},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1689668259048},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1689668259051},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1689668259049},{"_id":"themes/hexo-theme-next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1689668259053},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1689668258961},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1689668258970},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1689668258966},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1689668258965},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1689668258973},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1689668258962},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1689668258980},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1689668258978},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1689668258977},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1689668258975},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1689668258982},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1689668258983},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1689668258989},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1689668259001},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1689668258987},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1689668258991},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1689668259005},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1689668259003},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1689668259007},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1689668258995},{"_id":"themes/hexo-theme-next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1689668258999},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1689668259008},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1689668258998},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1689668259010},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1689668259031},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1689668259273},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1689668259012},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1689668259033},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1689668259275},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1689668259271},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1689668259277},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1689668259037},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1689668259279},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1689668259394},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1689668259325},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1689668259393},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1689668259323},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1689668259098},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1689668259101},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1689668259190},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1689668259166},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1689668259136},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1689668259100},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1689668259191},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1689668259168},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1689668259194},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1689668259205},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1689668259207},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1689668259212},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1689668259210},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1689668259228},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1689668259237},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1689668259235},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1689668259233},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1689668259238},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1689668259240},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1689668259246},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1689668259241},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1689668259249},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1689668259251},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1689668259259},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1689668259255},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1689668259261},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1689668259245},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1689668259263},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1689668259266},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1689668259264},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1689668259335},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1689668259268},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1689668259254},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1689668259104},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1689668259388},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1689668259106},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1689668259108},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1689668259112},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1689668259110},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1689668259115},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1689668259119},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1689668259120},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1689668259116},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1689668259117},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1689668259123},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1689668259125},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1689668259122},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1689668259127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1689668259130},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1689668259152},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1689668259133},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1689668259135},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1689668259140},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1689668259131},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1689668259141},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1689668259146},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1689668259154},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1689668259148},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1689668259156},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1689668259160},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1689668259144},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1689668259161},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1689668259171},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1689668259158},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1689668259165},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1689668259175},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1689668259163},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1689668259177},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1689668259173},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1689668259178},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1689668259180},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1689668259182},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1689668259184},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1689668259187},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1689668259196},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1689668259200},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1689668259186},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1689668259214},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1689668259198},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1689668259202},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1689668259220},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1689668259216},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1689668259222},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1689668259218},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1689668259226},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1689668259224},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1689668259385},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1689668259390},{"_id":"themes/hexo-theme-next/_config.yml.bak","hash":"16ae899841dd40bb14142d66b4326f75bbe6a227","modified":1689672462211},{"_id":"public/search.xml","hash":"35838eb3e309a2978499206f08bb56a726c31f0c","modified":1701669653410},{"_id":"public/atom.xml","hash":"dabae7a4ed46a31914db51ea839527fc449fdd1b","modified":1701669653410},{"_id":"public/sitemap.txt","hash":"27935799d1c2f0ac2627ba38c04c73f901a5e052","modified":1701669653410},{"_id":"public/sitemap.xml","hash":"f25d8f9c2acae95f94036ae2a171bd7a7876b47a","modified":1701669653410},{"_id":"public/categories/index.html","hash":"e5d989387fcc56d15e65a5bc811005f5a0a2be10","modified":1701669653410},{"_id":"public/tags/index.html","hash":"987515c884af23469783ec0dd8a0dd7c6cbaef7e","modified":1701669653410},{"_id":"public/about/index.html","hash":"5579976d8dac7b29793d86355425c10892f733c5","modified":1701669653410},{"_id":"public/Technology/5E7CDCAD7C9B57B815E4F825E835E744/index.html","hash":"8caf350d4dd8e3547d75a4683dfa1572ab834caf","modified":1701669653410},{"_id":"public/Tool/0CF9422B6AC20812B87F821D0173EB34/index.html","hash":"9065a725dceb4a3b66936e1dc78d0e8b6df29b9f","modified":1701669653410},{"_id":"public/Tool/F760900045026185F494BB3439D0DC49/index.html","hash":"43baebe5043c335cea5560c0cfdcfe8f11ef9a5f","modified":1701669653410},{"_id":"public/Tool/0E89CB3527AD643BC4A75D445DE9F1D2/index.html","hash":"5f151532b6ffd1e9761abc4353ecb18d02f1f471","modified":1701669653410},{"_id":"public/Tool/A8FF6AE80C4293FB4AE0099779FB3894/index.html","hash":"4de7a6456a17b0a7952c59272a45ac2422dd0729","modified":1701669653410},{"_id":"public/Technology/F044DDBABEAB96FC3FE6FFED7C2544BB/index.html","hash":"abb3f11ff1f8c5bf25902d1c39febea621e4f747","modified":1701669653410},{"_id":"public/Technology/8081EB1E811675876C731BAF7B422099/index.html","hash":"d21e4bf621db9196bca37542ddce4b2ede72133c","modified":1701669653410},{"_id":"public/Technology/BB529A094197215482DB7EF982E1C1AA/index.html","hash":"94960512fca09e7d7922657202dbd0f28d0ba7db","modified":1701669653410},{"_id":"public/Technology/422886F81BCA6B29305410027114C835/index.html","hash":"31b0f03d6df45749889d4da08354e6f89547a6d3","modified":1701669653410},{"_id":"public/Tool/E78756E315C538EE0A848E9B01C67DED/index.html","hash":"f08ee6c175151f8a40c5d8cce93158273b4d7d96","modified":1701669653410},{"_id":"public/Technology/6ECFDB54D0C1DDDD61E4FF75B038C197/index.html","hash":"508f7ff8c5de5888001a66cf80803912fc0e4d38","modified":1701669653410},{"_id":"public/Technology/36319F63DF9B420D871A83484B2A40F2/index.html","hash":"ecf16ba25830a87e54ef64812d89cd56aa2763d8","modified":1701669653410},{"_id":"public/Technology/D073ECB6924A39E46720C56440498BDF/index.html","hash":"4adedfe9a048965f5e97f1d6fb2d2b94644996f2","modified":1701669653410},{"_id":"public/System/0FEB736DD08163CC1B6C2849A379B750/index.html","hash":"d590af2384554dfe0bfa437e05ffd33c7fb261a2","modified":1701669653410},{"_id":"public/Tool/15E13FD7EF708DF71248E9C39381AD7A/index.html","hash":"fc6f31b13fa0ca02fb7af1a5f43af36b98f6a447","modified":1701669653410},{"_id":"public/Technology/A6034B2DC7E6CD4E518DF46BF9A985D9/index.html","hash":"4d3cc436717b628ab5d38bf404bdd03fef01cbc1","modified":1701669653410},{"_id":"public/Technology/75225689E99ECDA945680C6721B2CD28/index.html","hash":"e803da941fffd0d8a7d18c9ffc1839b242bef65f","modified":1701669653410},{"_id":"public/Technology/58FD57A2835616B143E317EA49A22A80/index.html","hash":"4f2c07157fbe83dced2c3ba8edf649070dee070b","modified":1701669653410},{"_id":"public/categories/Tool/index.html","hash":"02b868171727512a33297169e87ab3f60bb6bde4","modified":1701669653410},{"_id":"public/categories/Technology/index.html","hash":"7b029e5357ddd0cdec721ffac64e3db6d0cd7855","modified":1701669653410},{"_id":"public/archives/index.html","hash":"769a1301252c2174ef68651da7f28b702d5bd700","modified":1701669653410},{"_id":"public/categories/Technology/page/2/index.html","hash":"d9d5cce06d7821ea055d1a6af35ec0d033921c2d","modified":1701669653410},{"_id":"public/categories/System/index.html","hash":"9682e6e44f7fcf5f1eab0db558e1d5994bb0b1d0","modified":1701669653410},{"_id":"public/archives/2018/03/index.html","hash":"b13a46a23825a2f433416471163d2502a9d89e02","modified":1701669653410},{"_id":"public/archives/2018/09/index.html","hash":"91d70469dff86a8ef0c62f158acca066770c4777","modified":1701669653410},{"_id":"public/archives/2019/index.html","hash":"6f0ca6bfc37bb57263b3b349a4fa9537906aa9d5","modified":1701669653410},{"_id":"public/archives/2019/11/index.html","hash":"4ab0e73cc6522153ea2e9b8e11161c7f6c6acbeb","modified":1701669653410},{"_id":"public/archives/2020/04/index.html","hash":"6681963ab166b47f02e655a69c08bded0ecfab0e","modified":1701669653410},{"_id":"public/archives/2020/03/index.html","hash":"4bfd9a96e6503f891e8f347df77cb660e921edbd","modified":1701669653410},{"_id":"public/archives/2023/07/index.html","hash":"0293d12c4d6763c02bd9b5a664c99055cfccb53e","modified":1701669653410},{"_id":"public/archives/2023/index.html","hash":"09125f8bfc1aa7882ef25fe588174b622065fe12","modified":1701669653410},{"_id":"public/tags/Docker/index.html","hash":"7b07c10bbb64ddc4a5b537bffbe846ba01b5ca14","modified":1701669653410},{"_id":"public/tags/Git/index.html","hash":"11469929c77a6ae417ccea9da518583bf3b7ef26","modified":1701669653410},{"_id":"public/tags/Netcore/index.html","hash":"09158ee260f52b921a4f83d3d37ac8e3426c6997","modified":1701669653410},{"_id":"public/tags/js/index.html","hash":"00c38bfa3012fb2eacbe46074ba2517d54229344","modified":1701669653410},{"_id":"public/tags/Linux/index.html","hash":"dda63a74b3df3cd4f8daf863b781161bd248c148","modified":1701669653410},{"_id":"public/tags/Python/index.html","hash":"f05f92a2aa015c37d7505572896cadd1b6088e5a","modified":1701669653410},{"_id":"public/tags/SQL/index.html","hash":"ed4083209bb2783068ee1ca44b64b9690a783668","modified":1701669653410},{"_id":"public/tags/SQL-Server/index.html","hash":"5f60a40ed3e488ff6e3b2648f66e67b40d285a78","modified":1701669653410},{"_id":"public/tags/Ubuntu/index.html","hash":"c34b19e70d090f5809a7d54820b4fa53c89144bf","modified":1701669653410},{"_id":"public/tags/Test/index.html","hash":"4b651d0412ec2bc802a2fd8aad2d8c2240d27640","modified":1701669653410},{"_id":"public/tags/O-M/index.html","hash":"e363d37c4d6e5e6cccd4d82815b9716a346edcec","modified":1701669653410},{"_id":"public/tags/Redis/index.html","hash":"2364f5a2379c02f1c3b8ac60a049c3bf0ee2f5f3","modified":1701669653410},{"_id":"public/tags/C/index.html","hash":"31f64fce410f11f3a0915aa278d6dc4e637b065f","modified":1701669653410},{"_id":"public/tags/GitHub/index.html","hash":"848bb0584a570117f4fc397479f972b633815bc6","modified":1701669653410},{"_id":"public/tags/Reflex/index.html","hash":"66be6c864976c8df113bdc2f3c2e013c0a77e2c8","modified":1701669653410},{"_id":"public/tags/Async/index.html","hash":"6636951dfb3d3078b2d1256251fa23b86e20abbd","modified":1701669653410},{"_id":"public/tags/Design/index.html","hash":"47ae3d68e2fb9d0f4d4c3d910e4860152eab7e20","modified":1701669653410},{"_id":"public/tags/Desing/index.html","hash":"55134be164728e2511a45e7fda618e0f8dc66aae","modified":1701669653410},{"_id":"public/archives/page/2/index.html","hash":"6ee7a8afd99407501a1c47c521d3b2dedb104d3e","modified":1701669653410},{"_id":"public/archives/2018/index.html","hash":"7f98130fcc16660dedf2a35c483f2e4da3f82df2","modified":1701669653410},{"_id":"public/archives/2018/04/index.html","hash":"2075b29d3f44fda85bef250a8054090af979968e","modified":1701669653410},{"_id":"public/archives/2020/index.html","hash":"0ee1cd66d666534bf05e0428a28c0311dbf1c1b1","modified":1701669653410},{"_id":"public/page/2/index.html","hash":"309d07d272cf5fe7b8dc32c4cb62bc9d7e4cdcf9","modified":1701669653410},{"_id":"public/index.html","hash":"7fecf4c739c132850c8f26b45959e538ac1932a2","modified":1701669653410},{"_id":"public/README.md","hash":"cf2559448faf13d8913ab3f4120668e230dda3e5","modified":1701669653410},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1701669653410},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1701669653410},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1701669653410},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1701669653410},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1701669653410},{"_id":"public/images/Blog.png","hash":"90095758dbc17f23a4c5d798e88a5738890fd346","modified":1701669653410},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1701669653410},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1701669653410},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1701669653410},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1701669653410},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1701669653410},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1701669653410},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1701669653410},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1701669653410},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1701669653410},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1701669653410},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1701669653410},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1701669653410},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1701669653410},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1701669653410},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1701669653410},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1701669653410},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1701669653410},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1701669653410},{"_id":"public/css/main.css","hash":"4670c7f6e20f33fe9f70be97dececed6aa71e7f5","modified":1701669653410},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1701669653410},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1701669653410},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1701669653410},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1701669653410},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1701669653410},{"_id":"public/images/avatar.jpeg","hash":"e4290454cbfc5e4e0bccc0f15c5e9674b470ba6b","modified":1701669653410}],"Category":[{"name":"Tool","_id":"clk237kf000044461ecec2nsg"},{"name":"Technology","_id":"clk237kff000l44619ass21h8"},{"name":"System","_id":"clk237kfk000y44611f1lbhlm"}],"Data":[],"Page":[{"title":"分类","date":"2018-04-08T09:47:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-04-08 17:47:00\ntype: \"categories\"\ncomments: false\n---\n","updated":"2023-07-18T02:37:09.760Z","path":"categories/index.html","_id":"clk237keo00004461bxendjwt","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-04-08T09:47:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-04-08 17:47:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2023-07-18T02:37:09.775Z","path":"tags/index.html","_id":"clk237kex000244615qeg2q0f","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2018-04-09T09:01:34.000Z","type":"about","comments":0,"_content":"\n<b> <center>定风波·莫听穿林打叶声 </b>  \n莫听穿林打叶声，  \n何妨吟啸且徐行。  \n竹杖芒鞋轻胜马，  \n谁怕？  \n一蓑烟雨任平生。  \n料峭春风吹酒醒，  \n微冷，  \n山头斜照却相迎。  \n回首向来萧瑟处，  \n归去，  \n也无风雨也无晴。  \n<center>\n\n---\n\n![实事求是](https://ts1.cn.mm.bing.net/th/id/R-C.fa6f53f22246d778d179d995fa53e2e1?rik=XWuQmdiXlOfdGw&riu=http%3a%2f%2fwww.4aqq.com%2fsetupdir%2fupload%2f200709%2f2007930153649420.gif&ehk=BRxmyPhmbufyM3HGcDsX0wzPbjAtwfVUeD9hfmR91Z8%3d&risl=&pid=ImgRaw&r=0#pic_center)\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-04-09 17:01:34\ntype: \"about\"\ncomments: false\n---\n\n<b> <center>定风波·莫听穿林打叶声 </b>  \n莫听穿林打叶声，  \n何妨吟啸且徐行。  \n竹杖芒鞋轻胜马，  \n谁怕？  \n一蓑烟雨任平生。  \n料峭春风吹酒醒，  \n微冷，  \n山头斜照却相迎。  \n回首向来萧瑟处，  \n归去，  \n也无风雨也无晴。  \n<center>\n\n---\n\n![实事求是](https://ts1.cn.mm.bing.net/th/id/R-C.fa6f53f22246d778d179d995fa53e2e1?rik=XWuQmdiXlOfdGw&riu=http%3a%2f%2fwww.4aqq.com%2fsetupdir%2fupload%2f200709%2f2007930153649420.gif&ehk=BRxmyPhmbufyM3HGcDsX0wzPbjAtwfVUeD9hfmR91Z8%3d&risl=&pid=ImgRaw&r=0#pic_center)\n","updated":"2023-12-04T06:02:06.165Z","path":"about/index.html","_id":"clk237kf30006446147plbhpr","layout":"page","content":"<p><b> <center>定风波·莫听穿林打叶声 </b><br>莫听穿林打叶声，<br>何妨吟啸且徐行。<br>竹杖芒鞋轻胜马，<br>谁怕？<br>一蓑烟雨任平生。<br>料峭春风吹酒醒，<br>微冷，<br>山头斜照却相迎。<br>回首向来萧瑟处，<br>归去，<br>也无风雨也无晴。  </p>\n<center>\n\n<hr>\n<p><img src=\"https://ts1.cn.mm.bing.net/th/id/R-C.fa6f53f22246d778d179d995fa53e2e1?rik=XWuQmdiXlOfdGw&riu=http://www.4aqq.com/setupdir/upload/200709/2007930153649420.gif&ehk=BRxmyPhmbufyM3HGcDsX0wzPbjAtwfVUeD9hfmR91Z8=&risl=&pid=ImgRaw&r=0#pic_center\" alt=\"实事求是\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><b> <center>定风波·莫听穿林打叶声 </b><br>莫听穿林打叶声，<br>何妨吟啸且徐行。<br>竹杖芒鞋轻胜马，<br>谁怕？<br>一蓑烟雨任平生。<br>料峭春风吹酒醒，<br>微冷，<br>山头斜照却相迎。<br>回首向来萧瑟处，<br>归去，<br>也无风雨也无晴。  </p>\n<center>\n\n<hr>\n<p><img src=\"https://ts1.cn.mm.bing.net/th/id/R-C.fa6f53f22246d778d179d995fa53e2e1?rik=XWuQmdiXlOfdGw&riu=http://www.4aqq.com/setupdir/upload/200709/2007930153649420.gif&ehk=BRxmyPhmbufyM3HGcDsX0wzPbjAtwfVUeD9hfmR91Z8=&risl=&pid=ImgRaw&r=0#pic_center\" alt=\"实事求是\"></p>\n"}],"Post":[{"title":"Docker命令","id":"A8FF6AE80C4293FB4AE0099779FB3894","date":"2020-03-15T08:13:30.000Z","_content":"\ndocker 常用命令\n\n<!-- more -->\n\n```bash\ndocker images #输出所有镜像\ndocker rmi image_id #移除某镜像\ndocker ps #查看正在运行的容器\ndocker ps -a #查看所有容器\n\n停用全部运行中的容器:docker stop $(docker ps -q)\n删除全部容器：docker rm $(docker ps -aq)\n一条命令实现停用并删除容器 docker stop $(docker ps -q) & docker rm $(docker ps -aq)\n\n修改时区：docker cp /usr/share/zoneinfo/Asia/Shanghai 容器id:/etc/localtime\n\n管理命令： \ncontainer 管理容器 \nimage 管理镜像 \nnetwork 管理网络 \nnode 管理Swarm节点 \nplugin 管理插件 \nsecret 管理Docker secrets \nservice 管理服务 \nstack 管理Docker stacks \nswarm 管理Swarm集群 \nsystem 查看系统信息 \nvolume 管理卷 \n如：docker container ls 显示所有容器 \n\n普通命令： \nDocker exec -it containerId /bin/bash 进入容器\n以root角色进入 ddocker exec -it -u root containerId /bin/bash\n\nbuild 从一个DockerFile构建镜像 \ncommit 从容器创建一个镜像 \ncp 从容器和主机文件系统之间拷贝文件 \ncreate 创建一个容器 \ndiff 检查容器文件系统上的更改\nevents 从服务器获取实时事件 \nexec 在正在运行的容器中运行命令 \nexport 将容器的文件系统导出为tar存档 \nhistory 显示镜像的历史记录 \nimages 查看镜像列表 \nimport 从归档文件中创建镜像 \ninfo 显示系统范围的信息 \ninspect 返回Docker对象的低级信息 \nkill kill运行中的容器 \nload 从存档或者STDIN加载镜像 \nlogin 登陆docker镜像仓库 \nlogout 退出docker镜像仓库 \nlogs 获取一个容器的日志 \npause 暂停一个或多个容器中的所有进程 \nport 查看端口映射或容器的特定映射列表 \nps 查看容器列表 \npull 从镜像仓库拉取镜像 \npush 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库\nrename 重命名容器 \nrestart 重启容器 \nrm 删除容器 \nrmi 删除镜像 \nrun 创建一个新的容器并运行一个命令\nsave 将指定镜像保存成 \ntar 归档文件 \nsearch 从Docker Hub搜索镜像 \nstart 启动容器 \nstats 实时显示容器资源使用情况的统计信息\nstop 停止容器 \ntag 标记本地镜像，将其归入某一仓库\ntop 展示一个容器中运行的进程 \nunpause 恢复容器中所有的进程 \nupdate 更新容器配置 \nversion 显示Docker的版本信息 \nwait 阻塞直到容器停止，然后打印退出代码 \n如：docker images 显示所有镜像\n```\n\n\n\n","source":"_posts/Docker命令.md","raw":"---\ntitle: Docker命令\nid: A8FF6AE80C4293FB4AE0099779FB3894\ndate: 2020-03-15 16:13:30\ntags:\n- Docker\ncategories: Tool\n---\n\ndocker 常用命令\n\n<!-- more -->\n\n```bash\ndocker images #输出所有镜像\ndocker rmi image_id #移除某镜像\ndocker ps #查看正在运行的容器\ndocker ps -a #查看所有容器\n\n停用全部运行中的容器:docker stop $(docker ps -q)\n删除全部容器：docker rm $(docker ps -aq)\n一条命令实现停用并删除容器 docker stop $(docker ps -q) & docker rm $(docker ps -aq)\n\n修改时区：docker cp /usr/share/zoneinfo/Asia/Shanghai 容器id:/etc/localtime\n\n管理命令： \ncontainer 管理容器 \nimage 管理镜像 \nnetwork 管理网络 \nnode 管理Swarm节点 \nplugin 管理插件 \nsecret 管理Docker secrets \nservice 管理服务 \nstack 管理Docker stacks \nswarm 管理Swarm集群 \nsystem 查看系统信息 \nvolume 管理卷 \n如：docker container ls 显示所有容器 \n\n普通命令： \nDocker exec -it containerId /bin/bash 进入容器\n以root角色进入 ddocker exec -it -u root containerId /bin/bash\n\nbuild 从一个DockerFile构建镜像 \ncommit 从容器创建一个镜像 \ncp 从容器和主机文件系统之间拷贝文件 \ncreate 创建一个容器 \ndiff 检查容器文件系统上的更改\nevents 从服务器获取实时事件 \nexec 在正在运行的容器中运行命令 \nexport 将容器的文件系统导出为tar存档 \nhistory 显示镜像的历史记录 \nimages 查看镜像列表 \nimport 从归档文件中创建镜像 \ninfo 显示系统范围的信息 \ninspect 返回Docker对象的低级信息 \nkill kill运行中的容器 \nload 从存档或者STDIN加载镜像 \nlogin 登陆docker镜像仓库 \nlogout 退出docker镜像仓库 \nlogs 获取一个容器的日志 \npause 暂停一个或多个容器中的所有进程 \nport 查看端口映射或容器的特定映射列表 \nps 查看容器列表 \npull 从镜像仓库拉取镜像 \npush 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库\nrename 重命名容器 \nrestart 重启容器 \nrm 删除容器 \nrmi 删除镜像 \nrun 创建一个新的容器并运行一个命令\nsave 将指定镜像保存成 \ntar 归档文件 \nsearch 从Docker Hub搜索镜像 \nstart 启动容器 \nstats 实时显示容器资源使用情况的统计信息\nstop 停止容器 \ntag 标记本地镜像，将其归入某一仓库\ntop 展示一个容器中运行的进程 \nunpause 恢复容器中所有的进程 \nupdate 更新容器配置 \nversion 显示Docker的版本信息 \nwait 阻塞直到容器停止，然后打印退出代码 \n如：docker images 显示所有镜像\n```\n\n\n\n","slug":"Docker命令","published":1,"updated":"2023-07-18T02:37:09.726Z","_id":"clk237kes00014461fe0pgxvy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>docker 常用命令</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images <span class=\"comment\">#输出所有镜像</span></span><br><span class=\"line\">docker rmi image_id <span class=\"comment\">#移除某镜像</span></span><br><span class=\"line\">docker ps <span class=\"comment\">#查看正在运行的容器</span></span><br><span class=\"line\">docker ps -a <span class=\"comment\">#查看所有容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">停用全部运行中的容器:docker stop $(docker ps -q)</span><br><span class=\"line\">删除全部容器：docker <span class=\"built_in\">rm</span> $(docker ps -aq)</span><br><span class=\"line\">一条命令实现停用并删除容器 docker stop $(docker ps -q) &amp; docker <span class=\"built_in\">rm</span> $(docker ps -aq)</span><br><span class=\"line\"></span><br><span class=\"line\">修改时区：docker <span class=\"built_in\">cp</span> /usr/share/zoneinfo/Asia/Shanghai 容器<span class=\"built_in\">id</span>:/etc/localtime</span><br><span class=\"line\"></span><br><span class=\"line\">管理命令： </span><br><span class=\"line\">container 管理容器 </span><br><span class=\"line\">image 管理镜像 </span><br><span class=\"line\">network 管理网络 </span><br><span class=\"line\">node 管理Swarm节点 </span><br><span class=\"line\">plugin 管理插件 </span><br><span class=\"line\">secret 管理Docker secrets </span><br><span class=\"line\">service 管理服务 </span><br><span class=\"line\">stack 管理Docker stacks </span><br><span class=\"line\">swarm 管理Swarm集群 </span><br><span class=\"line\">system 查看系统信息 </span><br><span class=\"line\">volume 管理卷 </span><br><span class=\"line\">如：docker container <span class=\"built_in\">ls</span> 显示所有容器 </span><br><span class=\"line\"></span><br><span class=\"line\">普通命令： </span><br><span class=\"line\">Docker <span class=\"built_in\">exec</span> -it containerId /bin/bash 进入容器</span><br><span class=\"line\">以root角色进入 ddocker <span class=\"built_in\">exec</span> -it -u root containerId /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">build 从一个DockerFile构建镜像 </span><br><span class=\"line\">commit 从容器创建一个镜像 </span><br><span class=\"line\"><span class=\"built_in\">cp</span> 从容器和主机文件系统之间拷贝文件 </span><br><span class=\"line\">create 创建一个容器 </span><br><span class=\"line\">diff 检查容器文件系统上的更改</span><br><span class=\"line\">events 从服务器获取实时事件 </span><br><span class=\"line\"><span class=\"built_in\">exec</span> 在正在运行的容器中运行命令 </span><br><span class=\"line\"><span class=\"built_in\">export</span> 将容器的文件系统导出为tar存档 </span><br><span class=\"line\"><span class=\"built_in\">history</span> 显示镜像的历史记录 </span><br><span class=\"line\">images 查看镜像列表 </span><br><span class=\"line\">import 从归档文件中创建镜像 </span><br><span class=\"line\">info 显示系统范围的信息 </span><br><span class=\"line\">inspect 返回Docker对象的低级信息 </span><br><span class=\"line\"><span class=\"built_in\">kill</span> <span class=\"built_in\">kill</span>运行中的容器 </span><br><span class=\"line\">load 从存档或者STDIN加载镜像 </span><br><span class=\"line\">login 登陆docker镜像仓库 </span><br><span class=\"line\"><span class=\"built_in\">logout</span> 退出docker镜像仓库 </span><br><span class=\"line\">logs 获取一个容器的日志 </span><br><span class=\"line\">pause 暂停一个或多个容器中的所有进程 </span><br><span class=\"line\">port 查看端口映射或容器的特定映射列表 </span><br><span class=\"line\">ps 查看容器列表 </span><br><span class=\"line\">pull 从镜像仓库拉取镜像 </span><br><span class=\"line\">push 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</span><br><span class=\"line\">rename 重命名容器 </span><br><span class=\"line\">restart 重启容器 </span><br><span class=\"line\"><span class=\"built_in\">rm</span> 删除容器 </span><br><span class=\"line\">rmi 删除镜像 </span><br><span class=\"line\">run 创建一个新的容器并运行一个命令</span><br><span class=\"line\">save 将指定镜像保存成 </span><br><span class=\"line\">tar 归档文件 </span><br><span class=\"line\">search 从Docker Hub搜索镜像 </span><br><span class=\"line\">start 启动容器 </span><br><span class=\"line\">stats 实时显示容器资源使用情况的统计信息</span><br><span class=\"line\">stop 停止容器 </span><br><span class=\"line\">tag 标记本地镜像，将其归入某一仓库</span><br><span class=\"line\">top 展示一个容器中运行的进程 </span><br><span class=\"line\">unpause 恢复容器中所有的进程 </span><br><span class=\"line\">update 更新容器配置 </span><br><span class=\"line\">version 显示Docker的版本信息 </span><br><span class=\"line\"><span class=\"built_in\">wait</span> 阻塞直到容器停止，然后打印退出代码 </span><br><span class=\"line\">如：docker images 显示所有镜像</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p>docker 常用命令</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images <span class=\"comment\">#输出所有镜像</span></span><br><span class=\"line\">docker rmi image_id <span class=\"comment\">#移除某镜像</span></span><br><span class=\"line\">docker ps <span class=\"comment\">#查看正在运行的容器</span></span><br><span class=\"line\">docker ps -a <span class=\"comment\">#查看所有容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">停用全部运行中的容器:docker stop $(docker ps -q)</span><br><span class=\"line\">删除全部容器：docker <span class=\"built_in\">rm</span> $(docker ps -aq)</span><br><span class=\"line\">一条命令实现停用并删除容器 docker stop $(docker ps -q) &amp; docker <span class=\"built_in\">rm</span> $(docker ps -aq)</span><br><span class=\"line\"></span><br><span class=\"line\">修改时区：docker <span class=\"built_in\">cp</span> /usr/share/zoneinfo/Asia/Shanghai 容器<span class=\"built_in\">id</span>:/etc/localtime</span><br><span class=\"line\"></span><br><span class=\"line\">管理命令： </span><br><span class=\"line\">container 管理容器 </span><br><span class=\"line\">image 管理镜像 </span><br><span class=\"line\">network 管理网络 </span><br><span class=\"line\">node 管理Swarm节点 </span><br><span class=\"line\">plugin 管理插件 </span><br><span class=\"line\">secret 管理Docker secrets </span><br><span class=\"line\">service 管理服务 </span><br><span class=\"line\">stack 管理Docker stacks </span><br><span class=\"line\">swarm 管理Swarm集群 </span><br><span class=\"line\">system 查看系统信息 </span><br><span class=\"line\">volume 管理卷 </span><br><span class=\"line\">如：docker container <span class=\"built_in\">ls</span> 显示所有容器 </span><br><span class=\"line\"></span><br><span class=\"line\">普通命令： </span><br><span class=\"line\">Docker <span class=\"built_in\">exec</span> -it containerId /bin/bash 进入容器</span><br><span class=\"line\">以root角色进入 ddocker <span class=\"built_in\">exec</span> -it -u root containerId /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">build 从一个DockerFile构建镜像 </span><br><span class=\"line\">commit 从容器创建一个镜像 </span><br><span class=\"line\"><span class=\"built_in\">cp</span> 从容器和主机文件系统之间拷贝文件 </span><br><span class=\"line\">create 创建一个容器 </span><br><span class=\"line\">diff 检查容器文件系统上的更改</span><br><span class=\"line\">events 从服务器获取实时事件 </span><br><span class=\"line\"><span class=\"built_in\">exec</span> 在正在运行的容器中运行命令 </span><br><span class=\"line\"><span class=\"built_in\">export</span> 将容器的文件系统导出为tar存档 </span><br><span class=\"line\"><span class=\"built_in\">history</span> 显示镜像的历史记录 </span><br><span class=\"line\">images 查看镜像列表 </span><br><span class=\"line\">import 从归档文件中创建镜像 </span><br><span class=\"line\">info 显示系统范围的信息 </span><br><span class=\"line\">inspect 返回Docker对象的低级信息 </span><br><span class=\"line\"><span class=\"built_in\">kill</span> <span class=\"built_in\">kill</span>运行中的容器 </span><br><span class=\"line\">load 从存档或者STDIN加载镜像 </span><br><span class=\"line\">login 登陆docker镜像仓库 </span><br><span class=\"line\"><span class=\"built_in\">logout</span> 退出docker镜像仓库 </span><br><span class=\"line\">logs 获取一个容器的日志 </span><br><span class=\"line\">pause 暂停一个或多个容器中的所有进程 </span><br><span class=\"line\">port 查看端口映射或容器的特定映射列表 </span><br><span class=\"line\">ps 查看容器列表 </span><br><span class=\"line\">pull 从镜像仓库拉取镜像 </span><br><span class=\"line\">push 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</span><br><span class=\"line\">rename 重命名容器 </span><br><span class=\"line\">restart 重启容器 </span><br><span class=\"line\"><span class=\"built_in\">rm</span> 删除容器 </span><br><span class=\"line\">rmi 删除镜像 </span><br><span class=\"line\">run 创建一个新的容器并运行一个命令</span><br><span class=\"line\">save 将指定镜像保存成 </span><br><span class=\"line\">tar 归档文件 </span><br><span class=\"line\">search 从Docker Hub搜索镜像 </span><br><span class=\"line\">start 启动容器 </span><br><span class=\"line\">stats 实时显示容器资源使用情况的统计信息</span><br><span class=\"line\">stop 停止容器 </span><br><span class=\"line\">tag 标记本地镜像，将其归入某一仓库</span><br><span class=\"line\">top 展示一个容器中运行的进程 </span><br><span class=\"line\">unpause 恢复容器中所有的进程 </span><br><span class=\"line\">update 更新容器配置 </span><br><span class=\"line\">version 显示Docker的版本信息 </span><br><span class=\"line\"><span class=\"built_in\">wait</span> 阻塞直到容器停止，然后打印退出代码 </span><br><span class=\"line\">如：docker images 显示所有镜像</span><br></pre></td></tr></table></figure>"},{"title":"Docker配置加速器","id":"F760900045026185F494BB3439D0DC49","date":"2020-03-15T08:21:30.000Z","_content":"\n有时使用Docker拉取镜像慢如蜗牛，这个时候就需要配置下加速器，Docker 官方和国内很多云服务商都提供了国内加速器服务。\n\n如Docker官方提供中国镜像库：**https://registry.docker-cn.com**\n\n阿里的加速器：**https://5ch7vat9.mirror.aliyuncs.com**\n\n<!-- more -->\n\n这里我使用的是阿里的加速器，使用了一阶段，感觉还不错，大大的提高了拉取镜像的速度。\n\n如何配置？\n\n首先进入docker目录\n\n```bash\ncd /etc/docker\n```\n\n创建并编辑文件daemon.json\n\n```bash\nvim daemon.json\n```\n\n编辑内容为\n\n```bash\n{     \n    \"registry-mirrors\": [\"https://5ch7vat9.mirror.aliyuncs.com\"]  \n}\n```\n\n重新启动docker\n\n```bash\nsudo systemctl daemon-reload \nsudo systemctl restart docker \n```\n\n\n\n","source":"_posts/Docker配置加速器.md","raw":"---\ntitle: Docker配置加速器\nid: F760900045026185F494BB3439D0DC49\ndate: 2020-03-15 16:21:30\ntags:\n- Docker\ncategories: Tool\n---\n\n有时使用Docker拉取镜像慢如蜗牛，这个时候就需要配置下加速器，Docker 官方和国内很多云服务商都提供了国内加速器服务。\n\n如Docker官方提供中国镜像库：**https://registry.docker-cn.com**\n\n阿里的加速器：**https://5ch7vat9.mirror.aliyuncs.com**\n\n<!-- more -->\n\n这里我使用的是阿里的加速器，使用了一阶段，感觉还不错，大大的提高了拉取镜像的速度。\n\n如何配置？\n\n首先进入docker目录\n\n```bash\ncd /etc/docker\n```\n\n创建并编辑文件daemon.json\n\n```bash\nvim daemon.json\n```\n\n编辑内容为\n\n```bash\n{     \n    \"registry-mirrors\": [\"https://5ch7vat9.mirror.aliyuncs.com\"]  \n}\n```\n\n重新启动docker\n\n```bash\nsudo systemctl daemon-reload \nsudo systemctl restart docker \n```\n\n\n\n","slug":"Docker配置加速器","published":1,"updated":"2023-07-18T02:37:09.726Z","_id":"clk237key000344614pg5faeh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>有时使用Docker拉取镜像慢如蜗牛，这个时候就需要配置下加速器，Docker 官方和国内很多云服务商都提供了国内加速器服务。</p>\n<p>如Docker官方提供中国镜像库：<strong><a href=\"https://registry.docker-cn.com/\">https://registry.docker-cn.com</a></strong></p>\n<p>阿里的加速器：<strong><a href=\"https://5ch7vat9.mirror.aliyuncs.com/\">https://5ch7vat9.mirror.aliyuncs.com</a></strong></p>\n<span id=\"more\"></span>\n\n<p>这里我使用的是阿里的加速器，使用了一阶段，感觉还不错，大大的提高了拉取镜像的速度。</p>\n<p>如何配置？</p>\n<p>首先进入docker目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/docker</span><br></pre></td></tr></table></figure>\n\n<p>创建并编辑文件daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim daemon.json</span><br></pre></td></tr></table></figure>\n\n<p>编辑内容为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;     </span><br><span class=\"line\">    <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://5ch7vat9.mirror.aliyuncs.com&quot;</span>]  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新启动docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload </span><br><span class=\"line\">sudo systemctl restart docker </span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p>有时使用Docker拉取镜像慢如蜗牛，这个时候就需要配置下加速器，Docker 官方和国内很多云服务商都提供了国内加速器服务。</p>\n<p>如Docker官方提供中国镜像库：<strong><a href=\"https://registry.docker-cn.com/\">https://registry.docker-cn.com</a></strong></p>\n<p>阿里的加速器：<strong><a href=\"https://5ch7vat9.mirror.aliyuncs.com/\">https://5ch7vat9.mirror.aliyuncs.com</a></strong></p>","more":"<p>这里我使用的是阿里的加速器，使用了一阶段，感觉还不错，大大的提高了拉取镜像的速度。</p>\n<p>如何配置？</p>\n<p>首先进入docker目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/docker</span><br></pre></td></tr></table></figure>\n\n<p>创建并编辑文件daemon.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim daemon.json</span><br></pre></td></tr></table></figure>\n\n<p>编辑内容为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;     </span><br><span class=\"line\">    <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://5ch7vat9.mirror.aliyuncs.com&quot;</span>]  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新启动docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload </span><br><span class=\"line\">sudo systemctl restart docker </span><br></pre></td></tr></table></figure>"},{"title":"GIT常用命令","id":"0CF9422B6AC20812B87F821D0173EB34","date":"2023-07-12T11:07:00.000Z","_content":"\n**GIT中常用的一些命令**\n\n<!-- more -->\n\n\n> 作者：阮一峰 [常用 Git 命令清单 - 阮一峰的网络日志 (ruanyifeng.com)](https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n> \n\n![命令](https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)\n\n# 新建代码库\n\n```powershell\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n# 配置\n\n```powershell\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n# 增加/删除文件\n\n```powershell\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n# 代码提交\n\n```powershell\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n# 分支\n\n```powershell\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n# 标签\n\n```powershell\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n# 查看信息\n\n```powershell\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n# 远程同步\n\n```powershell\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n# 撤销\n\n```powershell\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```","source":"_posts/GIT常用命令.md","raw":"---\ntitle: GIT常用命令\nid: 0CF9422B6AC20812B87F821D0173EB34\ndate: 2023-07-12 19:07:00\ntags: Git\ncategories: Tool\n---\n\n**GIT中常用的一些命令**\n\n<!-- more -->\n\n\n> 作者：阮一峰 [常用 Git 命令清单 - 阮一峰的网络日志 (ruanyifeng.com)](https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n> \n\n![命令](https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)\n\n# 新建代码库\n\n```powershell\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n# 配置\n\n```powershell\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n# 增加/删除文件\n\n```powershell\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n# 代码提交\n\n```powershell\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n# 分支\n\n```powershell\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n# 标签\n\n```powershell\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n# 查看信息\n\n```powershell\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n# 远程同步\n\n```powershell\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n# 撤销\n\n```powershell\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```","slug":"GIT常用命令","published":1,"updated":"2023-07-18T02:37:09.726Z","_id":"clk237kf4000744612zuo3x62","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>GIT中常用的一些命令</strong></p>\n<span id=\"more\"></span>\n\n\n<blockquote>\n<p>作者：阮一峰 <a href=\"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">常用 Git 命令清单 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>\n</blockquote>\n<p><img src=\"https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\" alt=\"命令\"></p>\n<h1 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git init [<span class=\"type\">project</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git clone [<span class=\"type\">url</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git config <span class=\"literal\">--list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git config <span class=\"literal\">-e</span> [--<span class=\"type\">global</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git config [--<span class=\"type\">global</span>] user.name <span class=\"string\">&quot;[name]&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git config [--<span class=\"type\">global</span>] user.email <span class=\"string\">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加&#x2F;删除文件\"></a>增加&#x2F;删除文件</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git add [<span class=\"type\">file1</span>] [<span class=\"type\">file2</span>] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git add [<span class=\"type\">dir</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git add <span class=\"literal\">-p</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">rm</span> [<span class=\"type\">file1</span>] [<span class=\"type\">file2</span>] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">rm</span> <span class=\"literal\">--cached</span> [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">mv</span> [<span class=\"type\">file</span>-<span class=\"type\">original</span>] [<span class=\"type\">file</span>-<span class=\"type\">renamed</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">-m</span> [<span class=\"type\">message</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit [<span class=\"type\">file1</span>] [<span class=\"type\">file2</span>] ... <span class=\"literal\">-m</span> [<span class=\"type\">message</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">-a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">-v</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">--amend</span> <span class=\"literal\">-m</span> [<span class=\"type\">message</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">--amend</span> [<span class=\"type\">file1</span>] [<span class=\"type\">file2</span>] ...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">-r</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">-a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch [<span class=\"type\">branch</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout <span class=\"literal\">-b</span> [<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch [<span class=\"type\">branch</span>] [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">--track</span> [<span class=\"type\">branch</span>] [<span class=\"type\">remote</span>-<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout [<span class=\"type\">branch</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">--set-upstream</span> [<span class=\"type\">branch</span>] [<span class=\"type\">remote</span>-<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git merge [<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git cherry<span class=\"literal\">-pick</span> [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">-d</span> [<span class=\"type\">branch</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push origin <span class=\"literal\">--delete</span> [<span class=\"type\">branch</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">-dr</span> [<span class=\"type\">remote</span>/<span class=\"type\">branch</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git tag [<span class=\"type\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git tag [<span class=\"type\">tag</span>] [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git tag <span class=\"literal\">-d</span> [<span class=\"type\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push origin :refs/tags/[<span class=\"type\">tagName</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git show [<span class=\"type\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] [<span class=\"type\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] <span class=\"literal\">--tags</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout <span class=\"literal\">-b</span> [<span class=\"type\">branch</span>] [<span class=\"type\">tag</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">--stat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索提交历史，根据关键词</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">-S</span> [<span class=\"type\">keyword</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log [<span class=\"type\">tag</span>] HEAD <span class=\"literal\">--pretty</span>=format:%s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log [<span class=\"type\">tag</span>] HEAD <span class=\"literal\">--grep</span> feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">--follow</span> [<span class=\"type\">file</span>]</span><br><span class=\"line\"><span class=\"variable\">$</span> git whatchanged [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">-p</span> [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示过去5次提交</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">-5</span> <span class=\"literal\">--pretty</span> <span class=\"literal\">--oneline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git shortlog <span class=\"literal\">-sn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git blame [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span> <span class=\"literal\">--cached</span> [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span> HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span> [<span class=\"type\">first</span>-<span class=\"type\">branch</span>]...[<span class=\"type\">second</span>-<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示今天你写了多少行代码</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span> <span class=\"literal\">--shortstat</span> <span class=\"string\">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git show [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git show <span class=\"literal\">--name-only</span> [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git show [<span class=\"type\">commit</span>]:[<span class=\"type\">filename</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reflog</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git fetch [<span class=\"type\">remote</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git remote <span class=\"literal\">-v</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git remote show [<span class=\"type\">remote</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git remote add [<span class=\"type\">shortname</span>] [<span class=\"type\">url</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git pull [<span class=\"type\">remote</span>] [<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] [<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] <span class=\"literal\">--force</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] <span class=\"literal\">--all</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout [<span class=\"type\">commit</span>] [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset <span class=\"literal\">--hard</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset <span class=\"literal\">--hard</span> [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset <span class=\"literal\">--keep</span> [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git revert [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git stash</span><br><span class=\"line\"><span class=\"variable\">$</span> git stash pop</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong>GIT中常用的一些命令</strong></p>","more":"<blockquote>\n<p>作者：阮一峰 <a href=\"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">常用 Git 命令清单 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>\n</blockquote>\n<p><img src=\"https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\" alt=\"命令\"></p>\n<h1 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git init [<span class=\"type\">project</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git clone [<span class=\"type\">url</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git config <span class=\"literal\">--list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git config <span class=\"literal\">-e</span> [--<span class=\"type\">global</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git config [--<span class=\"type\">global</span>] user.name <span class=\"string\">&quot;[name]&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git config [--<span class=\"type\">global</span>] user.email <span class=\"string\">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加&#x2F;删除文件\"></a>增加&#x2F;删除文件</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git add [<span class=\"type\">file1</span>] [<span class=\"type\">file2</span>] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git add [<span class=\"type\">dir</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git add <span class=\"literal\">-p</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">rm</span> [<span class=\"type\">file1</span>] [<span class=\"type\">file2</span>] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">rm</span> <span class=\"literal\">--cached</span> [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">mv</span> [<span class=\"type\">file</span>-<span class=\"type\">original</span>] [<span class=\"type\">file</span>-<span class=\"type\">renamed</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">-m</span> [<span class=\"type\">message</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit [<span class=\"type\">file1</span>] [<span class=\"type\">file2</span>] ... <span class=\"literal\">-m</span> [<span class=\"type\">message</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">-a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">-v</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">--amend</span> <span class=\"literal\">-m</span> [<span class=\"type\">message</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">--amend</span> [<span class=\"type\">file1</span>] [<span class=\"type\">file2</span>] ...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">-r</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">-a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch [<span class=\"type\">branch</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout <span class=\"literal\">-b</span> [<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch [<span class=\"type\">branch</span>] [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">--track</span> [<span class=\"type\">branch</span>] [<span class=\"type\">remote</span>-<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout [<span class=\"type\">branch</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">--set-upstream</span> [<span class=\"type\">branch</span>] [<span class=\"type\">remote</span>-<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git merge [<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git cherry<span class=\"literal\">-pick</span> [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">-d</span> [<span class=\"type\">branch</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push origin <span class=\"literal\">--delete</span> [<span class=\"type\">branch</span>-<span class=\"type\">name</span>]</span><br><span class=\"line\"><span class=\"variable\">$</span> git branch <span class=\"literal\">-dr</span> [<span class=\"type\">remote</span>/<span class=\"type\">branch</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git tag [<span class=\"type\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git tag [<span class=\"type\">tag</span>] [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git tag <span class=\"literal\">-d</span> [<span class=\"type\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push origin :refs/tags/[<span class=\"type\">tagName</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git show [<span class=\"type\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] [<span class=\"type\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] <span class=\"literal\">--tags</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout <span class=\"literal\">-b</span> [<span class=\"type\">branch</span>] [<span class=\"type\">tag</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">--stat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索提交历史，根据关键词</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">-S</span> [<span class=\"type\">keyword</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log [<span class=\"type\">tag</span>] HEAD <span class=\"literal\">--pretty</span>=format:%s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log [<span class=\"type\">tag</span>] HEAD <span class=\"literal\">--grep</span> feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">--follow</span> [<span class=\"type\">file</span>]</span><br><span class=\"line\"><span class=\"variable\">$</span> git whatchanged [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">-p</span> [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示过去5次提交</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git log <span class=\"literal\">-5</span> <span class=\"literal\">--pretty</span> <span class=\"literal\">--oneline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git shortlog <span class=\"literal\">-sn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git blame [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span> <span class=\"literal\">--cached</span> [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span> HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span> [<span class=\"type\">first</span>-<span class=\"type\">branch</span>]...[<span class=\"type\">second</span>-<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示今天你写了多少行代码</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git <span class=\"built_in\">diff</span> <span class=\"literal\">--shortstat</span> <span class=\"string\">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git show [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git show <span class=\"literal\">--name-only</span> [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git show [<span class=\"type\">commit</span>]:[<span class=\"type\">filename</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reflog</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git fetch [<span class=\"type\">remote</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git remote <span class=\"literal\">-v</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git remote show [<span class=\"type\">remote</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git remote add [<span class=\"type\">shortname</span>] [<span class=\"type\">url</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git pull [<span class=\"type\">remote</span>] [<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] [<span class=\"type\">branch</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] <span class=\"literal\">--force</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git push [<span class=\"type\">remote</span>] <span class=\"literal\">--all</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout [<span class=\"type\">commit</span>] [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset [<span class=\"type\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset <span class=\"literal\">--hard</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset <span class=\"literal\">--hard</span> [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git reset <span class=\"literal\">--keep</span> [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git revert [<span class=\"type\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\"><span class=\"variable\">$</span> git stash</span><br><span class=\"line\"><span class=\"variable\">$</span> git stash pop</span><br></pre></td></tr></table></figure>"},{"title":"IFormFile始终为空的问题","id":"BB529A094197215482DB7EF982E1C1AA","date":"2019-11-04T14:26:45.000Z","_content":"\n  之前获取上传文件都是使用Request.Form.Files获取，直到这次\n  改成定义形参 IFormFile时才遇到这个问题。  \n\n<!-- more -->\n\n```C#\n// POST api/values\n[HttpPost]\npublic void Post([FromForm] IFormFile file)\n{\n　　var files = Request.Form.Files;\n　　//file == null\n　　//files != null;\n}\n```\n\n  不知道这是不是微软的一个BUG？  \n\n  解决方案有两种：\n\n  方案一：去除[ApiController]这个Attribute\n\n  ```C#\n  [Route(\"api/[controller]\")]\n  //[ApiController]\n  public class ValuesController : ControllerBase \n  {\n  }\n  ```\n\n 方案二：在[FromForm]里添加Name属性:[FromForm(name = \"file\")]，这个属性需跟file参数保持一致\n\n  ```C#\n  // POST api/values\n  [HttpPost]\n  public void Post([FromForm(Name = \"file\")] IFormFile file)\n  {\n  }\n  ```\n\n  >方案出自：[IFormFile is always null when receiving file from console app](https://stackoverflow.com/questions/52294830/iformfile-is-always-null-when-receiving-file-from-console-app)","source":"_posts/IFormFile始终为空的问题.md","raw":"---\ntitle: IFormFile始终为空的问题\nid: BB529A094197215482DB7EF982E1C1AA\ndate: 2019-11-04 22:26:45\ntags: .Netcore\ncategories: Technology\n---\n\n  之前获取上传文件都是使用Request.Form.Files获取，直到这次\n  改成定义形参 IFormFile时才遇到这个问题。  \n\n<!-- more -->\n\n```C#\n// POST api/values\n[HttpPost]\npublic void Post([FromForm] IFormFile file)\n{\n　　var files = Request.Form.Files;\n　　//file == null\n　　//files != null;\n}\n```\n\n  不知道这是不是微软的一个BUG？  \n\n  解决方案有两种：\n\n  方案一：去除[ApiController]这个Attribute\n\n  ```C#\n  [Route(\"api/[controller]\")]\n  //[ApiController]\n  public class ValuesController : ControllerBase \n  {\n  }\n  ```\n\n 方案二：在[FromForm]里添加Name属性:[FromForm(name = \"file\")]，这个属性需跟file参数保持一致\n\n  ```C#\n  // POST api/values\n  [HttpPost]\n  public void Post([FromForm(Name = \"file\")] IFormFile file)\n  {\n  }\n  ```\n\n  >方案出自：[IFormFile is always null when receiving file from console app](https://stackoverflow.com/questions/52294830/iformfile-is-always-null-when-receiving-file-from-console-app)","slug":"IFormFile始终为空的问题","published":1,"updated":"2023-07-18T02:37:09.726Z","_id":"clk237kf500084461eh1gaiqv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>  之前获取上传文件都是使用Request.Form.Files获取，直到这次<br>  改成定义形参 IFormFile时才遇到这个问题。  </p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST api/values</span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromForm] IFormFile file</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> files = Request.Form.Files;</span><br><span class=\"line\">　　<span class=\"comment\">//file == null</span></span><br><span class=\"line\">　　<span class=\"comment\">//files != null;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  不知道这是不是微软的一个BUG？  </p>\n<p>  解决方案有两种：</p>\n<p>  方案一：去除[ApiController]这个Attribute</p>\n  <figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"comment\">//[ApiController]</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValuesController</span> : <span class=\"title\">ControllerBase</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 方案二：在[FromForm]里添加Name属性:[FromForm(name &#x3D; “file”)]，这个属性需跟file参数保持一致</p>\n  <figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST api/values</span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromForm(Name = <span class=\"string\">&quot;file&quot;</span></span>)] IFormFile file)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>方案出自：<a href=\"https://stackoverflow.com/questions/52294830/iformfile-is-always-null-when-receiving-file-from-console-app\">IFormFile is always null when receiving file from console app</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>  之前获取上传文件都是使用Request.Form.Files获取，直到这次<br>  改成定义形参 IFormFile时才遇到这个问题。  </p>","more":"<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST api/values</span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromForm] IFormFile file</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> files = Request.Form.Files;</span><br><span class=\"line\">　　<span class=\"comment\">//file == null</span></span><br><span class=\"line\">　　<span class=\"comment\">//files != null;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  不知道这是不是微软的一个BUG？  </p>\n<p>  解决方案有两种：</p>\n<p>  方案一：去除[ApiController]这个Attribute</p>\n  <figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"comment\">//[ApiController]</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValuesController</span> : <span class=\"title\">ControllerBase</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 方案二：在[FromForm]里添加Name属性:[FromForm(name &#x3D; “file”)]，这个属性需跟file参数保持一致</p>\n  <figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST api/values</span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromForm(Name = <span class=\"string\">&quot;file&quot;</span></span>)] IFormFile file)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>方案出自：<a href=\"https://stackoverflow.com/questions/52294830/iformfile-is-always-null-when-receiving-file-from-console-app\">IFormFile is always null when receiving file from console app</a></p>\n</blockquote>"},{"title":"JS设置localStorage有效期","id":"422886F81BCA6B29305410027114C835","date":"2018-09-03T00:54:00.000Z","_content":"\n  localStorage是一个没有时间限制的数据存储，如果没有手动删除它，它将永久保存。但是有些时候我们又需要它在一段时间后自动删除，这里我们可以对它进行扩展。\n\n<!-- more -->\n\n``` js\n\nvar date = new Date().getTime();\n//设置localStorage的值\nfoowwLocalStorage.set(\"test\", \"你好\", date + 10000);\n//获取localStorage的值\nvar data = foowwLocalStorage.get(\"test\");\n\n\nconst foowwLocalStorage = {\n    set: function (key, value, ttl_ms) {\n        var data = { value: value, expirse: new Date(ttl_ms).getTime() };\n        localStorage.setItem(key, JSON.stringify(data));\n    },\n    get: function (key) {\n        var data = JSON.parse(localStorage.getItem(key));\n        if (data !== null) {\n            debugger\n            if (data.expirse != null && data.expirse < new Date().getTime()) {\n                localStorage.removeItem(key);\n            } else {\n                return data.value;\n            }\n        }\n        return null;\n    }\n}\n```\n  ","source":"_posts/JS设置localStorage有效期.md","raw":"---\ntitle: JS设置localStorage有效期\nid: 422886F81BCA6B29305410027114C835\ndate: 2018-09-03 08:54:00\ntags: js\ncategories: Technology\n---\n\n  localStorage是一个没有时间限制的数据存储，如果没有手动删除它，它将永久保存。但是有些时候我们又需要它在一段时间后自动删除，这里我们可以对它进行扩展。\n\n<!-- more -->\n\n``` js\n\nvar date = new Date().getTime();\n//设置localStorage的值\nfoowwLocalStorage.set(\"test\", \"你好\", date + 10000);\n//获取localStorage的值\nvar data = foowwLocalStorage.get(\"test\");\n\n\nconst foowwLocalStorage = {\n    set: function (key, value, ttl_ms) {\n        var data = { value: value, expirse: new Date(ttl_ms).getTime() };\n        localStorage.setItem(key, JSON.stringify(data));\n    },\n    get: function (key) {\n        var data = JSON.parse(localStorage.getItem(key));\n        if (data !== null) {\n            debugger\n            if (data.expirse != null && data.expirse < new Date().getTime()) {\n                localStorage.removeItem(key);\n            } else {\n                return data.value;\n            }\n        }\n        return null;\n    }\n}\n```\n  ","slug":"JS设置localStorage有效期","published":1,"updated":"2023-07-18T02:37:09.726Z","_id":"clk237kf6000944617uq49sv9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>  localStorage是一个没有时间限制的数据存储，如果没有手动删除它，它将永久保存。但是有些时候我们又需要它在一段时间后自动删除，这里我们可以对它进行扩展。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置localStorage的值</span></span><br><span class=\"line\">foowwLocalStorage.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;你好&quot;</span>, date + <span class=\"number\">10000</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取localStorage的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = foowwLocalStorage.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foowwLocalStorage = &#123;</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">key, value, ttl_ms</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">value</span>: value, <span class=\"attr\">expirse</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(ttl_ms).<span class=\"title function_\">getTime</span>() &#125;;</span><br><span class=\"line\">        <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(key, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(key));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">debugger</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data.<span class=\"property\">expirse</span> != <span class=\"literal\">null</span> &amp;&amp; data.<span class=\"property\">expirse</span> &lt; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">removeItem</span>(key);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.<span class=\"property\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>  localStorage是一个没有时间限制的数据存储，如果没有手动删除它，它将永久保存。但是有些时候我们又需要它在一段时间后自动删除，这里我们可以对它进行扩展。</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置localStorage的值</span></span><br><span class=\"line\">foowwLocalStorage.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;你好&quot;</span>, date + <span class=\"number\">10000</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取localStorage的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = foowwLocalStorage.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foowwLocalStorage = &#123;</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">key, value, ttl_ms</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">value</span>: value, <span class=\"attr\">expirse</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(ttl_ms).<span class=\"title function_\">getTime</span>() &#125;;</span><br><span class=\"line\">        <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(key, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(key));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">debugger</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data.<span class=\"property\">expirse</span> != <span class=\"literal\">null</span> &amp;&amp; data.<span class=\"property\">expirse</span> &lt; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">removeItem</span>(key);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.<span class=\"property\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"linux常用命令","id":"0FEB736DD08163CC1B6C2849A379B750","date":"2018-04-12T02:58:20.000Z","_content":"\n**Linux中常用的一些命令，记录下来方便日后查询(持续更新中...)**\n\n<!-- more -->\n\n查看端口使用情况\n```\nnetstat -ntpl #查看端口使用情况\n\n#查看所有端口\nnetstat -aptn\n#方式测试远程主机端口是否打开\ntelnet ip 端口号 \n```\n\n删除文件夹\n```\nrm\nrm-rf //删除文件夹所以文件  \n```\n查看系统版本\n```\ncat /proc/version\n```\n查看所有监听端口\n```\nnetstat -Intp\n```\n重启Nginx\n```\nservice nginx restart\n```\n重启FTP\n```\nservice vsftpd restart\n```\n添加账号\n```\nsudo adduser xxx //home目录下添加一个账号\n```\n添加用户\n```\nsudo useradd xxx //添加用户，不在home目录添加账号\n```\n删除账户\n```\nuserdel -r xxx //加上r删除用户目录\n```\n查看当前系统用户\n```\ncat etc/passwd\n```\n文件/文件夹命令\n```\n//CP命令\n//格式：CP [选项] 源文件或目录 目的文件或目录\n//选项说明：-b:同名，备份原来文件  -f 强制覆盖同名文件  -r 按递归方式保留原目录结构复制文件\ncp -r /tmp/a /root/a\n\n//MV 移动\n\n//解压tag.gz\ntar -zxvf ...\n\n```\n\n开启防火墙端口\n\n```\nfirewall-cmd --permanent --add-port=10050/tcp \nfirewall-cmd --reload\n```\n\n解压\n\n```\n#tar.gz\ntar -zxvf ...\n#7z\n7za x ...\n```\n\nvim输入：ins或i，wq保存，u撤销，ctrl+u取消撤销 q!退出\n\n软件相关\n\n```\n删除某软件\n删除安装包\nsudo apt-get remove zabbix-agent\n删除相关从属安装包\nsudo apt-get remove --auto-remove zabbix-agent\n清理相关配置文件\nsudo apt-get purge zabbix-agent\n```\n\n","source":"_posts/Linux常用命令.md","raw":"---\ntitle: linux常用命令\nid: 0FEB736DD08163CC1B6C2849A379B750\ndate: 2018-04-12 10:58:20\ntags: Linux\ncategories: System\n---\n\n**Linux中常用的一些命令，记录下来方便日后查询(持续更新中...)**\n\n<!-- more -->\n\n查看端口使用情况\n```\nnetstat -ntpl #查看端口使用情况\n\n#查看所有端口\nnetstat -aptn\n#方式测试远程主机端口是否打开\ntelnet ip 端口号 \n```\n\n删除文件夹\n```\nrm\nrm-rf //删除文件夹所以文件  \n```\n查看系统版本\n```\ncat /proc/version\n```\n查看所有监听端口\n```\nnetstat -Intp\n```\n重启Nginx\n```\nservice nginx restart\n```\n重启FTP\n```\nservice vsftpd restart\n```\n添加账号\n```\nsudo adduser xxx //home目录下添加一个账号\n```\n添加用户\n```\nsudo useradd xxx //添加用户，不在home目录添加账号\n```\n删除账户\n```\nuserdel -r xxx //加上r删除用户目录\n```\n查看当前系统用户\n```\ncat etc/passwd\n```\n文件/文件夹命令\n```\n//CP命令\n//格式：CP [选项] 源文件或目录 目的文件或目录\n//选项说明：-b:同名，备份原来文件  -f 强制覆盖同名文件  -r 按递归方式保留原目录结构复制文件\ncp -r /tmp/a /root/a\n\n//MV 移动\n\n//解压tag.gz\ntar -zxvf ...\n\n```\n\n开启防火墙端口\n\n```\nfirewall-cmd --permanent --add-port=10050/tcp \nfirewall-cmd --reload\n```\n\n解压\n\n```\n#tar.gz\ntar -zxvf ...\n#7z\n7za x ...\n```\n\nvim输入：ins或i，wq保存，u撤销，ctrl+u取消撤销 q!退出\n\n软件相关\n\n```\n删除某软件\n删除安装包\nsudo apt-get remove zabbix-agent\n删除相关从属安装包\nsudo apt-get remove --auto-remove zabbix-agent\n清理相关配置文件\nsudo apt-get purge zabbix-agent\n```\n\n","slug":"Linux常用命令","published":1,"updated":"2023-07-18T02:37:09.726Z","_id":"clk237kf9000d44618f5xgbr0","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Linux中常用的一些命令，记录下来方便日后查询(持续更新中…)</strong></p>\n<span id=\"more\"></span>\n\n<p>查看端口使用情况</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">netstat</span> -ntpl <span class=\"comment\">#查看端口使用情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看所有端口</span></span><br><span class=\"line\">netstat -aptn</span><br><span class=\"line\"><span class=\"comment\">#方式测试远程主机端口是否打开</span></span><br><span class=\"line\">telnet ip 端口号 </span><br></pre></td></tr></table></figure>\n\n<p>删除文件夹</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">rm</span></span><br><span class=\"line\"><span class=\"keyword\">rm</span>-rf <span class=\"comment\">//删除文件夹所以文件  </span></span><br></pre></td></tr></table></figure>\n<p>查看系统版本</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat <span class=\"regexp\">/proc/</span>version</span><br></pre></td></tr></table></figure>\n<p>查看所有监听端口</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">netstat -Intp</span></span><br></pre></td></tr></table></figure>\n<p>重启Nginx</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service nginx restart</span></span><br></pre></td></tr></table></figure>\n<p>重启FTP</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service vsftpd restart</span></span><br></pre></td></tr></table></figure>\n<p>添加账号</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser xxx <span class=\"regexp\">//</span>home目录下添加一个账号</span><br></pre></td></tr></table></figure>\n<p>添加用户</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo useradd xxx <span class=\"regexp\">//</span>添加用户，不在home目录添加账号</span><br></pre></td></tr></table></figure>\n<p>删除账户</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel -r xxx <span class=\"regexp\">//</span>加上r删除用户目录</span><br></pre></td></tr></table></figure>\n<p>查看当前系统用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> etc/passwd</span><br></pre></td></tr></table></figure>\n<p>文件&#x2F;文件夹命令</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>CP命令</span><br><span class=\"line\"><span class=\"regexp\">//</span>格式：CP [选项] 源文件或目录 目的文件或目录</span><br><span class=\"line\"><span class=\"regexp\">//</span>选项说明：-b:同名，备份原来文件  -f 强制覆盖同名文件  -r 按递归方式保留原目录结构复制文件</span><br><span class=\"line\">cp -r <span class=\"regexp\">/tmp/</span>a <span class=\"regexp\">/root/</span>a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>MV 移动</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>解压tag.gz</span><br><span class=\"line\">tar -zxvf ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>开启防火墙端口</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">firewall</span><span class=\"literal\">-</span><span class=\"comment\">cmd</span> <span class=\"literal\">--</span><span class=\"comment\">permanent</span> <span class=\"literal\">--</span><span class=\"comment\">add</span><span class=\"literal\">-</span><span class=\"comment\">port=10050/tcp </span></span><br><span class=\"line\"><span class=\"comment\">firewall</span><span class=\"literal\">-</span><span class=\"comment\">cmd</span> <span class=\"literal\">--</span><span class=\"comment\">reload</span></span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#tar.gz</span></span><br><span class=\"line\">tar -zxvf <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\">#7z</span></span><br><span class=\"line\">7za x <span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p>vim输入：ins或i，wq保存，u撤销，ctrl+u取消撤销 q!退出</p>\n<p>软件相关</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除某软件</span><br><span class=\"line\">删除安装包</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> zabbix-agent</span><br><span class=\"line\">删除相关从属安装包</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> --auto-<span class=\"built_in\">remove</span> zabbix-agent</span><br><span class=\"line\">清理相关配置文件</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> purge zabbix-agent</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><strong>Linux中常用的一些命令，记录下来方便日后查询(持续更新中…)</strong></p>","more":"<p>查看端口使用情况</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">netstat</span> -ntpl <span class=\"comment\">#查看端口使用情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看所有端口</span></span><br><span class=\"line\">netstat -aptn</span><br><span class=\"line\"><span class=\"comment\">#方式测试远程主机端口是否打开</span></span><br><span class=\"line\">telnet ip 端口号 </span><br></pre></td></tr></table></figure>\n\n<p>删除文件夹</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">rm</span></span><br><span class=\"line\"><span class=\"keyword\">rm</span>-rf <span class=\"comment\">//删除文件夹所以文件  </span></span><br></pre></td></tr></table></figure>\n<p>查看系统版本</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat <span class=\"regexp\">/proc/</span>version</span><br></pre></td></tr></table></figure>\n<p>查看所有监听端口</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">netstat -Intp</span></span><br></pre></td></tr></table></figure>\n<p>重启Nginx</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service nginx restart</span></span><br></pre></td></tr></table></figure>\n<p>重启FTP</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service vsftpd restart</span></span><br></pre></td></tr></table></figure>\n<p>添加账号</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser xxx <span class=\"regexp\">//</span>home目录下添加一个账号</span><br></pre></td></tr></table></figure>\n<p>添加用户</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo useradd xxx <span class=\"regexp\">//</span>添加用户，不在home目录添加账号</span><br></pre></td></tr></table></figure>\n<p>删除账户</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel -r xxx <span class=\"regexp\">//</span>加上r删除用户目录</span><br></pre></td></tr></table></figure>\n<p>查看当前系统用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> etc/passwd</span><br></pre></td></tr></table></figure>\n<p>文件&#x2F;文件夹命令</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>CP命令</span><br><span class=\"line\"><span class=\"regexp\">//</span>格式：CP [选项] 源文件或目录 目的文件或目录</span><br><span class=\"line\"><span class=\"regexp\">//</span>选项说明：-b:同名，备份原来文件  -f 强制覆盖同名文件  -r 按递归方式保留原目录结构复制文件</span><br><span class=\"line\">cp -r <span class=\"regexp\">/tmp/</span>a <span class=\"regexp\">/root/</span>a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>MV 移动</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>解压tag.gz</span><br><span class=\"line\">tar -zxvf ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>开启防火墙端口</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">firewall</span><span class=\"literal\">-</span><span class=\"comment\">cmd</span> <span class=\"literal\">--</span><span class=\"comment\">permanent</span> <span class=\"literal\">--</span><span class=\"comment\">add</span><span class=\"literal\">-</span><span class=\"comment\">port=10050/tcp </span></span><br><span class=\"line\"><span class=\"comment\">firewall</span><span class=\"literal\">-</span><span class=\"comment\">cmd</span> <span class=\"literal\">--</span><span class=\"comment\">reload</span></span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#tar.gz</span></span><br><span class=\"line\">tar -zxvf <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\">#7z</span></span><br><span class=\"line\">7za x <span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p>vim输入：ins或i，wq保存，u撤销，ctrl+u取消撤销 q!退出</p>\n<p>软件相关</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除某软件</span><br><span class=\"line\">删除安装包</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> zabbix-agent</span><br><span class=\"line\">删除相关从属安装包</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> --auto-<span class=\"built_in\">remove</span> zabbix-agent</span><br><span class=\"line\">清理相关配置文件</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> purge zabbix-agent</span><br></pre></td></tr></table></figure>"},{"title":"Python学习笔记-Python数据类型","id":"75225689E99ECDA945680C6721B2CD28","date":"2018-03-27T00:54:00.000Z","_content":"\n  ### 整数  \n  ### 浮点数  \n  ### 字符串  \n\n  字符串格式化: 用 % 实现  \n  可使用 isinstance(x, str) 判断变量x是否是字符串  \n\n<!-- more -->\n\n  ```\n  >>> 'Hello , %s' % 'world'\n'Hello , world'\n>>> 'Hi , %s , you have $%d.' % ('Michael' , 1000000)\n'Hi , Michael , you have $1000000.'\n  ```\n\n|  占位符  |  替换内容  |\n|----------|------|\n| %d | 整数 |\n| %f | 浮点数 |\n| %s | 字符串 |\n| %x | 十六进制整数 |\n\n### List\n  有序集合，可随时添加和删除其中的元素。  \n  有两个特点：  \n  * 查找和插入的时间随着元素的增加而增加\n  * 占用空间小，浪费内存少\n```\n>>> classmates = ['Michael', 'Bob', 'Tracy']\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n```\n使用 len() 函数获取长度，最后一位元素是 len(classmates) -1\n追加元素使用 append() ，插入元素使用 insert()，删除末尾使用 pop()，删除指定 pop(1)\n\n```\n>>> classmates.append('Adam')\n>>> classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n\n>>> classmates.insert(1, 'Jack')\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n\n>>> classmates.pop()\n'Adam'\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n\n>>> classmates.pop()\n'Adam'\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n```\n\n### Tuple\n有序列表元组，与list类似，但初始化后不能修改\n```\n>>> classmates = ('Michael', 'Bob', 'Tracy')\n```\n如果只有一个元素，需要加上一个逗号避免歧义\n```\n>>> t = (1,)\n>>> t\n(1,)\n```\n\n### Dict\n字典，全称dictionary，使用键值对(key , value)存储\n```\n>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n```\n\n使用 in 判断 key 是否存在\n```\n>>> 'Thomas' in d\nFalse\n```\n\n使用 get() ，如果 key 不存在，可以返回 None，或者指定的value\n```\n>>> d.get('Thomas')\n>>> d.get('Thomas', -1)\n-1\n```\n\n删除一个 key ，对应的 value 也会删除，使用 pop(key) \n```\n>>> d.pop('Bob')\n75\n>>> d\n{'Michael': 95, 'Tracy': 85}\n```\n和List相比，有两个特点:\n  * 查找和插入速度快，不会随着key的增加而变慢\n  * 需要占用大量内存，浪费内存多\n\n### Set\n与 dict 类似，但仅存储 key，不存储value，且key不可以重复\n```\n>>> s = set([1, 2, 3])\n>>> s\n{1, 2, 3}\n```\n通过 add(key) 添加元素\n```\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n```\n通过 remove(key) 删除元素\n\n\n","source":"_posts/Python学习笔记-Python数据类型.md","raw":"---\ntitle: Python学习笔记-Python数据类型\nid: 75225689E99ECDA945680C6721B2CD28\ndate: 2018-03-27 08:54:00\ntags: Python\ncategories: Technology \n---\n\n  ### 整数  \n  ### 浮点数  \n  ### 字符串  \n\n  字符串格式化: 用 % 实现  \n  可使用 isinstance(x, str) 判断变量x是否是字符串  \n\n<!-- more -->\n\n  ```\n  >>> 'Hello , %s' % 'world'\n'Hello , world'\n>>> 'Hi , %s , you have $%d.' % ('Michael' , 1000000)\n'Hi , Michael , you have $1000000.'\n  ```\n\n|  占位符  |  替换内容  |\n|----------|------|\n| %d | 整数 |\n| %f | 浮点数 |\n| %s | 字符串 |\n| %x | 十六进制整数 |\n\n### List\n  有序集合，可随时添加和删除其中的元素。  \n  有两个特点：  \n  * 查找和插入的时间随着元素的增加而增加\n  * 占用空间小，浪费内存少\n```\n>>> classmates = ['Michael', 'Bob', 'Tracy']\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n```\n使用 len() 函数获取长度，最后一位元素是 len(classmates) -1\n追加元素使用 append() ，插入元素使用 insert()，删除末尾使用 pop()，删除指定 pop(1)\n\n```\n>>> classmates.append('Adam')\n>>> classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n\n>>> classmates.insert(1, 'Jack')\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n\n>>> classmates.pop()\n'Adam'\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n\n>>> classmates.pop()\n'Adam'\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n```\n\n### Tuple\n有序列表元组，与list类似，但初始化后不能修改\n```\n>>> classmates = ('Michael', 'Bob', 'Tracy')\n```\n如果只有一个元素，需要加上一个逗号避免歧义\n```\n>>> t = (1,)\n>>> t\n(1,)\n```\n\n### Dict\n字典，全称dictionary，使用键值对(key , value)存储\n```\n>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n```\n\n使用 in 判断 key 是否存在\n```\n>>> 'Thomas' in d\nFalse\n```\n\n使用 get() ，如果 key 不存在，可以返回 None，或者指定的value\n```\n>>> d.get('Thomas')\n>>> d.get('Thomas', -1)\n-1\n```\n\n删除一个 key ，对应的 value 也会删除，使用 pop(key) \n```\n>>> d.pop('Bob')\n75\n>>> d\n{'Michael': 95, 'Tracy': 85}\n```\n和List相比，有两个特点:\n  * 查找和插入速度快，不会随着key的增加而变慢\n  * 需要占用大量内存，浪费内存多\n\n### Set\n与 dict 类似，但仅存储 key，不存储value，且key不可以重复\n```\n>>> s = set([1, 2, 3])\n>>> s\n{1, 2, 3}\n```\n通过 add(key) 添加元素\n```\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n```\n通过 remove(key) 删除元素\n\n\n","slug":"Python学习笔记-Python数据类型","published":1,"updated":"2023-07-18T02:37:09.726Z","_id":"clk237kfc000e44617ld9euu5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h3><h3 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h3><h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>  字符串格式化: 用 % 实现<br>  可使用 isinstance(x, str) 判断变量x是否是字符串  </p>\n<span id=\"more\"></span>\n\n  <figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &gt;&gt;&gt; <span class=\"string\">&#x27;Hello , %s&#x27;</span> <span class=\"meta\">%</span> <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Hello , world&#x27;</span></span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"string\">&#x27;Hi , %s , you have $%d.&#x27;</span> <span class=\"meta\">%</span> <span class=\"comment\">(&#x27;Michael&#x27; , 1000000)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Hi , Michael , you have $1000000.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>替换内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%d</td>\n<td>整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>十六进制整数</td>\n</tr>\n</tbody></table>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>  有序集合，可随时添加和删除其中的元素。<br>  有两个特点：  </p>\n<ul>\n<li>查找和插入的时间随着元素的增加而增加</li>\n<li>占用空间小，浪费内存少<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; classmates = [<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>]</span><br><span class=\"line\">&gt;&gt;&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>]</span><br></pre></td></tr></table></figure>\n使用 len() 函数获取长度，最后一位元素是 len(classmates) -1<br>追加元素使用 append() ，插入元素使用 insert()，删除末尾使用 pop()，删除指定 pop(1)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.append(<span class=\"string\">&#x27;Adam&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>, <span class=\"string\">&#x27;Adam&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.insert(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Jack&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>, <span class=\"string\">&#x27;Adam&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class=\"line\"><span class=\"string\">&#x27;Adam&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class=\"line\"><span class=\"string\">&#x27;Adam&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tuple\"><a href=\"#Tuple\" class=\"headerlink\" title=\"Tuple\"></a>Tuple</h3><p>有序列表元组，与list类似，但初始化后不能修改</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">classmates = (<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>)</span></span><br></pre></td></tr></table></figure>\n<p>如果只有一个元素，需要加上一个逗号避免歧义</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"literal\">t</span> = (<span class=\"number\">1</span>,)</span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"literal\">t</span></span><br><span class=\"line\">(<span class=\"number\">1</span>,)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dict\"><a href=\"#Dict\" class=\"headerlink\" title=\"Dict\"></a>Dict</h3><p>字典，全称dictionary，使用键值对(key , value)存储</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">d = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">d[<span class=\"string\">&#x27;Michael&#x27;</span>]</span></span><br><span class=\"line\">95</span><br></pre></td></tr></table></figure>\n\n<p>使用 in 判断 key 是否存在</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;Thomas&#x27;</span> <span class=\"keyword\">in</span> d</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 get() ，如果 key 不存在，可以返回 None，或者指定的value</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">d.get(<span class=\"string\">&#x27;Thomas&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">d.get(<span class=\"string\">&#x27;Thomas&#x27;</span>, -<span class=\"number\">1</span>)</span></span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n<p>删除一个 key ，对应的 value 也会删除，使用 pop(key) </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.pop(<span class=\"string\">&#x27;Bob&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>和List相比，有两个特点:</p>\n<ul>\n<li>查找和插入速度快，不会随着key的增加而变慢</li>\n<li>需要占用大量内存，浪费内存多</li>\n</ul>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>与 dict 类似，但仅存储 key，不存储value，且key不可以重复</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s</span></span><br><span class=\"line\">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 add(key) 添加元素</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s.add(<span class=\"number\">4</span>)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s</span></span><br><span class=\"line\">&#123;1, 2, 3, 4&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s.add(<span class=\"number\">4</span>)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s</span></span><br><span class=\"line\">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 remove(key) 删除元素</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h3><h3 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h3><h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>  字符串格式化: 用 % 实现<br>  可使用 isinstance(x, str) 判断变量x是否是字符串  </p>","more":"<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &gt;&gt;&gt; <span class=\"string\">&#x27;Hello , %s&#x27;</span> <span class=\"meta\">%</span> <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Hello , world&#x27;</span></span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"string\">&#x27;Hi , %s , you have $%d.&#x27;</span> <span class=\"meta\">%</span> <span class=\"comment\">(&#x27;Michael&#x27; , 1000000)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Hi , Michael , you have $1000000.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>替换内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%d</td>\n<td>整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>十六进制整数</td>\n</tr>\n</tbody></table>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>  有序集合，可随时添加和删除其中的元素。<br>  有两个特点：  </p>\n<ul>\n<li>查找和插入的时间随着元素的增加而增加</li>\n<li>占用空间小，浪费内存少<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; classmates = [<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>]</span><br><span class=\"line\">&gt;&gt;&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>]</span><br></pre></td></tr></table></figure>\n使用 len() 函数获取长度，最后一位元素是 len(classmates) -1<br>追加元素使用 append() ，插入元素使用 insert()，删除末尾使用 pop()，删除指定 pop(1)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.append(<span class=\"string\">&#x27;Adam&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>, <span class=\"string\">&#x27;Adam&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.insert(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Jack&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>, <span class=\"string\">&#x27;Adam&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class=\"line\"><span class=\"string\">&#x27;Adam&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class=\"line\"><span class=\"string\">&#x27;Adam&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tuple\"><a href=\"#Tuple\" class=\"headerlink\" title=\"Tuple\"></a>Tuple</h3><p>有序列表元组，与list类似，但初始化后不能修改</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">classmates = (<span class=\"string\">&#x27;Michael&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>)</span></span><br></pre></td></tr></table></figure>\n<p>如果只有一个元素，需要加上一个逗号避免歧义</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"literal\">t</span> = (<span class=\"number\">1</span>,)</span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"literal\">t</span></span><br><span class=\"line\">(<span class=\"number\">1</span>,)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dict\"><a href=\"#Dict\" class=\"headerlink\" title=\"Dict\"></a>Dict</h3><p>字典，全称dictionary，使用键值对(key , value)存储</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">d = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">d[<span class=\"string\">&#x27;Michael&#x27;</span>]</span></span><br><span class=\"line\">95</span><br></pre></td></tr></table></figure>\n\n<p>使用 in 判断 key 是否存在</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;Thomas&#x27;</span> <span class=\"keyword\">in</span> d</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 get() ，如果 key 不存在，可以返回 None，或者指定的value</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">d.get(<span class=\"string\">&#x27;Thomas&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">d.get(<span class=\"string\">&#x27;Thomas&#x27;</span>, -<span class=\"number\">1</span>)</span></span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n<p>删除一个 key ，对应的 value 也会删除，使用 pop(key) </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.pop(<span class=\"string\">&#x27;Bob&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>和List相比，有两个特点:</p>\n<ul>\n<li>查找和插入速度快，不会随着key的增加而变慢</li>\n<li>需要占用大量内存，浪费内存多</li>\n</ul>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>与 dict 类似，但仅存储 key，不存储value，且key不可以重复</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s</span></span><br><span class=\"line\">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 add(key) 添加元素</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s.add(<span class=\"number\">4</span>)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s</span></span><br><span class=\"line\">&#123;1, 2, 3, 4&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s.add(<span class=\"number\">4</span>)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\">s</span></span><br><span class=\"line\">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 remove(key) 删除元素</p>"},{"title":"SQLServer批量修改和插入","id":"5E7CDCAD7C9B57B815E4F825E835E744","date":"2023-07-12T10:55:15.000Z","_content":"# 场景\n\n今天在工作中遇到这么一个场景，我需要根据条件对表A做批量更新或插入。因为条件比较复杂，所以我使用了临时表B，先把需要更新或插入的数据查询出来放入临时表。然后更新表A的某字段，更新条件是A.id = B.id，更新效果是若记录存在表A中，则更新表A的字段，若不在表A中，则插入一条记录到表A。\n\n<!-- more -->\n\n# 初始方案\n\n首先想到的是写两条SQL：\n\n1. update使用A.id in (select id from B)，这时会更新所有存在的记录的字段，不存在则不更新\n2. 接下来再使用insert，条件是A.id not in (select id from B)，把A不存在未更新的数据插入到A\n\n两条SQL执行完，则完成了所有数据的更新和插入。\n\n# 优化方案\n\n后面有朋友提示可以使用SQL Merge语句做这件事情，由于对数据库并不熟悉，所以不知道还有这么一个语法。我查阅了相关资料，发现Merge确实很合适这个场景。参考[SQL Server Merge语句 - SQL Server教程 (yiibai.com)](https://www.yiibai.com/sqlserver/sql-server-merge.html)重构了代码\n\n```sql\nselect ... into #B \n\tfrom A  where ... \n\nmerge [A] a using #B b  \n    on a.id = b.id  \n    when matched  \n\t    then update set a.field = 1 \n    when not matched by target  \n\t    then insert (field)  \n\t\tvalues (b.id);\n```\n","source":"_posts/SQLServer批量修改和插入.md","raw":"---\ntitle: SQLServer批量修改和插入\nid: 5E7CDCAD7C9B57B815E4F825E835E744\ndate: 2023-07-12 18:55:15\ntags: \n- SQL\n- SQL Server\ncategories: Technology\n---\n# 场景\n\n今天在工作中遇到这么一个场景，我需要根据条件对表A做批量更新或插入。因为条件比较复杂，所以我使用了临时表B，先把需要更新或插入的数据查询出来放入临时表。然后更新表A的某字段，更新条件是A.id = B.id，更新效果是若记录存在表A中，则更新表A的字段，若不在表A中，则插入一条记录到表A。\n\n<!-- more -->\n\n# 初始方案\n\n首先想到的是写两条SQL：\n\n1. update使用A.id in (select id from B)，这时会更新所有存在的记录的字段，不存在则不更新\n2. 接下来再使用insert，条件是A.id not in (select id from B)，把A不存在未更新的数据插入到A\n\n两条SQL执行完，则完成了所有数据的更新和插入。\n\n# 优化方案\n\n后面有朋友提示可以使用SQL Merge语句做这件事情，由于对数据库并不熟悉，所以不知道还有这么一个语法。我查阅了相关资料，发现Merge确实很合适这个场景。参考[SQL Server Merge语句 - SQL Server教程 (yiibai.com)](https://www.yiibai.com/sqlserver/sql-server-merge.html)重构了代码\n\n```sql\nselect ... into #B \n\tfrom A  where ... \n\nmerge [A] a using #B b  \n    on a.id = b.id  \n    when matched  \n\t    then update set a.field = 1 \n    when not matched by target  \n\t    then insert (field)  \n\t\tvalues (b.id);\n```\n","slug":"SQLServer批量修改和插入","published":1,"updated":"2023-07-18T02:37:09.726Z","_id":"clk237kfe000j4461elem7tzp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>今天在工作中遇到这么一个场景，我需要根据条件对表A做批量更新或插入。因为条件比较复杂，所以我使用了临时表B，先把需要更新或插入的数据查询出来放入临时表。然后更新表A的某字段，更新条件是A.id &#x3D; B.id，更新效果是若记录存在表A中，则更新表A的字段，若不在表A中，则插入一条记录到表A。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"初始方案\"><a href=\"#初始方案\" class=\"headerlink\" title=\"初始方案\"></a>初始方案</h1><p>首先想到的是写两条SQL：</p>\n<ol>\n<li>update使用A.id in (select id from B)，这时会更新所有存在的记录的字段，不存在则不更新</li>\n<li>接下来再使用insert，条件是A.id not in (select id from B)，把A不存在未更新的数据插入到A</li>\n</ol>\n<p>两条SQL执行完，则完成了所有数据的更新和插入。</p>\n<h1 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h1><p>后面有朋友提示可以使用SQL Merge语句做这件事情，由于对数据库并不熟悉，所以不知道还有这么一个语法。我查阅了相关资料，发现Merge确实很合适这个场景。参考<a href=\"https://www.yiibai.com/sqlserver/sql-server-merge.html\">SQL Server Merge语句 - SQL Server教程 (yiibai.com)</a>重构了代码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ... <span class=\"keyword\">into</span> #B </span><br><span class=\"line\">\t<span class=\"keyword\">from</span> A  <span class=\"keyword\">where</span> ... </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">merge</span> [A] a <span class=\"keyword\">using</span> #B b  </span><br><span class=\"line\">    <span class=\"keyword\">on</span> a.id <span class=\"operator\">=</span> b.id  </span><br><span class=\"line\">    <span class=\"keyword\">when</span> matched  </span><br><span class=\"line\">\t    <span class=\"keyword\">then</span> <span class=\"keyword\">update</span> <span class=\"keyword\">set</span> a.field <span class=\"operator\">=</span> <span class=\"number\">1</span> </span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"keyword\">not</span> matched <span class=\"keyword\">by</span> target  </span><br><span class=\"line\">\t    <span class=\"keyword\">then</span> <span class=\"keyword\">insert</span> (field)  </span><br><span class=\"line\">\t\t<span class=\"keyword\">values</span> (b.id);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>今天在工作中遇到这么一个场景，我需要根据条件对表A做批量更新或插入。因为条件比较复杂，所以我使用了临时表B，先把需要更新或插入的数据查询出来放入临时表。然后更新表A的某字段，更新条件是A.id &#x3D; B.id，更新效果是若记录存在表A中，则更新表A的字段，若不在表A中，则插入一条记录到表A。</p>","more":"<h1 id=\"初始方案\"><a href=\"#初始方案\" class=\"headerlink\" title=\"初始方案\"></a>初始方案</h1><p>首先想到的是写两条SQL：</p>\n<ol>\n<li>update使用A.id in (select id from B)，这时会更新所有存在的记录的字段，不存在则不更新</li>\n<li>接下来再使用insert，条件是A.id not in (select id from B)，把A不存在未更新的数据插入到A</li>\n</ol>\n<p>两条SQL执行完，则完成了所有数据的更新和插入。</p>\n<h1 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h1><p>后面有朋友提示可以使用SQL Merge语句做这件事情，由于对数据库并不熟悉，所以不知道还有这么一个语法。我查阅了相关资料，发现Merge确实很合适这个场景。参考<a href=\"https://www.yiibai.com/sqlserver/sql-server-merge.html\">SQL Server Merge语句 - SQL Server教程 (yiibai.com)</a>重构了代码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ... <span class=\"keyword\">into</span> #B </span><br><span class=\"line\">\t<span class=\"keyword\">from</span> A  <span class=\"keyword\">where</span> ... </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">merge</span> [A] a <span class=\"keyword\">using</span> #B b  </span><br><span class=\"line\">    <span class=\"keyword\">on</span> a.id <span class=\"operator\">=</span> b.id  </span><br><span class=\"line\">    <span class=\"keyword\">when</span> matched  </span><br><span class=\"line\">\t    <span class=\"keyword\">then</span> <span class=\"keyword\">update</span> <span class=\"keyword\">set</span> a.field <span class=\"operator\">=</span> <span class=\"number\">1</span> </span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"keyword\">not</span> matched <span class=\"keyword\">by</span> target  </span><br><span class=\"line\">\t    <span class=\"keyword\">then</span> <span class=\"keyword\">insert</span> (field)  </span><br><span class=\"line\">\t\t<span class=\"keyword\">values</span> (b.id);</span><br></pre></td></tr></table></figure>"},{"title":"Ubuntu部署netcore网站","id":"F044DDBABEAB96FC3FE6FFED7C2544BB","date":"2020-03-15T08:13:30.000Z","_content":"\nDocker部署netcore网站，并使用Docker nginx 作为正向代理；\n\n<!-- more -->\n\n创建测试项目后，修改网站监听端口，具体设置方式请查阅另一篇博文《Ubuntu部署Asp.net core网站无法访问》\n\n上传publish文件到Linux，创建文件Dockerfile，编辑内容为：\n\n```bash\nFROM mcr.microsoft.com/dotnet/core/aspnet //从该镜像拉取\nWORKDIR /app  //工作目录\nCOPY . .  \nEXPOSE 80 //容器对外开放端口\nCMD [\"dotnet\", \"website.dll\"] //执行命令\n```\n\n把网站打包成镜像\n\n```bash\ndocker build -t website .\n```\n\n创建并运行容器\n\n```bash\ndocker run --name website -p 8080:80 -d website\n```\n\n至此，网站已成功发布。使用ip:port即可访问网站。\n\n接下来使用docker拉取nginx\n\n```bash\ndocker pull nginx\n```\n\n在创建nginx容器前先创建好挂载目录\n\n```bash\ncd var\nmkdir nginx\ncd nginx\nmkdir www conf logs\n```\n\n进入conf文件夹，创建并编辑nginx.conf配置文件\n\n```bash\ncd conf\nvim nginx.conf\n```\n\nnginx.conf文件内容\n\n```bash\nuser nginx;\n# 运行用户，默认是nginx\nworker_processes auto;\n# nginx进程数,一般设置为和cpu核数一样\nerror_log /var/log/nginx/error.log;\n# 全局错误日志路径\npid /run/nginx.pid;\n# 进程pid路径\n# Load dynamic modules. See /usr/share/nginx/README.dynamic.\n# 负载动态模块\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n# 工作模式与连接数上限\n    worker_connections 1024;\n   # 单个进程的最大连接数\n}\n\nhttp {\n# 设置http服务器\n    log_format  main  '$http_host $server_addr $remote_addr [$time_local] \"$request\" $status  $request_body  $body_bytes_sent \"$http_referer\" \"$http_user_agent\" $request_time $upstream_response_time';\n    # 设置日志的格式\n\n    access_log  /var/log/nginx/access.log  main;\n    # 访问日志的路径\n\n    sendfile            on;\n    # 开启高效传输模式\n    tcp_nopush          on;\n    # 激活tcp_nopush参数可以允许把http response header和文件的开始放在一个文件里发布，作用是减少网络报文段的数量\n    tcp_nodelay         on;\n    # 激活tcp_nodelay，内核会等待将更多的字节组成一个数据包，从而提高I/O性能\n    keepalive_timeout   65;\n    # 长连接超时时间，单位是秒\n    types_hash_max_size 2048;\n    # 为了快速处理静态数据集，例如服务器名称， 映射指令的值，MIME类型，请求头字符串的名称，nginx使用哈希表\n\n    include             /etc/nginx/mime.types;\n    # 文件扩展名与类型映射表\n    default_type        application/octet-stream;\n    # 默认文件类型\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # 加载模块化配置文件\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n    # 基于域名的虚拟主机\n        listen       80 default_server;\n        # 监听端口\n        listen       [::]:80 default_server;\n        server_name  _;\n        # 域名\n        #root         /usr/share/nginx/html;\n        # 站点根目录，即网站程序存放目录\n\n        # Load configuration files for the default server block.\n        # 默认服务器块的加载配置文件\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n            proxy_pass http://ip:8080;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n}\n\n```\n\n创建并运行容器\n\n```bash\ndocker run -d -p 80:80 --name blog -v $PWD/www:/usr/share/nginx/html -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/var/log/nginx nginx\n```\n\nNginx部署完成，此刻直接输入ip可直接访问网站。\n\n","source":"_posts/Ubuntu部署netcore网站.md","raw":"---\ntitle: Ubuntu部署netcore网站\nid: F044DDBABEAB96FC3FE6FFED7C2544BB\ndate: 2020-03-15 16:13:30\ntags:\n- Ubuntu\n- .Netcore\ncategories: Technology\n---\n\nDocker部署netcore网站，并使用Docker nginx 作为正向代理；\n\n<!-- more -->\n\n创建测试项目后，修改网站监听端口，具体设置方式请查阅另一篇博文《Ubuntu部署Asp.net core网站无法访问》\n\n上传publish文件到Linux，创建文件Dockerfile，编辑内容为：\n\n```bash\nFROM mcr.microsoft.com/dotnet/core/aspnet //从该镜像拉取\nWORKDIR /app  //工作目录\nCOPY . .  \nEXPOSE 80 //容器对外开放端口\nCMD [\"dotnet\", \"website.dll\"] //执行命令\n```\n\n把网站打包成镜像\n\n```bash\ndocker build -t website .\n```\n\n创建并运行容器\n\n```bash\ndocker run --name website -p 8080:80 -d website\n```\n\n至此，网站已成功发布。使用ip:port即可访问网站。\n\n接下来使用docker拉取nginx\n\n```bash\ndocker pull nginx\n```\n\n在创建nginx容器前先创建好挂载目录\n\n```bash\ncd var\nmkdir nginx\ncd nginx\nmkdir www conf logs\n```\n\n进入conf文件夹，创建并编辑nginx.conf配置文件\n\n```bash\ncd conf\nvim nginx.conf\n```\n\nnginx.conf文件内容\n\n```bash\nuser nginx;\n# 运行用户，默认是nginx\nworker_processes auto;\n# nginx进程数,一般设置为和cpu核数一样\nerror_log /var/log/nginx/error.log;\n# 全局错误日志路径\npid /run/nginx.pid;\n# 进程pid路径\n# Load dynamic modules. See /usr/share/nginx/README.dynamic.\n# 负载动态模块\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n# 工作模式与连接数上限\n    worker_connections 1024;\n   # 单个进程的最大连接数\n}\n\nhttp {\n# 设置http服务器\n    log_format  main  '$http_host $server_addr $remote_addr [$time_local] \"$request\" $status  $request_body  $body_bytes_sent \"$http_referer\" \"$http_user_agent\" $request_time $upstream_response_time';\n    # 设置日志的格式\n\n    access_log  /var/log/nginx/access.log  main;\n    # 访问日志的路径\n\n    sendfile            on;\n    # 开启高效传输模式\n    tcp_nopush          on;\n    # 激活tcp_nopush参数可以允许把http response header和文件的开始放在一个文件里发布，作用是减少网络报文段的数量\n    tcp_nodelay         on;\n    # 激活tcp_nodelay，内核会等待将更多的字节组成一个数据包，从而提高I/O性能\n    keepalive_timeout   65;\n    # 长连接超时时间，单位是秒\n    types_hash_max_size 2048;\n    # 为了快速处理静态数据集，例如服务器名称， 映射指令的值，MIME类型，请求头字符串的名称，nginx使用哈希表\n\n    include             /etc/nginx/mime.types;\n    # 文件扩展名与类型映射表\n    default_type        application/octet-stream;\n    # 默认文件类型\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # 加载模块化配置文件\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n    # 基于域名的虚拟主机\n        listen       80 default_server;\n        # 监听端口\n        listen       [::]:80 default_server;\n        server_name  _;\n        # 域名\n        #root         /usr/share/nginx/html;\n        # 站点根目录，即网站程序存放目录\n\n        # Load configuration files for the default server block.\n        # 默认服务器块的加载配置文件\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n            proxy_pass http://ip:8080;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n}\n\n```\n\n创建并运行容器\n\n```bash\ndocker run -d -p 80:80 --name blog -v $PWD/www:/usr/share/nginx/html -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/var/log/nginx nginx\n```\n\nNginx部署完成，此刻直接输入ip可直接访问网站。\n\n","slug":"Ubuntu部署netcore网站","published":1,"updated":"2023-07-18T02:37:09.741Z","_id":"clk237kfe000k44615i0hekp2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Docker部署netcore网站，并使用Docker nginx 作为正向代理；</p>\n<span id=\"more\"></span>\n\n<p>创建测试项目后，修改网站监听端口，具体设置方式请查阅另一篇博文《Ubuntu部署Asp.net core网站无法访问》</p>\n<p>上传publish文件到Linux，创建文件Dockerfile，编辑内容为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/aspnet //从该镜像拉取</span><br><span class=\"line\">WORKDIR /app  //工作目录</span><br><span class=\"line\">COPY . .  </span><br><span class=\"line\">EXPOSE 80 //容器对外开放端口</span><br><span class=\"line\">CMD [<span class=\"string\">&quot;dotnet&quot;</span>, <span class=\"string\">&quot;website.dll&quot;</span>] //执行命令</span><br></pre></td></tr></table></figure>\n\n<p>把网站打包成镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t website .</span><br></pre></td></tr></table></figure>\n\n<p>创建并运行容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name website -p 8080:80 -d website</span><br></pre></td></tr></table></figure>\n\n<p>至此，网站已成功发布。使用ip:port即可访问网站。</p>\n<p>接下来使用docker拉取nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<p>在创建nginx容器前先创建好挂载目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> var</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> nginx</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> www conf logs</span><br></pre></td></tr></table></figure>\n\n<p>进入conf文件夹，创建并编辑nginx.conf配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> conf</span><br><span class=\"line\">vim nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>nginx.conf文件内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx;</span><br><span class=\"line\"><span class=\"comment\"># 运行用户，默认是nginx</span></span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\"><span class=\"comment\"># nginx进程数,一般设置为和cpu核数一样</span></span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\"><span class=\"comment\"># 全局错误日志路径</span></span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"><span class=\"comment\"># 进程pid路径</span></span><br><span class=\"line\"><span class=\"comment\"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class=\"line\"><span class=\"comment\"># 负载动态模块</span></span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\"><span class=\"comment\"># 工作模式与连接数上限</span></span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">   <span class=\"comment\"># 单个进程的最大连接数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\"><span class=\"comment\"># 设置http服务器</span></span><br><span class=\"line\">    log_format  main  <span class=\"string\">&#x27;$http_host $server_addr $remote_addr [$time_local] &quot;$request&quot; $status  $request_body  $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; $request_time $upstream_response_time&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 设置日志的格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    <span class=\"comment\"># 访问日志的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    <span class=\"comment\"># 开启高效传输模式</span></span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    <span class=\"comment\"># 激活tcp_nopush参数可以允许把http response header和文件的开始放在一个文件里发布，作用是减少网络报文段的数量</span></span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    <span class=\"comment\"># 激活tcp_nodelay，内核会等待将更多的字节组成一个数据包，从而提高I/O性能</span></span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    <span class=\"comment\"># 长连接超时时间，单位是秒</span></span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\">    <span class=\"comment\"># 为了快速处理静态数据集，例如服务器名称， 映射指令的值，MIME类型，请求头字符串的名称，nginx使用哈希表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    <span class=\"comment\"># 文件扩展名与类型映射表</span></span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\">    <span class=\"comment\"># 默认文件类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class=\"line\">    <span class=\"comment\"># 加载模块化配置文件</span></span><br><span class=\"line\">    <span class=\"comment\"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class=\"line\">    <span class=\"comment\"># for more information.</span></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 基于域名的虚拟主机</span></span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        <span class=\"comment\"># 域名</span></span><br><span class=\"line\">        <span class=\"comment\">#root         /usr/share/nginx/html;</span></span><br><span class=\"line\">        <span class=\"comment\"># 站点根目录，即网站程序存放目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"comment\"># 默认服务器块的加载配置文件</span></span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://ip:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>创建并运行容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 80:80 --name blog -v <span class=\"variable\">$PWD</span>/www:/usr/share/nginx/html -v <span class=\"variable\">$PWD</span>/conf/nginx.conf:/etc/nginx/nginx.conf -v <span class=\"variable\">$PWD</span>/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure>\n\n<p>Nginx部署完成，此刻直接输入ip可直接访问网站。</p>\n","site":{"data":{}},"excerpt":"<p>Docker部署netcore网站，并使用Docker nginx 作为正向代理；</p>","more":"<p>创建测试项目后，修改网站监听端口，具体设置方式请查阅另一篇博文《Ubuntu部署Asp.net core网站无法访问》</p>\n<p>上传publish文件到Linux，创建文件Dockerfile，编辑内容为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/aspnet //从该镜像拉取</span><br><span class=\"line\">WORKDIR /app  //工作目录</span><br><span class=\"line\">COPY . .  </span><br><span class=\"line\">EXPOSE 80 //容器对外开放端口</span><br><span class=\"line\">CMD [<span class=\"string\">&quot;dotnet&quot;</span>, <span class=\"string\">&quot;website.dll&quot;</span>] //执行命令</span><br></pre></td></tr></table></figure>\n\n<p>把网站打包成镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t website .</span><br></pre></td></tr></table></figure>\n\n<p>创建并运行容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name website -p 8080:80 -d website</span><br></pre></td></tr></table></figure>\n\n<p>至此，网站已成功发布。使用ip:port即可访问网站。</p>\n<p>接下来使用docker拉取nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<p>在创建nginx容器前先创建好挂载目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> var</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> nginx</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> www conf logs</span><br></pre></td></tr></table></figure>\n\n<p>进入conf文件夹，创建并编辑nginx.conf配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> conf</span><br><span class=\"line\">vim nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>nginx.conf文件内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx;</span><br><span class=\"line\"><span class=\"comment\"># 运行用户，默认是nginx</span></span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\"><span class=\"comment\"># nginx进程数,一般设置为和cpu核数一样</span></span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\"><span class=\"comment\"># 全局错误日志路径</span></span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"><span class=\"comment\"># 进程pid路径</span></span><br><span class=\"line\"><span class=\"comment\"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class=\"line\"><span class=\"comment\"># 负载动态模块</span></span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\"><span class=\"comment\"># 工作模式与连接数上限</span></span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">   <span class=\"comment\"># 单个进程的最大连接数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\"><span class=\"comment\"># 设置http服务器</span></span><br><span class=\"line\">    log_format  main  <span class=\"string\">&#x27;$http_host $server_addr $remote_addr [$time_local] &quot;$request&quot; $status  $request_body  $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; $request_time $upstream_response_time&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 设置日志的格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    <span class=\"comment\"># 访问日志的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    <span class=\"comment\"># 开启高效传输模式</span></span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    <span class=\"comment\"># 激活tcp_nopush参数可以允许把http response header和文件的开始放在一个文件里发布，作用是减少网络报文段的数量</span></span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    <span class=\"comment\"># 激活tcp_nodelay，内核会等待将更多的字节组成一个数据包，从而提高I/O性能</span></span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    <span class=\"comment\"># 长连接超时时间，单位是秒</span></span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\">    <span class=\"comment\"># 为了快速处理静态数据集，例如服务器名称， 映射指令的值，MIME类型，请求头字符串的名称，nginx使用哈希表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    <span class=\"comment\"># 文件扩展名与类型映射表</span></span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\">    <span class=\"comment\"># 默认文件类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class=\"line\">    <span class=\"comment\"># 加载模块化配置文件</span></span><br><span class=\"line\">    <span class=\"comment\"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class=\"line\">    <span class=\"comment\"># for more information.</span></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 基于域名的虚拟主机</span></span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        <span class=\"comment\"># 域名</span></span><br><span class=\"line\">        <span class=\"comment\">#root         /usr/share/nginx/html;</span></span><br><span class=\"line\">        <span class=\"comment\"># 站点根目录，即网站程序存放目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"comment\"># 默认服务器块的加载配置文件</span></span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://ip:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>创建并运行容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 80:80 --name blog -v <span class=\"variable\">$PWD</span>/www:/usr/share/nginx/html -v <span class=\"variable\">$PWD</span>/conf/nginx.conf:/etc/nginx/nginx.conf -v <span class=\"variable\">$PWD</span>/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure>\n\n<p>Nginx部署完成，此刻直接输入ip可直接访问网站。</p>"},{"title":"Ubuntu部署netcore网站无法访问","id":"8081EB1E811675876C731BAF7B422099","date":"2020-03-15T08:13:30.000Z","_content":"\n记录一次发布.netcore网站到linux上的问题\n\n<!-- more -->\n\n前几天应工作需要，在阿里云上部署一个测试站点。本以为分分钟的事情，没想到打脸了。\n\n当时直接新建一个webapi项目，publish后直接上传到阿里云，随后设置nginx转发网站端口5000。\n\n接着打开网站测试访问，结果傻眼了，502.....。\n\n于是乎，使用dotnet命令行启动，指定端口8080，更改nginx配置转而监听8080。测试，又打不开。\n\n明明是按照众大神的文章一步一步来的，怎么会出错呢？搞不明白。随后老老实实阅读微软官方文档，\n\n终于发现问题所在。原来是我没有设置Kestrel的监听端口。\n\n论基础的重要性！！！要好好读书o(╥﹏╥)o，夯实基本功。\n\n经历说完了，接下来说说如何配置网站端口。\n\n设置的方式有三种：\n\n**第一种：Program类的CreateHostBuilder方法指定Urls**\n\n```c#\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseUrls(\"http://*:8080\");\n                    webBuilder.UseStartup<Startup>();\n                });\n```\n\n**第二种：使用配置文件Hosting.json**\n\n```json\n{\n  \"urls\": \"http://*:8080\"\n}\n```\n\n项目需要添加引用\n\n```C#\n\"Microsoft.Extensions.Configuration.FileExtensions\": \"1.0.0\",\n\"Microsoft.Extensions.Configuration.Json\": \"1.0.0\"\n```\n\nProgram代码\n\n```C#\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                }).ConfigureHostConfiguration(configHost => { \n                    configHost.SetBasePath(Directory.GetCurrentDirectory());\n                    configHost.AddJsonFile(\"hosting.json\", optional: true, reloadOnChange : true);\n                });\n```\n\n**第三种：使用命令行配置**\n\n```bash\ndotnet demo.dll --environment development --urls \"http://*:8081\"\n```\n\n项目需要添加引用\n\n```C#\n\"Microsoft.Extensions.Configuration.CommandLine\": \"3.1.2\"\n```\n\nProgram代码\n\n```C#\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                }).ConfigureHostConfiguration(configHost => { \n                    configHost.AddCommandLine(args);\n                });\n```\n\n注：三种方式可同时配置，但是具有优先级：UseUrls < 文件配置 < 命令行配置\n\n","source":"_posts/Ubuntu部署netcore网站无法访问.md","raw":"---\ntitle: Ubuntu部署netcore网站无法访问\nid: 8081EB1E811675876C731BAF7B422099\ndate: 2020-03-15 16:13:30\ntags:\n- Ubuntu\n- .Netcore\ncategories: Technology\n---\n\n记录一次发布.netcore网站到linux上的问题\n\n<!-- more -->\n\n前几天应工作需要，在阿里云上部署一个测试站点。本以为分分钟的事情，没想到打脸了。\n\n当时直接新建一个webapi项目，publish后直接上传到阿里云，随后设置nginx转发网站端口5000。\n\n接着打开网站测试访问，结果傻眼了，502.....。\n\n于是乎，使用dotnet命令行启动，指定端口8080，更改nginx配置转而监听8080。测试，又打不开。\n\n明明是按照众大神的文章一步一步来的，怎么会出错呢？搞不明白。随后老老实实阅读微软官方文档，\n\n终于发现问题所在。原来是我没有设置Kestrel的监听端口。\n\n论基础的重要性！！！要好好读书o(╥﹏╥)o，夯实基本功。\n\n经历说完了，接下来说说如何配置网站端口。\n\n设置的方式有三种：\n\n**第一种：Program类的CreateHostBuilder方法指定Urls**\n\n```c#\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseUrls(\"http://*:8080\");\n                    webBuilder.UseStartup<Startup>();\n                });\n```\n\n**第二种：使用配置文件Hosting.json**\n\n```json\n{\n  \"urls\": \"http://*:8080\"\n}\n```\n\n项目需要添加引用\n\n```C#\n\"Microsoft.Extensions.Configuration.FileExtensions\": \"1.0.0\",\n\"Microsoft.Extensions.Configuration.Json\": \"1.0.0\"\n```\n\nProgram代码\n\n```C#\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                }).ConfigureHostConfiguration(configHost => { \n                    configHost.SetBasePath(Directory.GetCurrentDirectory());\n                    configHost.AddJsonFile(\"hosting.json\", optional: true, reloadOnChange : true);\n                });\n```\n\n**第三种：使用命令行配置**\n\n```bash\ndotnet demo.dll --environment development --urls \"http://*:8081\"\n```\n\n项目需要添加引用\n\n```C#\n\"Microsoft.Extensions.Configuration.CommandLine\": \"3.1.2\"\n```\n\nProgram代码\n\n```C#\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                }).ConfigureHostConfiguration(configHost => { \n                    configHost.AddCommandLine(args);\n                });\n```\n\n注：三种方式可同时配置，但是具有优先级：UseUrls < 文件配置 < 命令行配置\n\n","slug":"Ubuntu部署netcore网站无法访问","published":1,"updated":"2023-07-18T02:37:09.743Z","_id":"clk237kfg000o4461hbrf6wc1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>记录一次发布.netcore网站到linux上的问题</p>\n<span id=\"more\"></span>\n\n<p>前几天应工作需要，在阿里云上部署一个测试站点。本以为分分钟的事情，没想到打脸了。</p>\n<p>当时直接新建一个webapi项目，publish后直接上传到阿里云，随后设置nginx转发网站端口5000。</p>\n<p>接着打开网站测试访问，结果傻眼了，502…..。</p>\n<p>于是乎，使用dotnet命令行启动，指定端口8080，更改nginx配置转而监听8080。测试，又打不开。</p>\n<p>明明是按照众大神的文章一步一步来的，怎么会出错呢？搞不明白。随后老老实实阅读微软官方文档，</p>\n<p>终于发现问题所在。原来是我没有设置Kestrel的监听端口。</p>\n<p>论基础的重要性！！！要好好读书o(╥﹏╥)o，夯实基本功。</p>\n<p>经历说完了，接下来说说如何配置网站端口。</p>\n<p>设置的方式有三种：</p>\n<p><strong>第一种：Program类的CreateHostBuilder方法指定Urls</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">            Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    webBuilder.UseUrls(<span class=\"string\">&quot;http://*:8080&quot;</span>);</span><br><span class=\"line\">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>第二种：使用配置文件Hosting.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;urls&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://*:8080&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>项目需要添加引用</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Microsoft.Extensions.Configuration.FileExtensions&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;Microsoft.Extensions.Configuration.Json&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Program代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">            Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">                &#125;).ConfigureHostConfiguration(configHost =&gt; &#123; </span><br><span class=\"line\">                    configHost.SetBasePath(Directory.GetCurrentDirectory());</span><br><span class=\"line\">                    configHost.AddJsonFile(<span class=\"string\">&quot;hosting.json&quot;</span>, optional: <span class=\"literal\">true</span>, reloadOnChange : <span class=\"literal\">true</span>);</span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>第三种：使用命令行配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet demo.dll --environment development --urls <span class=\"string\">&quot;http://*:8081&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>项目需要添加引用</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Microsoft.Extensions.Configuration.CommandLine&quot;</span>: <span class=\"string\">&quot;3.1.2&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Program代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">            Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">                &#125;).ConfigureHostConfiguration(configHost =&gt; &#123; </span><br><span class=\"line\">                    configHost.AddCommandLine(args);</span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>注：三种方式可同时配置，但是具有优先级：UseUrls &lt; 文件配置 &lt; 命令行配置</p>\n","site":{"data":{}},"excerpt":"<p>记录一次发布.netcore网站到linux上的问题</p>","more":"<p>前几天应工作需要，在阿里云上部署一个测试站点。本以为分分钟的事情，没想到打脸了。</p>\n<p>当时直接新建一个webapi项目，publish后直接上传到阿里云，随后设置nginx转发网站端口5000。</p>\n<p>接着打开网站测试访问，结果傻眼了，502…..。</p>\n<p>于是乎，使用dotnet命令行启动，指定端口8080，更改nginx配置转而监听8080。测试，又打不开。</p>\n<p>明明是按照众大神的文章一步一步来的，怎么会出错呢？搞不明白。随后老老实实阅读微软官方文档，</p>\n<p>终于发现问题所在。原来是我没有设置Kestrel的监听端口。</p>\n<p>论基础的重要性！！！要好好读书o(╥﹏╥)o，夯实基本功。</p>\n<p>经历说完了，接下来说说如何配置网站端口。</p>\n<p>设置的方式有三种：</p>\n<p><strong>第一种：Program类的CreateHostBuilder方法指定Urls</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">            Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    webBuilder.UseUrls(<span class=\"string\">&quot;http://*:8080&quot;</span>);</span><br><span class=\"line\">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>第二种：使用配置文件Hosting.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;urls&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://*:8080&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>项目需要添加引用</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Microsoft.Extensions.Configuration.FileExtensions&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;Microsoft.Extensions.Configuration.Json&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Program代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">            Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">                &#125;).ConfigureHostConfiguration(configHost =&gt; &#123; </span><br><span class=\"line\">                    configHost.SetBasePath(Directory.GetCurrentDirectory());</span><br><span class=\"line\">                    configHost.AddJsonFile(<span class=\"string\">&quot;hosting.json&quot;</span>, optional: <span class=\"literal\">true</span>, reloadOnChange : <span class=\"literal\">true</span>);</span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>第三种：使用命令行配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet demo.dll --environment development --urls <span class=\"string\">&quot;http://*:8081&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>项目需要添加引用</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Microsoft.Extensions.Configuration.CommandLine&quot;</span>: <span class=\"string\">&quot;3.1.2&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Program代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">            Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">                &#125;).ConfigureHostConfiguration(configHost =&gt; &#123; </span><br><span class=\"line\">                    configHost.AddCommandLine(args);</span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>注：三种方式可同时配置，但是具有优先级：UseUrls &lt; 文件配置 &lt; 命令行配置</p>"},{"title":"Webbench的使用","id":"E78756E315C538EE0A848E9B01C67DED","date":"2018-09-03T00:54:00.000Z","_content":"\n  Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。  \n\n  下载好tar.gz文件，上传到linux。  \n\n<!-- more -->\n\n* 编译安装\n``` \nroot@ip:/home/ftp/webbench-1.5# make install\ncc -Wall -ggdb -W -O  -o webbench webbench.o  \ninstall -s webbench /usr/local/bin    \ninstall -m 644 webbench.1 /usr/local/man/man1    \ninstall -d /usr/local/share/doc/webbench\ninstall -m 644 debian/copyright /usr/local/share/doc/webbench\ninstall -m 644 debian/changelog /usr/local/share/doc/webbench\n```\n* 使用\n```\nroot@ip:/home/ftp/webbench-1.5# webbench -c 100 http://fedupapi.azurewebsites.net/\nWebbench - Simple Web Benchmark 1.5\nCopyright (c) Radim Kolar 1997-2004, GPL Open Source Software.\n\nBenchmarking: GET http://fedupapi.azurewebsites.net/\n100 clients, running 30 sec.\n\nSpeed=10854 pages/min, 76339 bytes/sec.\nRequests: 5427 susceed, 0 failed.\n```\n\n如果执行 make install 出错\n```\nxx@xx:~/WebBench$ make install\ncc -Wall -ggdb -W -O   -c -o webbench.o webbench.c\nwebbench.c: In function ‘alarm_handler’:\nwebbench.c:80:31: warning: unused parameter ‘signal’ [-Wunused-parameter]\nstatic void alarm_handler(int signal)\n```\n\n解决方案(WebBench 依赖 ctags)\n```\nsudo apt-get install ctags \n```\n","source":"_posts/Webbench的使用.md","raw":"---\ntitle: Webbench的使用\nid: E78756E315C538EE0A848E9B01C67DED\ndate: 2018-09-03 08:54:00\ntags: Test\ncategories: Tool\n---\n\n  Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。  \n\n  下载好tar.gz文件，上传到linux。  \n\n<!-- more -->\n\n* 编译安装\n``` \nroot@ip:/home/ftp/webbench-1.5# make install\ncc -Wall -ggdb -W -O  -o webbench webbench.o  \ninstall -s webbench /usr/local/bin    \ninstall -m 644 webbench.1 /usr/local/man/man1    \ninstall -d /usr/local/share/doc/webbench\ninstall -m 644 debian/copyright /usr/local/share/doc/webbench\ninstall -m 644 debian/changelog /usr/local/share/doc/webbench\n```\n* 使用\n```\nroot@ip:/home/ftp/webbench-1.5# webbench -c 100 http://fedupapi.azurewebsites.net/\nWebbench - Simple Web Benchmark 1.5\nCopyright (c) Radim Kolar 1997-2004, GPL Open Source Software.\n\nBenchmarking: GET http://fedupapi.azurewebsites.net/\n100 clients, running 30 sec.\n\nSpeed=10854 pages/min, 76339 bytes/sec.\nRequests: 5427 susceed, 0 failed.\n```\n\n如果执行 make install 出错\n```\nxx@xx:~/WebBench$ make install\ncc -Wall -ggdb -W -O   -c -o webbench.o webbench.c\nwebbench.c: In function ‘alarm_handler’:\nwebbench.c:80:31: warning: unused parameter ‘signal’ [-Wunused-parameter]\nstatic void alarm_handler(int signal)\n```\n\n解决方案(WebBench 依赖 ctags)\n```\nsudo apt-get install ctags \n```\n","slug":"Webbench的使用","published":1,"updated":"2023-07-18T02:37:09.743Z","_id":"clk237kfh000q4461c7qh3gxr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>  Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。  </p>\n<p>  下载好tar.gz文件，上传到linux。  </p>\n<span id=\"more\"></span>\n\n<ul>\n<li>编译安装<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ip:<span class=\"regexp\">/home/</span>ftp/webbench-<span class=\"number\">1.5</span><span class=\"comment\"># make install</span></span><br><span class=\"line\">cc -Wall -ggdb -W -O  -o webbench webbench.o  </span><br><span class=\"line\">install -s webbench <span class=\"regexp\">/usr/</span>local/bin    </span><br><span class=\"line\">install -m <span class=\"number\">644</span> webbench.<span class=\"number\">1</span> <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/man/m</span>an1    </span><br><span class=\"line\">install -d <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/share/</span>doc/webbench</span><br><span class=\"line\">install -m <span class=\"number\">644</span> debian<span class=\"regexp\">/copyright /u</span>sr<span class=\"regexp\">/local/</span>share<span class=\"regexp\">/doc/</span>webbench</span><br><span class=\"line\">install -m <span class=\"number\">644</span> debian<span class=\"regexp\">/changelog /u</span>sr<span class=\"regexp\">/local/</span>share<span class=\"regexp\">/doc/</span>webbench</span><br></pre></td></tr></table></figure></li>\n<li>使用<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">root</span>@ip:/home/ftp/webbench-<span class=\"number\">1</span>.<span class=\"number\">5</span># webbench -c <span class=\"number\">100</span> http://fedupapi.azurewebsites.net/</span><br><span class=\"line\"><span class=\"attribute\">Webbench</span> - Simple Web Benchmark <span class=\"number\">1</span>.<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attribute\">Copyright</span> (c) Radim Kolar <span class=\"number\">1997</span>-<span class=\"number\">2004</span>, GPL Open Source Software.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Benchmarking</span>: GET http://fedupapi.azurewebsites.net/</span><br><span class=\"line\"><span class=\"attribute\">100</span> clients, running <span class=\"number\">30</span> sec.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Speed</span>=<span class=\"number\">10854</span> pages/min, <span class=\"number\">76339</span> bytes/sec.</span><br><span class=\"line\"><span class=\"attribute\">Requests</span>: <span class=\"number\">5427</span> susceed, <span class=\"number\">0</span> failed.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>如果执行 make install 出错</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xx<span class=\"title\">@xx</span>:~/WebBench$ make install</span><br><span class=\"line\"><span class=\"keyword\">cc</span> -Wall -ggdb -W -O   -<span class=\"keyword\">c</span> -o webbench.o webbench.<span class=\"keyword\">c</span></span><br><span class=\"line\">webbench.<span class=\"keyword\">c</span>: In function ‘alarm_handler’:</span><br><span class=\"line\">webbench.<span class=\"keyword\">c</span>:<span class=\"number\">80</span>:<span class=\"number\">31</span>: warning: unused parameter ‘signal’ [-Wunused-parameter]</span><br><span class=\"line\">static void alarm_handler(int signal)</span><br></pre></td></tr></table></figure>\n\n<p>解决方案(WebBench 依赖 ctags)</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ctags </span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>  Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。  </p>\n<p>  下载好tar.gz文件，上传到linux。  </p>","more":"<ul>\n<li>编译安装<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ip:<span class=\"regexp\">/home/</span>ftp/webbench-<span class=\"number\">1.5</span><span class=\"comment\"># make install</span></span><br><span class=\"line\">cc -Wall -ggdb -W -O  -o webbench webbench.o  </span><br><span class=\"line\">install -s webbench <span class=\"regexp\">/usr/</span>local/bin    </span><br><span class=\"line\">install -m <span class=\"number\">644</span> webbench.<span class=\"number\">1</span> <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/man/m</span>an1    </span><br><span class=\"line\">install -d <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/share/</span>doc/webbench</span><br><span class=\"line\">install -m <span class=\"number\">644</span> debian<span class=\"regexp\">/copyright /u</span>sr<span class=\"regexp\">/local/</span>share<span class=\"regexp\">/doc/</span>webbench</span><br><span class=\"line\">install -m <span class=\"number\">644</span> debian<span class=\"regexp\">/changelog /u</span>sr<span class=\"regexp\">/local/</span>share<span class=\"regexp\">/doc/</span>webbench</span><br></pre></td></tr></table></figure></li>\n<li>使用<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">root</span>@ip:/home/ftp/webbench-<span class=\"number\">1</span>.<span class=\"number\">5</span># webbench -c <span class=\"number\">100</span> http://fedupapi.azurewebsites.net/</span><br><span class=\"line\"><span class=\"attribute\">Webbench</span> - Simple Web Benchmark <span class=\"number\">1</span>.<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attribute\">Copyright</span> (c) Radim Kolar <span class=\"number\">1997</span>-<span class=\"number\">2004</span>, GPL Open Source Software.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Benchmarking</span>: GET http://fedupapi.azurewebsites.net/</span><br><span class=\"line\"><span class=\"attribute\">100</span> clients, running <span class=\"number\">30</span> sec.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Speed</span>=<span class=\"number\">10854</span> pages/min, <span class=\"number\">76339</span> bytes/sec.</span><br><span class=\"line\"><span class=\"attribute\">Requests</span>: <span class=\"number\">5427</span> susceed, <span class=\"number\">0</span> failed.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>如果执行 make install 出错</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xx<span class=\"title\">@xx</span>:~/WebBench$ make install</span><br><span class=\"line\"><span class=\"keyword\">cc</span> -Wall -ggdb -W -O   -<span class=\"keyword\">c</span> -o webbench.o webbench.<span class=\"keyword\">c</span></span><br><span class=\"line\">webbench.<span class=\"keyword\">c</span>: In function ‘alarm_handler’:</span><br><span class=\"line\">webbench.<span class=\"keyword\">c</span>:<span class=\"number\">80</span>:<span class=\"number\">31</span>: warning: unused parameter ‘signal’ [-Wunused-parameter]</span><br><span class=\"line\">static void alarm_handler(int signal)</span><br></pre></td></tr></table></figure>\n\n<p>解决方案(WebBench 依赖 ctags)</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ctags </span><br></pre></td></tr></table></figure>"},{"title":"Zabbix部署和简单使用","id":"0E89CB3527AD643BC4A75D445DE9F1D2","date":"2020-04-11T12:20:00.000Z","_content":"\n**Zabbix部署和简单使用**\n\n  使用Docker容器部署Zabbix，并添加Windows和Linux服务器监测节点。\n\n<!-- more -->\n\n##  Zabbix是什么\n\nZabbix是一种网络监视、管理系统，基于Server-Client架构。可用于监视各种网络服务、服务器和网络机器等状态。\n\n可以监控如下资源\n\n![](https://s1.ax1x.com/2020/04/11/GbhL4J.png)\n\n## 为什么要监控？\n\n1. 在需要的时刻，提前提醒我们服务器出问题了\n2. 当出问题之后，可以找到问题根源\n3. 实时观测网站/服务器的可用性\n\n## 工作模式\n\n分为主动模式和被动模式\n\n1. 主动模式：客户端主动把自己监测到的数据上报给服务端，服务端不需要向客户端发起请求\n\n![](https://s1.ax1x.com/2020/04/11/Gbh7HU.png)\n\n2. 被动模式：服务端向客户端发起请求，告诉客户端我需要哪些数据，然后客户端执行相关操作，把执行结果返回给服务端\n\n   ![](https://s1.ax1x.com/2020/04/11/GbhTBT.png)\n\n\n\n## 自动发现与自动注册\n\n1. 自动发现：zabbix主动发现所有客户端，扫描设定的IP段。缺点是压力大，时间长\n\n2. 自动注册：zabbix agent主动到zabbix Server上报到，登记；缺点agent有可能找不到Server（配置出错）\n\n   自动注册配置：\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLdZn.png)\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLNrj.png)\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLtMQ.png)\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLUqs.png)\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLwaq.png)\n\n## 使用Docker安装Zabbix服务端\n\n安装必须组件 mysql5.7、zabbix-server-mysql和zabbix-web-nginx-mysql\n\n```\n# 启动mysql5.7实例\ndocker run --name mysql-server -t -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime  -v /data/mysql5.7/data:/var/lib/mysql -v /data/mysql/etc:/etc/mysql/conf.d   -e MYSQL_DATABASE=\"zabbix\"       -e MYSQL_USER=\"zabbix\"       -e MYSQL_PASSWORD=\"zabbix\"       -e MYSQL_ROOT_PASSWORD=\"zabbix\"       -d mysql:5.7  --character-set-server=utf8 --collation-server=utf8_bin\n\n# 启动Zabbix server实例，并关联这个实例到已创建的MySQL服务器实例\ndocker run --name zabbix-server-mysql -t  -e PHP_TZ=\"Asia/Shanghai\" -v /etc/timezone:/etc/timezone  -v /etc/localtime:/etc/localtime   -e DB_SERVER_HOST=\"mysql-server\"       -e MYSQL_DATABASE=\"zabbix\"       -e MYSQL_USER=\"zabbix\"       -e MYSQL_PASSWORD=\"zabbix\"       -e MYSQL_ROOT_PASSWORD=\"zabbix\"       --link mysql-server:mysql       -p 10051:10051       -d zabbix/zabbix-server-mysql:latest\n\n# 启动Zabbix web 接口，并将它与MySQL服务器实例和Zabbix server实例关联\ndocker run --name zabbix-web-nginx-mysql -t -e PHP_TZ=\"Asia/Shanghai\" -v /etc/timezone:/etc/timezone  -v /etc/localtime:/etc/localtime     -e DB_SERVER_HOST=\"mysql-server\"       -e MYSQL_DATABASE=\"zabbix\"       -e MYSQL_USER=\"zabbix\"       -e MYSQL_PASSWORD=\"zabbix\"       -e MYSQL_ROOT_PASSWORD=\"zabbix\"       --link mysql-server:mysql       --link zabbix-server-mysql:zabbix-server       -p 80:80       -d zabbix/zabbix-web-nginx-mysql:latest\n```\n\n修改每个容器时区\n\n```\ndocker cp /usr/share/zoneinfo/Asia/Shanghai containerId:/etc/localtime\n```\n\n解决中文乱码问题\n\n```\n#找到字体所位置\nfind -name DejaVuSans.ttf\n拷贝Windows下的C:\\Windows\\Fonts 宋体字体 到docker里\n随后备份DejaVuSans.ttf字体，并更名宋体为DejaVuSans.ttf，刷新页面可看到效果\n```\n\n## 添加服务器\n\n**添加一台Windows服务器**\n\n客户端操作：\n\n[下载Zabbix Agent客户端](https://www.zabbix.com/cn/download_agents)，并安装到被监测的主机上\n\nServer和ServerActive均设置为监控服务器的IP\n\n若Zabbix服务器在内网，被监控对象在外网，则需要拿到监控服务端的外网IP。\n\n如何获取外网IP？\n\n先在zabbix服务器使用telnet命令连客户端的10050端口，然后在客户端使用netstat -an | grep 10050查看被那个IP访问了。\n\nWeb操作：\n\n1. 进入页面：【配置】->【主机】->【创建主机】\n\n   ![](https://s1.ax1x.com/2020/04/11/GbTKQs.png)\n\n2. 必填主机名、群组选择Templates/Operating systems，agent代理程序的ip地址填被监控主机ip，端口不变为10050。\n\n   ![](https://s1.ax1x.com/2020/04/11/GbTmWQ.png)\n\n3. 选择Tab【模板】，选中Template OS Windows By zabbix agent\n\n   ![](https://s1.ax1x.com/2020/04/11/GbTnzj.png)\n\n4. 点击底部添加按钮，回到主机列表页\n\n   ![](https://s1.ax1x.com/2020/04/11/GbTeJg.png)\n\n**添加一台Linux服务器**\n\n客户端操作：\n\n```\n#关闭SELinux (如果有)\nsed -i \"s/SELINUX=enforcing/SELINUX=disabled/\" /etc/selinux/config\nsetenforce 0\n#防火墙设置，允许zabbix-agent的10050端口通过\nfirewall-cmd --permanent --add-port=10050/tcp\nfirewall-cmd --reload\n#下载安装包并安装(Centos)\nrpm -Uvh https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm\nyum install zabbix-agent\n#下载安装包并安装(Ubuntu)\nwget http://repo.zabbix.com/zabbix/4.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_4.4-1+bionic_all.deb\ndpkg -i zabbix-release_4.4-1+bionic_all.deb\napt update\napt install zabbix-agent\n#安装完以后找到配置文件\nfind -name 'zabbix*'\n#修改内容：\nServer=<zbx-server的ip>\nServerActive=<zbx-server的ip>\nHostname=<本机名字>\n#启动agent\nsystemctl start zabbix-agent.service\nsystemctl status zabbix-agent.service\n```\n\nWeb操作同添加Windows\n\n## 添加MYSQL\n\n客户端操作：\n\n```\n#创建一个mysql用户\nGRANT ALL ON . TO 'zbx_monitor'@'%' IDENTIFIED BY 'zbx_monitor';\nFLUSH PRIVILEGES;\n#在zabbix_agentd服务目录下创建my.cnf\n目前我使用的是windows系统，zabbix_agentd安装在C盘，故而在C盘顶层创建，内容为：\n[client]\nuser=zbx_monitor\npassword=zbx_monitor\n\n#Zabbix_agentd目录下的zabbix_agentd.conf.d增加一个配置文件,内容为：\n\n#template_db_mysql.conf created by Zabbix for \"Template DB MySQL\" and Zabbix 4.2\n#For OS Linux: You need create .my.cnf in zabbix-agent home directory (/etc/zabbix by default)\n#For OS Windows: You need add PATH to mysql and mysqladmin and create my.cnf in %WINDIR%\\my.cnf,C:\\my.cnf,BASEDIR\\my.cnf https://dev.mysql.com/doc/refman/5.7/en/option-files.html\n#The file must have three strings:\n#[client]\n#user=zbx_monitor\n#password=<password>\nUserParameter=mysql.ping[*], mysqladmi\nUserParameter=mysql.get_status_variables[*], mysql -h\"$1\" -P\"$2\" -sNX -e \"show global status\"\nUserParameter=mysql.version[*], mysqladmin -s -h\"$1\" -P\"$2\" version\nUserParameter=mysql.db.discovery[*], mysql -h\"$1\" -P\"$2\" -sN -e \"show databases\"\nUserParameter=mysql.dbsize[*], mysql -h\"$1\" -P\"$2\" -sN -e \"SELECT SUM(DATA_LENGTH + INDEX_LENGTH) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='$3'\"\nUserParameter=mysql.replication.discovery[*], mysql -h\"$1\" -P\"$2\" -sNX -e \"show slave status\"\nUserParameter=mysql.slave_status[*], mysql -h\"$1\" -P\"$2\" -sNX -e \"show slave status\"\n\n修改zabbix_agentd.conf,添加内容：\nInclude=C:\\Program Files\\Zabbix Agent\\zabbix_agentd.conf.d\\*.conf\n\n重启zabbix_agent服务\n\n#到zabbix_mysql_server 监控主机测试mysql命令\nzabbix_get -s ip -p 10050 -k mysql.ping\n```\n\nWeb操作：\n\n选择MYSQL所在主机\n\n![](https://s1.ax1x.com/2020/04/11/GbbalQ.png)\n\n![](https://s1.ax1x.com/2020/04/11/Gbbdyj.png)\n\n## 添加网站\n\n![](https://s1.ax1x.com/2020/04/11/GbqBge.png)\n\n![](https://s1.ax1x.com/2020/04/11/GbqDjH.png)\n\n![](https://s1.ax1x.com/2020/04/11/Gbqsud.png)","source":"_posts/Zabbix部署及简单使用.md","raw":"---\ntitle: Zabbix部署和简单使用\nid: 0E89CB3527AD643BC4A75D445DE9F1D2\ndate: 2020-04-11 20:20:00\ntags: O&M\ncategories: Tool\n---\n\n**Zabbix部署和简单使用**\n\n  使用Docker容器部署Zabbix，并添加Windows和Linux服务器监测节点。\n\n<!-- more -->\n\n##  Zabbix是什么\n\nZabbix是一种网络监视、管理系统，基于Server-Client架构。可用于监视各种网络服务、服务器和网络机器等状态。\n\n可以监控如下资源\n\n![](https://s1.ax1x.com/2020/04/11/GbhL4J.png)\n\n## 为什么要监控？\n\n1. 在需要的时刻，提前提醒我们服务器出问题了\n2. 当出问题之后，可以找到问题根源\n3. 实时观测网站/服务器的可用性\n\n## 工作模式\n\n分为主动模式和被动模式\n\n1. 主动模式：客户端主动把自己监测到的数据上报给服务端，服务端不需要向客户端发起请求\n\n![](https://s1.ax1x.com/2020/04/11/Gbh7HU.png)\n\n2. 被动模式：服务端向客户端发起请求，告诉客户端我需要哪些数据，然后客户端执行相关操作，把执行结果返回给服务端\n\n   ![](https://s1.ax1x.com/2020/04/11/GbhTBT.png)\n\n\n\n## 自动发现与自动注册\n\n1. 自动发现：zabbix主动发现所有客户端，扫描设定的IP段。缺点是压力大，时间长\n\n2. 自动注册：zabbix agent主动到zabbix Server上报到，登记；缺点agent有可能找不到Server（配置出错）\n\n   自动注册配置：\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLdZn.png)\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLNrj.png)\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLtMQ.png)\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLUqs.png)\n\n   ![](https://s1.ax1x.com/2020/04/11/GbLwaq.png)\n\n## 使用Docker安装Zabbix服务端\n\n安装必须组件 mysql5.7、zabbix-server-mysql和zabbix-web-nginx-mysql\n\n```\n# 启动mysql5.7实例\ndocker run --name mysql-server -t -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime  -v /data/mysql5.7/data:/var/lib/mysql -v /data/mysql/etc:/etc/mysql/conf.d   -e MYSQL_DATABASE=\"zabbix\"       -e MYSQL_USER=\"zabbix\"       -e MYSQL_PASSWORD=\"zabbix\"       -e MYSQL_ROOT_PASSWORD=\"zabbix\"       -d mysql:5.7  --character-set-server=utf8 --collation-server=utf8_bin\n\n# 启动Zabbix server实例，并关联这个实例到已创建的MySQL服务器实例\ndocker run --name zabbix-server-mysql -t  -e PHP_TZ=\"Asia/Shanghai\" -v /etc/timezone:/etc/timezone  -v /etc/localtime:/etc/localtime   -e DB_SERVER_HOST=\"mysql-server\"       -e MYSQL_DATABASE=\"zabbix\"       -e MYSQL_USER=\"zabbix\"       -e MYSQL_PASSWORD=\"zabbix\"       -e MYSQL_ROOT_PASSWORD=\"zabbix\"       --link mysql-server:mysql       -p 10051:10051       -d zabbix/zabbix-server-mysql:latest\n\n# 启动Zabbix web 接口，并将它与MySQL服务器实例和Zabbix server实例关联\ndocker run --name zabbix-web-nginx-mysql -t -e PHP_TZ=\"Asia/Shanghai\" -v /etc/timezone:/etc/timezone  -v /etc/localtime:/etc/localtime     -e DB_SERVER_HOST=\"mysql-server\"       -e MYSQL_DATABASE=\"zabbix\"       -e MYSQL_USER=\"zabbix\"       -e MYSQL_PASSWORD=\"zabbix\"       -e MYSQL_ROOT_PASSWORD=\"zabbix\"       --link mysql-server:mysql       --link zabbix-server-mysql:zabbix-server       -p 80:80       -d zabbix/zabbix-web-nginx-mysql:latest\n```\n\n修改每个容器时区\n\n```\ndocker cp /usr/share/zoneinfo/Asia/Shanghai containerId:/etc/localtime\n```\n\n解决中文乱码问题\n\n```\n#找到字体所位置\nfind -name DejaVuSans.ttf\n拷贝Windows下的C:\\Windows\\Fonts 宋体字体 到docker里\n随后备份DejaVuSans.ttf字体，并更名宋体为DejaVuSans.ttf，刷新页面可看到效果\n```\n\n## 添加服务器\n\n**添加一台Windows服务器**\n\n客户端操作：\n\n[下载Zabbix Agent客户端](https://www.zabbix.com/cn/download_agents)，并安装到被监测的主机上\n\nServer和ServerActive均设置为监控服务器的IP\n\n若Zabbix服务器在内网，被监控对象在外网，则需要拿到监控服务端的外网IP。\n\n如何获取外网IP？\n\n先在zabbix服务器使用telnet命令连客户端的10050端口，然后在客户端使用netstat -an | grep 10050查看被那个IP访问了。\n\nWeb操作：\n\n1. 进入页面：【配置】->【主机】->【创建主机】\n\n   ![](https://s1.ax1x.com/2020/04/11/GbTKQs.png)\n\n2. 必填主机名、群组选择Templates/Operating systems，agent代理程序的ip地址填被监控主机ip，端口不变为10050。\n\n   ![](https://s1.ax1x.com/2020/04/11/GbTmWQ.png)\n\n3. 选择Tab【模板】，选中Template OS Windows By zabbix agent\n\n   ![](https://s1.ax1x.com/2020/04/11/GbTnzj.png)\n\n4. 点击底部添加按钮，回到主机列表页\n\n   ![](https://s1.ax1x.com/2020/04/11/GbTeJg.png)\n\n**添加一台Linux服务器**\n\n客户端操作：\n\n```\n#关闭SELinux (如果有)\nsed -i \"s/SELINUX=enforcing/SELINUX=disabled/\" /etc/selinux/config\nsetenforce 0\n#防火墙设置，允许zabbix-agent的10050端口通过\nfirewall-cmd --permanent --add-port=10050/tcp\nfirewall-cmd --reload\n#下载安装包并安装(Centos)\nrpm -Uvh https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm\nyum install zabbix-agent\n#下载安装包并安装(Ubuntu)\nwget http://repo.zabbix.com/zabbix/4.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_4.4-1+bionic_all.deb\ndpkg -i zabbix-release_4.4-1+bionic_all.deb\napt update\napt install zabbix-agent\n#安装完以后找到配置文件\nfind -name 'zabbix*'\n#修改内容：\nServer=<zbx-server的ip>\nServerActive=<zbx-server的ip>\nHostname=<本机名字>\n#启动agent\nsystemctl start zabbix-agent.service\nsystemctl status zabbix-agent.service\n```\n\nWeb操作同添加Windows\n\n## 添加MYSQL\n\n客户端操作：\n\n```\n#创建一个mysql用户\nGRANT ALL ON . TO 'zbx_monitor'@'%' IDENTIFIED BY 'zbx_monitor';\nFLUSH PRIVILEGES;\n#在zabbix_agentd服务目录下创建my.cnf\n目前我使用的是windows系统，zabbix_agentd安装在C盘，故而在C盘顶层创建，内容为：\n[client]\nuser=zbx_monitor\npassword=zbx_monitor\n\n#Zabbix_agentd目录下的zabbix_agentd.conf.d增加一个配置文件,内容为：\n\n#template_db_mysql.conf created by Zabbix for \"Template DB MySQL\" and Zabbix 4.2\n#For OS Linux: You need create .my.cnf in zabbix-agent home directory (/etc/zabbix by default)\n#For OS Windows: You need add PATH to mysql and mysqladmin and create my.cnf in %WINDIR%\\my.cnf,C:\\my.cnf,BASEDIR\\my.cnf https://dev.mysql.com/doc/refman/5.7/en/option-files.html\n#The file must have three strings:\n#[client]\n#user=zbx_monitor\n#password=<password>\nUserParameter=mysql.ping[*], mysqladmi\nUserParameter=mysql.get_status_variables[*], mysql -h\"$1\" -P\"$2\" -sNX -e \"show global status\"\nUserParameter=mysql.version[*], mysqladmin -s -h\"$1\" -P\"$2\" version\nUserParameter=mysql.db.discovery[*], mysql -h\"$1\" -P\"$2\" -sN -e \"show databases\"\nUserParameter=mysql.dbsize[*], mysql -h\"$1\" -P\"$2\" -sN -e \"SELECT SUM(DATA_LENGTH + INDEX_LENGTH) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='$3'\"\nUserParameter=mysql.replication.discovery[*], mysql -h\"$1\" -P\"$2\" -sNX -e \"show slave status\"\nUserParameter=mysql.slave_status[*], mysql -h\"$1\" -P\"$2\" -sNX -e \"show slave status\"\n\n修改zabbix_agentd.conf,添加内容：\nInclude=C:\\Program Files\\Zabbix Agent\\zabbix_agentd.conf.d\\*.conf\n\n重启zabbix_agent服务\n\n#到zabbix_mysql_server 监控主机测试mysql命令\nzabbix_get -s ip -p 10050 -k mysql.ping\n```\n\nWeb操作：\n\n选择MYSQL所在主机\n\n![](https://s1.ax1x.com/2020/04/11/GbbalQ.png)\n\n![](https://s1.ax1x.com/2020/04/11/Gbbdyj.png)\n\n## 添加网站\n\n![](https://s1.ax1x.com/2020/04/11/GbqBge.png)\n\n![](https://s1.ax1x.com/2020/04/11/GbqDjH.png)\n\n![](https://s1.ax1x.com/2020/04/11/Gbqsud.png)","slug":"Zabbix部署及简单使用","published":1,"updated":"2023-07-18T02:37:09.743Z","_id":"clk237kfj000u44613km54psg","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Zabbix部署和简单使用</strong></p>\n<p>  使用Docker容器部署Zabbix，并添加Windows和Linux服务器监测节点。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Zabbix是什么\"><a href=\"#Zabbix是什么\" class=\"headerlink\" title=\"Zabbix是什么\"></a>Zabbix是什么</h2><p>Zabbix是一种网络监视、管理系统，基于Server-Client架构。可用于监视各种网络服务、服务器和网络机器等状态。</p>\n<p>可以监控如下资源</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbhL4J.png\"></p>\n<h2 id=\"为什么要监控？\"><a href=\"#为什么要监控？\" class=\"headerlink\" title=\"为什么要监控？\"></a>为什么要监控？</h2><ol>\n<li>在需要的时刻，提前提醒我们服务器出问题了</li>\n<li>当出问题之后，可以找到问题根源</li>\n<li>实时观测网站&#x2F;服务器的可用性</li>\n</ol>\n<h2 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h2><p>分为主动模式和被动模式</p>\n<ol>\n<li>主动模式：客户端主动把自己监测到的数据上报给服务端，服务端不需要向客户端发起请求</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/Gbh7HU.png\"></p>\n<ol start=\"2\">\n<li><p>被动模式：服务端向客户端发起请求，告诉客户端我需要哪些数据，然后客户端执行相关操作，把执行结果返回给服务端</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbhTBT.png\"></p>\n</li>\n</ol>\n<h2 id=\"自动发现与自动注册\"><a href=\"#自动发现与自动注册\" class=\"headerlink\" title=\"自动发现与自动注册\"></a>自动发现与自动注册</h2><ol>\n<li><p>自动发现：zabbix主动发现所有客户端，扫描设定的IP段。缺点是压力大，时间长</p>\n</li>\n<li><p>自动注册：zabbix agent主动到zabbix Server上报到，登记；缺点agent有可能找不到Server（配置出错）</p>\n<p>自动注册配置：</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLdZn.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLNrj.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLtMQ.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLUqs.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLwaq.png\"></p>\n</li>\n</ol>\n<h2 id=\"使用Docker安装Zabbix服务端\"><a href=\"#使用Docker安装Zabbix服务端\" class=\"headerlink\" title=\"使用Docker安装Zabbix服务端\"></a>使用Docker安装Zabbix服务端</h2><p>安装必须组件 mysql5.7、zabbix-server-mysql和zabbix-web-nginx-mysql</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动mysql5.7实例</span></span><br><span class=\"line\">docker run --name mysql-server -t -v <span class=\"regexp\">/etc/</span>timezone:<span class=\"regexp\">/etc/</span>timezone -v <span class=\"regexp\">/etc/</span>localtime:<span class=\"regexp\">/etc/</span>localtime  -v <span class=\"regexp\">/data/my</span>sql5.<span class=\"number\">7</span><span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/my</span>sql -v <span class=\"regexp\">/data/my</span>sql<span class=\"regexp\">/etc:/</span>etc<span class=\"regexp\">/mysql/</span>conf.d   -e MYSQL_DATABASE=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_USER=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_ROOT_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       -d mysql:<span class=\"number\">5.7</span>  --character-set-server=utf8 --collation-server=utf8_bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Zabbix server实例，并关联这个实例到已创建的MySQL服务器实例</span></span><br><span class=\"line\">docker run --name zabbix-server-mysql -t  -e PHP_TZ=<span class=\"string\">&quot;Asia/Shanghai&quot;</span> -v <span class=\"regexp\">/etc/</span>timezone:<span class=\"regexp\">/etc/</span>timezone  -v <span class=\"regexp\">/etc/</span>localtime:<span class=\"regexp\">/etc/</span>localtime   -e DB_SERVER_HOST=<span class=\"string\">&quot;mysql-server&quot;</span>       -e MYSQL_DATABASE=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_USER=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_ROOT_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       --link mysql-server:mysql       -p <span class=\"number\">10051</span>:<span class=\"number\">10051</span>       -d zabbix/zabbix-server-mysql:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Zabbix web 接口，并将它与MySQL服务器实例和Zabbix server实例关联</span></span><br><span class=\"line\">docker run --name zabbix-web-nginx-mysql -t -e PHP_TZ=<span class=\"string\">&quot;Asia/Shanghai&quot;</span> -v <span class=\"regexp\">/etc/</span>timezone:<span class=\"regexp\">/etc/</span>timezone  -v <span class=\"regexp\">/etc/</span>localtime:<span class=\"regexp\">/etc/</span>localtime     -e DB_SERVER_HOST=<span class=\"string\">&quot;mysql-server&quot;</span>       -e MYSQL_DATABASE=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_USER=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_ROOT_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       --link mysql-server:mysql       --link zabbix-server-mysql:zabbix-server       -p <span class=\"number\">80</span>:<span class=\"number\">80</span>       -d zabbix/zabbix-web-nginx-mysql:latest</span><br></pre></td></tr></table></figure>\n\n<p>修改每个容器时区</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/zoneinfo/</span>Asia<span class=\"regexp\">/Shanghai containerId:/</span>etc/localtime</span><br></pre></td></tr></table></figure>\n\n<p>解决中文乱码问题</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#找到字体所位置</span><br><span class=\"line\">find -name <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DejaVuSans</span>.</span></span>ttf</span><br><span class=\"line\">拷贝Windows下的C:\\Windows\\Fonts 宋体字体 到docker里</span><br><span class=\"line\">随后备份<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DejaVuSans</span>.</span></span>ttf字体，并更名宋体为<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DejaVuSans</span>.</span></span>ttf，刷新页面可看到效果</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加服务器\"><a href=\"#添加服务器\" class=\"headerlink\" title=\"添加服务器\"></a>添加服务器</h2><p><strong>添加一台Windows服务器</strong></p>\n<p>客户端操作：</p>\n<p><a href=\"https://www.zabbix.com/cn/download_agents\">下载Zabbix Agent客户端</a>，并安装到被监测的主机上</p>\n<p>Server和ServerActive均设置为监控服务器的IP</p>\n<p>若Zabbix服务器在内网，被监控对象在外网，则需要拿到监控服务端的外网IP。</p>\n<p>如何获取外网IP？</p>\n<p>先在zabbix服务器使用telnet命令连客户端的10050端口，然后在客户端使用netstat -an | grep 10050查看被那个IP访问了。</p>\n<p>Web操作：</p>\n<ol>\n<li><p>进入页面：【配置】-&gt;【主机】-&gt;【创建主机】</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbTKQs.png\"></p>\n</li>\n<li><p>必填主机名、群组选择Templates&#x2F;Operating systems，agent代理程序的ip地址填被监控主机ip，端口不变为10050。</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbTmWQ.png\"></p>\n</li>\n<li><p>选择Tab【模板】，选中Template OS Windows By zabbix agent</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbTnzj.png\"></p>\n</li>\n<li><p>点击底部添加按钮，回到主机列表页</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbTeJg.png\"></p>\n</li>\n</ol>\n<p><strong>添加一台Linux服务器</strong></p>\n<p>客户端操作：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#关闭SELinux (如果有)</span></span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s/SELINUX=enforcing/SELINUX=disabled/&quot;</span> <span class=\"regexp\">/etc/</span>selinux/config</span><br><span class=\"line\">setenforce <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">#防火墙设置，允许zabbix-agent的10050端口通过</span></span><br><span class=\"line\">firewall-cmd --permanent --add-port=<span class=\"number\">10050</span>/tcp</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"comment\">#下载安装包并安装(Centos)</span></span><br><span class=\"line\">rpm -Uvh https:<span class=\"regexp\">//</span>repo.zabbix.com<span class=\"regexp\">/zabbix/</span><span class=\"number\">4.4</span><span class=\"regexp\">/rhel/</span><span class=\"number\">7</span><span class=\"regexp\">/x86_64/</span>zabbix-release-<span class=\"number\">4.4</span>-<span class=\"number\">1</span>.el7.noarch.rpm</span><br><span class=\"line\">yum install zabbix-agent</span><br><span class=\"line\"><span class=\"comment\">#下载安装包并安装(Ubuntu)</span></span><br><span class=\"line\">wget http:<span class=\"regexp\">//</span>repo.zabbix.com<span class=\"regexp\">/zabbix/</span><span class=\"number\">4.4</span><span class=\"regexp\">/ubuntu/</span>pool<span class=\"regexp\">/main/</span>z<span class=\"regexp\">/zabbix-release/</span>zabbix-release_4.<span class=\"number\">4</span>-<span class=\"number\">1</span>+bionic_all.deb</span><br><span class=\"line\">dpkg -i zabbix-release_4.<span class=\"number\">4</span>-<span class=\"number\">1</span>+bionic_all.deb</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install zabbix-agent</span><br><span class=\"line\"><span class=\"comment\">#安装完以后找到配置文件</span></span><br><span class=\"line\">find -name <span class=\"string\">&#x27;zabbix*&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#修改内容：</span></span><br><span class=\"line\">Server=&lt;zbx-server的ip&gt;</span><br><span class=\"line\">ServerActive=&lt;zbx-server的ip&gt;</span><br><span class=\"line\">Hostname=&lt;本机名字&gt;</span><br><span class=\"line\"><span class=\"comment\">#启动agent</span></span><br><span class=\"line\">systemctl start zabbix-agent.service</span><br><span class=\"line\">systemctl status zabbix-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>Web操作同添加Windows</p>\n<h2 id=\"添加MYSQL\"><a href=\"#添加MYSQL\" class=\"headerlink\" title=\"添加MYSQL\"></a>添加MYSQL</h2><p>客户端操作：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个mysql用户</span></span><br><span class=\"line\">GRANT ALL ON . <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;zbx_monitor&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;zbx_monitor&#x27;</span>;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"><span class=\"comment\">#在zabbix_agentd服务目录下创建my.cnf</span></span><br><span class=\"line\">目前我使用的是windows系统，zabbix_agentd安装在C盘，故而在C盘顶层创建，内容为：</span><br><span class=\"line\">[client]</span><br><span class=\"line\"><span class=\"attribute\">user</span>=zbx_monitor</span><br><span class=\"line\"><span class=\"attribute\">password</span>=zbx_monitor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Zabbix_agentd目录下的zabbix_agentd.conf.d增加一个配置文件,内容为：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#template_db_mysql.conf created by Zabbix for &quot;Template DB MySQL&quot; and Zabbix 4.2</span></span><br><span class=\"line\"><span class=\"comment\">#For OS Linux: You need create .my.cnf in zabbix-agent home directory (/etc/zabbix by default)</span></span><br><span class=\"line\"><span class=\"comment\">#For OS Windows: You need add PATH to mysql and mysqladmin and create my.cnf in %WINDIR%\\my.cnf,C:\\my.cnf,BASEDIR\\my.cnf https://dev.mysql.com/doc/refman/5.7/en/option-files.html</span></span><br><span class=\"line\"><span class=\"comment\">#The file must have three strings:</span></span><br><span class=\"line\"><span class=\"comment\">#[client]</span></span><br><span class=\"line\"><span class=\"comment\">#user=zbx_monitor</span></span><br><span class=\"line\"><span class=\"comment\">#password=&lt;password&gt;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.ping[*], mysqladmi</span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.get_status_variables[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sNX -e <span class=\"string\">&quot;show global status&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.version[*], mysqladmin -s -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> version</span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.db.discovery[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sN -e <span class=\"string\">&quot;show databases&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.dbsize[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sN -e <span class=\"string\">&quot;SELECT SUM(DATA_LENGTH + INDEX_LENGTH) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=&#x27;<span class=\"variable\">$3</span>&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.replication.discovery[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sNX -e <span class=\"string\">&quot;show slave status&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.slave_status[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sNX -e <span class=\"string\">&quot;show slave status&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">修改zabbix_agentd.conf,添加内容：</span><br><span class=\"line\"><span class=\"attribute\">Include</span>=C:\\Program Files\\Zabbix Agent\\zabbix_agentd.conf.d\\*.conf</span><br><span class=\"line\"></span><br><span class=\"line\">重启zabbix_agent服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#到zabbix_mysql_server 监控主机测试mysql命令</span></span><br><span class=\"line\">zabbix_get -s<span class=\"built_in\"> ip </span>-p 10050 -k mysql.ping</span><br></pre></td></tr></table></figure>\n\n<p>Web操作：</p>\n<p>选择MYSQL所在主机</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbbalQ.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/Gbbdyj.png\"></p>\n<h2 id=\"添加网站\"><a href=\"#添加网站\" class=\"headerlink\" title=\"添加网站\"></a>添加网站</h2><p><img src=\"https://s1.ax1x.com/2020/04/11/GbqBge.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbqDjH.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/Gbqsud.png\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>Zabbix部署和简单使用</strong></p>\n<p>  使用Docker容器部署Zabbix，并添加Windows和Linux服务器监测节点。</p>","more":"<h2 id=\"Zabbix是什么\"><a href=\"#Zabbix是什么\" class=\"headerlink\" title=\"Zabbix是什么\"></a>Zabbix是什么</h2><p>Zabbix是一种网络监视、管理系统，基于Server-Client架构。可用于监视各种网络服务、服务器和网络机器等状态。</p>\n<p>可以监控如下资源</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbhL4J.png\"></p>\n<h2 id=\"为什么要监控？\"><a href=\"#为什么要监控？\" class=\"headerlink\" title=\"为什么要监控？\"></a>为什么要监控？</h2><ol>\n<li>在需要的时刻，提前提醒我们服务器出问题了</li>\n<li>当出问题之后，可以找到问题根源</li>\n<li>实时观测网站&#x2F;服务器的可用性</li>\n</ol>\n<h2 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h2><p>分为主动模式和被动模式</p>\n<ol>\n<li>主动模式：客户端主动把自己监测到的数据上报给服务端，服务端不需要向客户端发起请求</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/Gbh7HU.png\"></p>\n<ol start=\"2\">\n<li><p>被动模式：服务端向客户端发起请求，告诉客户端我需要哪些数据，然后客户端执行相关操作，把执行结果返回给服务端</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbhTBT.png\"></p>\n</li>\n</ol>\n<h2 id=\"自动发现与自动注册\"><a href=\"#自动发现与自动注册\" class=\"headerlink\" title=\"自动发现与自动注册\"></a>自动发现与自动注册</h2><ol>\n<li><p>自动发现：zabbix主动发现所有客户端，扫描设定的IP段。缺点是压力大，时间长</p>\n</li>\n<li><p>自动注册：zabbix agent主动到zabbix Server上报到，登记；缺点agent有可能找不到Server（配置出错）</p>\n<p>自动注册配置：</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLdZn.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLNrj.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLtMQ.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLUqs.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbLwaq.png\"></p>\n</li>\n</ol>\n<h2 id=\"使用Docker安装Zabbix服务端\"><a href=\"#使用Docker安装Zabbix服务端\" class=\"headerlink\" title=\"使用Docker安装Zabbix服务端\"></a>使用Docker安装Zabbix服务端</h2><p>安装必须组件 mysql5.7、zabbix-server-mysql和zabbix-web-nginx-mysql</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动mysql5.7实例</span></span><br><span class=\"line\">docker run --name mysql-server -t -v <span class=\"regexp\">/etc/</span>timezone:<span class=\"regexp\">/etc/</span>timezone -v <span class=\"regexp\">/etc/</span>localtime:<span class=\"regexp\">/etc/</span>localtime  -v <span class=\"regexp\">/data/my</span>sql5.<span class=\"number\">7</span><span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/my</span>sql -v <span class=\"regexp\">/data/my</span>sql<span class=\"regexp\">/etc:/</span>etc<span class=\"regexp\">/mysql/</span>conf.d   -e MYSQL_DATABASE=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_USER=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_ROOT_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       -d mysql:<span class=\"number\">5.7</span>  --character-set-server=utf8 --collation-server=utf8_bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Zabbix server实例，并关联这个实例到已创建的MySQL服务器实例</span></span><br><span class=\"line\">docker run --name zabbix-server-mysql -t  -e PHP_TZ=<span class=\"string\">&quot;Asia/Shanghai&quot;</span> -v <span class=\"regexp\">/etc/</span>timezone:<span class=\"regexp\">/etc/</span>timezone  -v <span class=\"regexp\">/etc/</span>localtime:<span class=\"regexp\">/etc/</span>localtime   -e DB_SERVER_HOST=<span class=\"string\">&quot;mysql-server&quot;</span>       -e MYSQL_DATABASE=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_USER=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_ROOT_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       --link mysql-server:mysql       -p <span class=\"number\">10051</span>:<span class=\"number\">10051</span>       -d zabbix/zabbix-server-mysql:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Zabbix web 接口，并将它与MySQL服务器实例和Zabbix server实例关联</span></span><br><span class=\"line\">docker run --name zabbix-web-nginx-mysql -t -e PHP_TZ=<span class=\"string\">&quot;Asia/Shanghai&quot;</span> -v <span class=\"regexp\">/etc/</span>timezone:<span class=\"regexp\">/etc/</span>timezone  -v <span class=\"regexp\">/etc/</span>localtime:<span class=\"regexp\">/etc/</span>localtime     -e DB_SERVER_HOST=<span class=\"string\">&quot;mysql-server&quot;</span>       -e MYSQL_DATABASE=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_USER=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       -e MYSQL_ROOT_PASSWORD=<span class=\"string\">&quot;zabbix&quot;</span>       --link mysql-server:mysql       --link zabbix-server-mysql:zabbix-server       -p <span class=\"number\">80</span>:<span class=\"number\">80</span>       -d zabbix/zabbix-web-nginx-mysql:latest</span><br></pre></td></tr></table></figure>\n\n<p>修改每个容器时区</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/zoneinfo/</span>Asia<span class=\"regexp\">/Shanghai containerId:/</span>etc/localtime</span><br></pre></td></tr></table></figure>\n\n<p>解决中文乱码问题</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#找到字体所位置</span><br><span class=\"line\">find -name <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DejaVuSans</span>.</span></span>ttf</span><br><span class=\"line\">拷贝Windows下的C:\\Windows\\Fonts 宋体字体 到docker里</span><br><span class=\"line\">随后备份<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DejaVuSans</span>.</span></span>ttf字体，并更名宋体为<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DejaVuSans</span>.</span></span>ttf，刷新页面可看到效果</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加服务器\"><a href=\"#添加服务器\" class=\"headerlink\" title=\"添加服务器\"></a>添加服务器</h2><p><strong>添加一台Windows服务器</strong></p>\n<p>客户端操作：</p>\n<p><a href=\"https://www.zabbix.com/cn/download_agents\">下载Zabbix Agent客户端</a>，并安装到被监测的主机上</p>\n<p>Server和ServerActive均设置为监控服务器的IP</p>\n<p>若Zabbix服务器在内网，被监控对象在外网，则需要拿到监控服务端的外网IP。</p>\n<p>如何获取外网IP？</p>\n<p>先在zabbix服务器使用telnet命令连客户端的10050端口，然后在客户端使用netstat -an | grep 10050查看被那个IP访问了。</p>\n<p>Web操作：</p>\n<ol>\n<li><p>进入页面：【配置】-&gt;【主机】-&gt;【创建主机】</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbTKQs.png\"></p>\n</li>\n<li><p>必填主机名、群组选择Templates&#x2F;Operating systems，agent代理程序的ip地址填被监控主机ip，端口不变为10050。</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbTmWQ.png\"></p>\n</li>\n<li><p>选择Tab【模板】，选中Template OS Windows By zabbix agent</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbTnzj.png\"></p>\n</li>\n<li><p>点击底部添加按钮，回到主机列表页</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbTeJg.png\"></p>\n</li>\n</ol>\n<p><strong>添加一台Linux服务器</strong></p>\n<p>客户端操作：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#关闭SELinux (如果有)</span></span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s/SELINUX=enforcing/SELINUX=disabled/&quot;</span> <span class=\"regexp\">/etc/</span>selinux/config</span><br><span class=\"line\">setenforce <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">#防火墙设置，允许zabbix-agent的10050端口通过</span></span><br><span class=\"line\">firewall-cmd --permanent --add-port=<span class=\"number\">10050</span>/tcp</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"comment\">#下载安装包并安装(Centos)</span></span><br><span class=\"line\">rpm -Uvh https:<span class=\"regexp\">//</span>repo.zabbix.com<span class=\"regexp\">/zabbix/</span><span class=\"number\">4.4</span><span class=\"regexp\">/rhel/</span><span class=\"number\">7</span><span class=\"regexp\">/x86_64/</span>zabbix-release-<span class=\"number\">4.4</span>-<span class=\"number\">1</span>.el7.noarch.rpm</span><br><span class=\"line\">yum install zabbix-agent</span><br><span class=\"line\"><span class=\"comment\">#下载安装包并安装(Ubuntu)</span></span><br><span class=\"line\">wget http:<span class=\"regexp\">//</span>repo.zabbix.com<span class=\"regexp\">/zabbix/</span><span class=\"number\">4.4</span><span class=\"regexp\">/ubuntu/</span>pool<span class=\"regexp\">/main/</span>z<span class=\"regexp\">/zabbix-release/</span>zabbix-release_4.<span class=\"number\">4</span>-<span class=\"number\">1</span>+bionic_all.deb</span><br><span class=\"line\">dpkg -i zabbix-release_4.<span class=\"number\">4</span>-<span class=\"number\">1</span>+bionic_all.deb</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install zabbix-agent</span><br><span class=\"line\"><span class=\"comment\">#安装完以后找到配置文件</span></span><br><span class=\"line\">find -name <span class=\"string\">&#x27;zabbix*&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#修改内容：</span></span><br><span class=\"line\">Server=&lt;zbx-server的ip&gt;</span><br><span class=\"line\">ServerActive=&lt;zbx-server的ip&gt;</span><br><span class=\"line\">Hostname=&lt;本机名字&gt;</span><br><span class=\"line\"><span class=\"comment\">#启动agent</span></span><br><span class=\"line\">systemctl start zabbix-agent.service</span><br><span class=\"line\">systemctl status zabbix-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>Web操作同添加Windows</p>\n<h2 id=\"添加MYSQL\"><a href=\"#添加MYSQL\" class=\"headerlink\" title=\"添加MYSQL\"></a>添加MYSQL</h2><p>客户端操作：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个mysql用户</span></span><br><span class=\"line\">GRANT ALL ON . <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;zbx_monitor&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;zbx_monitor&#x27;</span>;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"><span class=\"comment\">#在zabbix_agentd服务目录下创建my.cnf</span></span><br><span class=\"line\">目前我使用的是windows系统，zabbix_agentd安装在C盘，故而在C盘顶层创建，内容为：</span><br><span class=\"line\">[client]</span><br><span class=\"line\"><span class=\"attribute\">user</span>=zbx_monitor</span><br><span class=\"line\"><span class=\"attribute\">password</span>=zbx_monitor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Zabbix_agentd目录下的zabbix_agentd.conf.d增加一个配置文件,内容为：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#template_db_mysql.conf created by Zabbix for &quot;Template DB MySQL&quot; and Zabbix 4.2</span></span><br><span class=\"line\"><span class=\"comment\">#For OS Linux: You need create .my.cnf in zabbix-agent home directory (/etc/zabbix by default)</span></span><br><span class=\"line\"><span class=\"comment\">#For OS Windows: You need add PATH to mysql and mysqladmin and create my.cnf in %WINDIR%\\my.cnf,C:\\my.cnf,BASEDIR\\my.cnf https://dev.mysql.com/doc/refman/5.7/en/option-files.html</span></span><br><span class=\"line\"><span class=\"comment\">#The file must have three strings:</span></span><br><span class=\"line\"><span class=\"comment\">#[client]</span></span><br><span class=\"line\"><span class=\"comment\">#user=zbx_monitor</span></span><br><span class=\"line\"><span class=\"comment\">#password=&lt;password&gt;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.ping[*], mysqladmi</span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.get_status_variables[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sNX -e <span class=\"string\">&quot;show global status&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.version[*], mysqladmin -s -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> version</span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.db.discovery[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sN -e <span class=\"string\">&quot;show databases&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.dbsize[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sN -e <span class=\"string\">&quot;SELECT SUM(DATA_LENGTH + INDEX_LENGTH) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=&#x27;<span class=\"variable\">$3</span>&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.replication.discovery[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sNX -e <span class=\"string\">&quot;show slave status&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">UserParameter</span>=mysql.slave_status[*], mysql -h<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> -sNX -e <span class=\"string\">&quot;show slave status&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">修改zabbix_agentd.conf,添加内容：</span><br><span class=\"line\"><span class=\"attribute\">Include</span>=C:\\Program Files\\Zabbix Agent\\zabbix_agentd.conf.d\\*.conf</span><br><span class=\"line\"></span><br><span class=\"line\">重启zabbix_agent服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#到zabbix_mysql_server 监控主机测试mysql命令</span></span><br><span class=\"line\">zabbix_get -s<span class=\"built_in\"> ip </span>-p 10050 -k mysql.ping</span><br></pre></td></tr></table></figure>\n\n<p>Web操作：</p>\n<p>选择MYSQL所在主机</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbbalQ.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/Gbbdyj.png\"></p>\n<h2 id=\"添加网站\"><a href=\"#添加网站\" class=\"headerlink\" title=\"添加网站\"></a>添加网站</h2><p><img src=\"https://s1.ax1x.com/2020/04/11/GbqBge.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbqDjH.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/Gbqsud.png\"></p>"},{"title":"Redis工具类","id":"D073ECB6924A39E46720C56440498BDF","date":"2018-04-12T05:06:43.000Z","_content":"\nredis工具类\n\n<!-- more -->\n\n```\npublic class RedisConnector\n{\n    public class RedisParseResult<T>\n    {\n        public bool success;\n        public T value;\n    }\n\n    private static string ConnectionString { get; set; }\n    private static ConnectionMultiplexer RedisConnection { get; set; }\n\n    public RedisConnector(string redisConnectionString)\n    {\n        ConnectionString = redisConnectionString;\n        try\n        {\n            RedisConnection = ConnectionMultiplexer.Connect(ConnectionString);\n        }\n        catch (RedisConnectionException e)\n        {\n            AILogger.LogError(e.Message, $\"Redis server : {redisConnectionString}\").Wait();\n        }\n    }\n\n    public static void Initialize(string redisConnectionString)\n    {\n        ConnectionString = redisConnectionString;\n        try\n        {\n            RedisConnection = ConnectionMultiplexer.Connect(ConnectionString);\n        }\n        catch (RedisConnectionException e)\n        {\n            AILogger.LogError(e.Message, $\"Redis server : {redisConnectionString}\").Wait();\n        }\n    }\n\n    public static IDatabase RedisStore => (null != RedisConnection) ? RedisConnection.GetDatabase() : ConnectionMultiplexer.Connect(ConnectionString).GetDatabase();\n\n    public static ConnectionMultiplexer Redis => RedisConnection ?? ConnectionMultiplexer.Connect(ConnectionString);\n\n    public async static Task<bool> Store(string key, string value, int expiry = 120, bool replace = false) => await RedisStore.StringSetAsync(key, value, TimeSpan.FromSeconds(expiry), replace ? When.Always : When.NotExists);\n\n    public async static Task<bool> Store(string key, long value, int expiry = 120, bool replace = false) => await RedisStore.StringSetAsync(key, value.ToString(), TimeSpan.FromSeconds(expiry), replace ? When.Always : When.NotExists);\n\n    public async static Task<bool> Store<T>(string key, T value, int expiry = 120, bool replace = false) => await RedisStore.StringSetAsync(key, JsonConvert.SerializeObject(value), TimeSpan.FromSeconds(expiry), replace ? When.Always : When.NotExists);\n\n    public static string Get(string key) => RedisStore.StringGet(key);\n\n    public static RedisParseResult<T> Get<T>(string key)\n    {\n        var storedValue = RedisStore.StringGet(key);\n        if (string.IsNullOrEmpty(storedValue))\n            return new RedisParseResult<T> { success = false };\n        else\n            return new RedisParseResult<T> { success = true, value = JsonConvert.DeserializeObject<T>(storedValue) };\n    }\n}\n```","source":"_posts/redis工具类.md","raw":"---\ntitle: Redis工具类\nid: D073ECB6924A39E46720C56440498BDF\ndate: 2018-04-12 13:06:43\ntags: \n- Redis\n- C#\ncategories: Technology\n---\n\nredis工具类\n\n<!-- more -->\n\n```\npublic class RedisConnector\n{\n    public class RedisParseResult<T>\n    {\n        public bool success;\n        public T value;\n    }\n\n    private static string ConnectionString { get; set; }\n    private static ConnectionMultiplexer RedisConnection { get; set; }\n\n    public RedisConnector(string redisConnectionString)\n    {\n        ConnectionString = redisConnectionString;\n        try\n        {\n            RedisConnection = ConnectionMultiplexer.Connect(ConnectionString);\n        }\n        catch (RedisConnectionException e)\n        {\n            AILogger.LogError(e.Message, $\"Redis server : {redisConnectionString}\").Wait();\n        }\n    }\n\n    public static void Initialize(string redisConnectionString)\n    {\n        ConnectionString = redisConnectionString;\n        try\n        {\n            RedisConnection = ConnectionMultiplexer.Connect(ConnectionString);\n        }\n        catch (RedisConnectionException e)\n        {\n            AILogger.LogError(e.Message, $\"Redis server : {redisConnectionString}\").Wait();\n        }\n    }\n\n    public static IDatabase RedisStore => (null != RedisConnection) ? RedisConnection.GetDatabase() : ConnectionMultiplexer.Connect(ConnectionString).GetDatabase();\n\n    public static ConnectionMultiplexer Redis => RedisConnection ?? ConnectionMultiplexer.Connect(ConnectionString);\n\n    public async static Task<bool> Store(string key, string value, int expiry = 120, bool replace = false) => await RedisStore.StringSetAsync(key, value, TimeSpan.FromSeconds(expiry), replace ? When.Always : When.NotExists);\n\n    public async static Task<bool> Store(string key, long value, int expiry = 120, bool replace = false) => await RedisStore.StringSetAsync(key, value.ToString(), TimeSpan.FromSeconds(expiry), replace ? When.Always : When.NotExists);\n\n    public async static Task<bool> Store<T>(string key, T value, int expiry = 120, bool replace = false) => await RedisStore.StringSetAsync(key, JsonConvert.SerializeObject(value), TimeSpan.FromSeconds(expiry), replace ? When.Always : When.NotExists);\n\n    public static string Get(string key) => RedisStore.StringGet(key);\n\n    public static RedisParseResult<T> Get<T>(string key)\n    {\n        var storedValue = RedisStore.StringGet(key);\n        if (string.IsNullOrEmpty(storedValue))\n            return new RedisParseResult<T> { success = false };\n        else\n            return new RedisParseResult<T> { success = true, value = JsonConvert.DeserializeObject<T>(storedValue) };\n    }\n}\n```","slug":"redis工具类","published":1,"updated":"2023-07-18T02:37:09.743Z","_id":"clk237kfk000w4461ghbpgh4b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>redis工具类</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> RedisConnector</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">class</span> RedisParseResult&lt;T&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public <span class=\"built_in\">bool</span> success;</span><br><span class=\"line\">        public T value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> static <span class=\"built_in\">string</span> ConnectionString &#123; get; set; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> static ConnectionMultiplexer RedisConnection &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"constructor\">RedisConnector(<span class=\"params\">string</span> <span class=\"params\">redisConnectionString</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ConnectionString = redisConnectionString;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            RedisConnection = ConnectionMultiplexer.<span class=\"constructor\">Connect(ConnectionString)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (RedisConnectionException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AILogger.<span class=\"constructor\">LogError(<span class=\"params\">e</span>.Message, $<span class=\"string\">&quot;Redis server : &#123;redisConnectionString&#125;&quot;</span>)</span>.<span class=\"constructor\">Wait()</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void <span class=\"constructor\">Initialize(<span class=\"params\">string</span> <span class=\"params\">redisConnectionString</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ConnectionString = redisConnectionString;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            RedisConnection = ConnectionMultiplexer.<span class=\"constructor\">Connect(ConnectionString)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (RedisConnectionException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AILogger.<span class=\"constructor\">LogError(<span class=\"params\">e</span>.Message, $<span class=\"string\">&quot;Redis server : &#123;redisConnectionString&#125;&quot;</span>)</span>.<span class=\"constructor\">Wait()</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IDatabase RedisStore =&gt; (null != RedisConnection) ? RedisConnection.<span class=\"constructor\">GetDatabase()</span> : ConnectionMultiplexer.<span class=\"constructor\">Connect(ConnectionString)</span>.<span class=\"constructor\">GetDatabase()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static ConnectionMultiplexer Redis =&gt; RedisConnection ?? ConnectionMultiplexer.<span class=\"constructor\">Connect(ConnectionString)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    public async static Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"constructor\">Store(<span class=\"params\">string</span> <span class=\"params\">key</span>, <span class=\"params\">string</span> <span class=\"params\">value</span>, <span class=\"params\">int</span> <span class=\"params\">expiry</span> = 120, <span class=\"params\">bool</span> <span class=\"params\">replace</span> = <span class=\"params\">false</span>)</span> =&gt; await RedisStore.<span class=\"constructor\">StringSetAsync(<span class=\"params\">key</span>, <span class=\"params\">value</span>, TimeSpan.FromSeconds(<span class=\"params\">expiry</span>)</span>, replace ? When.Always : When.NotExists);</span><br><span class=\"line\"></span><br><span class=\"line\">    public async static Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"constructor\">Store(<span class=\"params\">string</span> <span class=\"params\">key</span>, <span class=\"params\">long</span> <span class=\"params\">value</span>, <span class=\"params\">int</span> <span class=\"params\">expiry</span> = 120, <span class=\"params\">bool</span> <span class=\"params\">replace</span> = <span class=\"params\">false</span>)</span> =&gt; await RedisStore.<span class=\"constructor\">StringSetAsync(<span class=\"params\">key</span>, <span class=\"params\">value</span>.ToString()</span>, TimeSpan.<span class=\"constructor\">FromSeconds(<span class=\"params\">expiry</span>)</span>, replace ? When.Always : When.NotExists);</span><br><span class=\"line\"></span><br><span class=\"line\">    public async static Task&lt;<span class=\"built_in\">bool</span>&gt; Store&lt;T&gt;(<span class=\"built_in\">string</span> key, T value, <span class=\"built_in\">int</span> expiry = <span class=\"number\">120</span>, <span class=\"built_in\">bool</span> replace = <span class=\"literal\">false</span>) =&gt; await RedisStore.<span class=\"constructor\">StringSetAsync(<span class=\"params\">key</span>, JsonConvert.SerializeObject(<span class=\"params\">value</span>)</span>, TimeSpan.<span class=\"constructor\">FromSeconds(<span class=\"params\">expiry</span>)</span>, replace ? When.Always : When.NotExists);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static <span class=\"built_in\">string</span> <span class=\"constructor\">Get(<span class=\"params\">string</span> <span class=\"params\">key</span>)</span> =&gt; RedisStore.<span class=\"constructor\">StringGet(<span class=\"params\">key</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static RedisParseResult&lt;T&gt; Get&lt;T&gt;(<span class=\"built_in\">string</span> key)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var storedValue = RedisStore.<span class=\"constructor\">StringGet(<span class=\"params\">key</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.<span class=\"constructor\">IsNullOrEmpty(<span class=\"params\">storedValue</span>)</span>)</span><br><span class=\"line\">            return <span class=\"keyword\">new</span> RedisParseResult&lt;T&gt; &#123; success = <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            return <span class=\"keyword\">new</span> RedisParseResult&lt;T&gt; &#123; success = <span class=\"literal\">true</span>, value = JsonConvert.DeserializeObject&lt;T&gt;(storedValue) &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>redis工具类</p>","more":"<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> RedisConnector</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">class</span> RedisParseResult&lt;T&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public <span class=\"built_in\">bool</span> success;</span><br><span class=\"line\">        public T value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> static <span class=\"built_in\">string</span> ConnectionString &#123; get; set; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> static ConnectionMultiplexer RedisConnection &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"constructor\">RedisConnector(<span class=\"params\">string</span> <span class=\"params\">redisConnectionString</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ConnectionString = redisConnectionString;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            RedisConnection = ConnectionMultiplexer.<span class=\"constructor\">Connect(ConnectionString)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (RedisConnectionException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AILogger.<span class=\"constructor\">LogError(<span class=\"params\">e</span>.Message, $<span class=\"string\">&quot;Redis server : &#123;redisConnectionString&#125;&quot;</span>)</span>.<span class=\"constructor\">Wait()</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void <span class=\"constructor\">Initialize(<span class=\"params\">string</span> <span class=\"params\">redisConnectionString</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ConnectionString = redisConnectionString;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            RedisConnection = ConnectionMultiplexer.<span class=\"constructor\">Connect(ConnectionString)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (RedisConnectionException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AILogger.<span class=\"constructor\">LogError(<span class=\"params\">e</span>.Message, $<span class=\"string\">&quot;Redis server : &#123;redisConnectionString&#125;&quot;</span>)</span>.<span class=\"constructor\">Wait()</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IDatabase RedisStore =&gt; (null != RedisConnection) ? RedisConnection.<span class=\"constructor\">GetDatabase()</span> : ConnectionMultiplexer.<span class=\"constructor\">Connect(ConnectionString)</span>.<span class=\"constructor\">GetDatabase()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static ConnectionMultiplexer Redis =&gt; RedisConnection ?? ConnectionMultiplexer.<span class=\"constructor\">Connect(ConnectionString)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    public async static Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"constructor\">Store(<span class=\"params\">string</span> <span class=\"params\">key</span>, <span class=\"params\">string</span> <span class=\"params\">value</span>, <span class=\"params\">int</span> <span class=\"params\">expiry</span> = 120, <span class=\"params\">bool</span> <span class=\"params\">replace</span> = <span class=\"params\">false</span>)</span> =&gt; await RedisStore.<span class=\"constructor\">StringSetAsync(<span class=\"params\">key</span>, <span class=\"params\">value</span>, TimeSpan.FromSeconds(<span class=\"params\">expiry</span>)</span>, replace ? When.Always : When.NotExists);</span><br><span class=\"line\"></span><br><span class=\"line\">    public async static Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"constructor\">Store(<span class=\"params\">string</span> <span class=\"params\">key</span>, <span class=\"params\">long</span> <span class=\"params\">value</span>, <span class=\"params\">int</span> <span class=\"params\">expiry</span> = 120, <span class=\"params\">bool</span> <span class=\"params\">replace</span> = <span class=\"params\">false</span>)</span> =&gt; await RedisStore.<span class=\"constructor\">StringSetAsync(<span class=\"params\">key</span>, <span class=\"params\">value</span>.ToString()</span>, TimeSpan.<span class=\"constructor\">FromSeconds(<span class=\"params\">expiry</span>)</span>, replace ? When.Always : When.NotExists);</span><br><span class=\"line\"></span><br><span class=\"line\">    public async static Task&lt;<span class=\"built_in\">bool</span>&gt; Store&lt;T&gt;(<span class=\"built_in\">string</span> key, T value, <span class=\"built_in\">int</span> expiry = <span class=\"number\">120</span>, <span class=\"built_in\">bool</span> replace = <span class=\"literal\">false</span>) =&gt; await RedisStore.<span class=\"constructor\">StringSetAsync(<span class=\"params\">key</span>, JsonConvert.SerializeObject(<span class=\"params\">value</span>)</span>, TimeSpan.<span class=\"constructor\">FromSeconds(<span class=\"params\">expiry</span>)</span>, replace ? When.Always : When.NotExists);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static <span class=\"built_in\">string</span> <span class=\"constructor\">Get(<span class=\"params\">string</span> <span class=\"params\">key</span>)</span> =&gt; RedisStore.<span class=\"constructor\">StringGet(<span class=\"params\">key</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static RedisParseResult&lt;T&gt; Get&lt;T&gt;(<span class=\"built_in\">string</span> key)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var storedValue = RedisStore.<span class=\"constructor\">StringGet(<span class=\"params\">key</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.<span class=\"constructor\">IsNullOrEmpty(<span class=\"params\">storedValue</span>)</span>)</span><br><span class=\"line\">            return <span class=\"keyword\">new</span> RedisParseResult&lt;T&gt; &#123; success = <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            return <span class=\"keyword\">new</span> RedisParseResult&lt;T&gt; &#123; success = <span class=\"literal\">true</span>, value = JsonConvert.DeserializeObject&lt;T&gt;(storedValue) &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"上传本地项目到GitHub","id":"15E13FD7EF708DF71248E9C39381AD7A","date":"2018-04-12T03:18:25.000Z","_content":"\n1. 生成ssh秘钥\n```\nssh-keygen -t rsa -C \"xxxx@xx.com\"\n```\n\n<!-- more -->\n\n2. 登录github，打开Account Settings ,选择 SSH Public Keys ，添加 ..\\.ssh\\id_rsa.pub 的内容\n\n3. 设置用户信息\n```\ngit config --global user.name \"fuquanli\"    //设置用户名\ngit config --global user.email \"fuquan.li@qq.com\"    //设置邮箱\n```\n\n4. 测试连接 \n```\nssh -T git@github.com\n```\n\n5. 建立本地仓库\n```\ncd d:text\ngit init\n```\n\n6. 将所有文件添加到仓库\n```\ngit add .\n```\n\n7. 提交指令\n```\ngit commit -m \"提交文件\"\n```\n\n8. 关联github仓库  \n  复制项目地址后执行  \n```\ngit remote add origin [项目地址]\n```\n\n9. 上传本地仓库代码\n```\ngit push -u origin master\n```","source":"_posts/上传本地项目到GitHub.md","raw":"---\ntitle: 上传本地项目到GitHub\nid: 15E13FD7EF708DF71248E9C39381AD7A\ndate: 2018-04-12 11:18:25\ntags: \n- Git\n- GitHub\ncategories: Tool\n---\n\n1. 生成ssh秘钥\n```\nssh-keygen -t rsa -C \"xxxx@xx.com\"\n```\n\n<!-- more -->\n\n2. 登录github，打开Account Settings ,选择 SSH Public Keys ，添加 ..\\.ssh\\id_rsa.pub 的内容\n\n3. 设置用户信息\n```\ngit config --global user.name \"fuquanli\"    //设置用户名\ngit config --global user.email \"fuquan.li@qq.com\"    //设置邮箱\n```\n\n4. 测试连接 \n```\nssh -T git@github.com\n```\n\n5. 建立本地仓库\n```\ncd d:text\ngit init\n```\n\n6. 将所有文件添加到仓库\n```\ngit add .\n```\n\n7. 提交指令\n```\ngit commit -m \"提交文件\"\n```\n\n8. 关联github仓库  \n  复制项目地址后执行  \n```\ngit remote add origin [项目地址]\n```\n\n9. 上传本地仓库代码\n```\ngit push -u origin master\n```","slug":"上传本地项目到GitHub","published":1,"updated":"2023-07-18T02:37:09.743Z","_id":"clk237kfl00104461hg1xdqwx","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>生成ssh秘钥<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -<span class=\"built_in\">t</span> rsa -C <span class=\"string\">&quot;xxxx@xx.com&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li><p>登录github，打开Account Settings ,选择 SSH Public Keys ，添加 ...ssh\\id_rsa.pub 的内容</p>\n</li>\n<li><p>设置用户信息</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"attr\">--global</span> user<span class=\"selector-class\">.name</span> <span class=\"string\">&quot;fuquanli&quot;</span>    <span class=\"comment\">//设置用户名</span></span><br><span class=\"line\">git config <span class=\"attr\">--global</span> user<span class=\"selector-class\">.email</span> <span class=\"string\">&quot;fuquan.li@qq.com&quot;</span>    <span class=\"comment\">//设置邮箱</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试连接 </p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ssh</span> -T git<span class=\"variable\">@github</span>.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立本地仓库</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd d:<span class=\"built_in\">text</span></span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将所有文件添加到仓库</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">add</span> .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交指令</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> commit -m <span class=\"string\">&quot;提交文件&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关联github仓库<br>  复制项目地址后执行  </p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"keyword\">add </span><span class=\"keyword\">origin </span>[项目地址]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传本地仓库代码</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>生成ssh秘钥<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -<span class=\"built_in\">t</span> rsa -C <span class=\"string\">&quot;xxxx@xx.com&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>","more":"<ol start=\"2\">\n<li><p>登录github，打开Account Settings ,选择 SSH Public Keys ，添加 ...ssh\\id_rsa.pub 的内容</p>\n</li>\n<li><p>设置用户信息</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"attr\">--global</span> user<span class=\"selector-class\">.name</span> <span class=\"string\">&quot;fuquanli&quot;</span>    <span class=\"comment\">//设置用户名</span></span><br><span class=\"line\">git config <span class=\"attr\">--global</span> user<span class=\"selector-class\">.email</span> <span class=\"string\">&quot;fuquan.li@qq.com&quot;</span>    <span class=\"comment\">//设置邮箱</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试连接 </p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ssh</span> -T git<span class=\"variable\">@github</span>.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立本地仓库</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd d:<span class=\"built_in\">text</span></span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将所有文件添加到仓库</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">add</span> .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交指令</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> commit -m <span class=\"string\">&quot;提交文件&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关联github仓库<br>  复制项目地址后执行  </p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"keyword\">add </span><span class=\"keyword\">origin </span>[项目地址]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传本地仓库代码</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"关于IoC和DI","id":"58FD57A2835616B143E317EA49A22A80","date":"2018-04-12T02:50:58.000Z","_content":"\n# IoC：Inversion of Control（控制反转）\n## 谁控制谁？\n     IoC容器控制对象的创建，也就是IoC容器控制对象\n## 控制了什么？\n     控制了外部资源的获取（如对象、文件等）\n## 正转和反转：\n     正转：如在传统应用程序里，我们主动去new对象\n     反转：容器创建对注入依赖对象\n## 为什么是反转？\n     因为是容器帮助我们查找并注入依赖对象\n\n<!-- more -->\n\n# DI：Dependency Injection（依赖注入）\n由容器动态地将某个依赖关系注入到组件之中\n\n依赖注入（Dependency Injection），是这样一个过程：由于某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。\n\n## 谁依赖谁？\n     应用程序依赖容器\n## 为什么需要依赖？\n     应用程序需要IoC容器来提供对象需要的外部资源\n## 谁注入谁？\n     IoC容器注入应用程序某个对象，应用程序依赖的对象\n## 注入了什么？\n     注入了某个对象所需要的外部资源（包括对象、资源、常量数据等）\n\n依赖注入明确描述了被注入对象依赖IoC容器配置依赖对象\n\n## 依赖注入三种方式\n     1.构造函数注入：在构造函数种借助参数将依赖的对象注入到创建的对象种\n     2.属性注入：通过添加Injection Attribute特性的方式将属性设置为自动注入属性\n     3.方法注入：通过调用方法实现对字段(对象)或属性(对象)的初始化\n\n\n## 依赖原则\n     1.高层次模块不应该依赖于低层次模块，它们都应该依赖抽象\n     2.抽象不应该依赖具体，具体应该依赖抽象\n\n\n[引用：依赖注入那些事](http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html)","source":"_posts/关于IoC和DI.md","raw":"---\ntitle: 关于IoC和DI\nid: 58FD57A2835616B143E317EA49A22A80\ndate: 2018-04-12 10:50:58\ntags: Design\ncategories: Technology\n---\n\n# IoC：Inversion of Control（控制反转）\n## 谁控制谁？\n     IoC容器控制对象的创建，也就是IoC容器控制对象\n## 控制了什么？\n     控制了外部资源的获取（如对象、文件等）\n## 正转和反转：\n     正转：如在传统应用程序里，我们主动去new对象\n     反转：容器创建对注入依赖对象\n## 为什么是反转？\n     因为是容器帮助我们查找并注入依赖对象\n\n<!-- more -->\n\n# DI：Dependency Injection（依赖注入）\n由容器动态地将某个依赖关系注入到组件之中\n\n依赖注入（Dependency Injection），是这样一个过程：由于某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。\n\n## 谁依赖谁？\n     应用程序依赖容器\n## 为什么需要依赖？\n     应用程序需要IoC容器来提供对象需要的外部资源\n## 谁注入谁？\n     IoC容器注入应用程序某个对象，应用程序依赖的对象\n## 注入了什么？\n     注入了某个对象所需要的外部资源（包括对象、资源、常量数据等）\n\n依赖注入明确描述了被注入对象依赖IoC容器配置依赖对象\n\n## 依赖注入三种方式\n     1.构造函数注入：在构造函数种借助参数将依赖的对象注入到创建的对象种\n     2.属性注入：通过添加Injection Attribute特性的方式将属性设置为自动注入属性\n     3.方法注入：通过调用方法实现对字段(对象)或属性(对象)的初始化\n\n\n## 依赖原则\n     1.高层次模块不应该依赖于低层次模块，它们都应该依赖抽象\n     2.抽象不应该依赖具体，具体应该依赖抽象\n\n\n[引用：依赖注入那些事](http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html)","slug":"关于IoC和DI","published":1,"updated":"2023-07-18T02:37:09.750Z","_id":"clk237kfm00134461g2dp6nr3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"IoC：Inversion-of-Control（控制反转）\"><a href=\"#IoC：Inversion-of-Control（控制反转）\" class=\"headerlink\" title=\"IoC：Inversion of Control（控制反转）\"></a>IoC：Inversion of Control（控制反转）</h1><h2 id=\"谁控制谁？\"><a href=\"#谁控制谁？\" class=\"headerlink\" title=\"谁控制谁？\"></a>谁控制谁？</h2><pre><code> IoC容器控制对象的创建，也就是IoC容器控制对象\n</code></pre>\n<h2 id=\"控制了什么？\"><a href=\"#控制了什么？\" class=\"headerlink\" title=\"控制了什么？\"></a>控制了什么？</h2><pre><code> 控制了外部资源的获取（如对象、文件等）\n</code></pre>\n<h2 id=\"正转和反转：\"><a href=\"#正转和反转：\" class=\"headerlink\" title=\"正转和反转：\"></a>正转和反转：</h2><pre><code> 正转：如在传统应用程序里，我们主动去new对象\n 反转：容器创建对注入依赖对象\n</code></pre>\n<h2 id=\"为什么是反转？\"><a href=\"#为什么是反转？\" class=\"headerlink\" title=\"为什么是反转？\"></a>为什么是反转？</h2><pre><code> 因为是容器帮助我们查找并注入依赖对象\n</code></pre>\n<span id=\"more\"></span>\n\n<h1 id=\"DI：Dependency-Injection（依赖注入）\"><a href=\"#DI：Dependency-Injection（依赖注入）\" class=\"headerlink\" title=\"DI：Dependency Injection（依赖注入）\"></a>DI：Dependency Injection（依赖注入）</h1><p>由容器动态地将某个依赖关系注入到组件之中</p>\n<p>依赖注入（Dependency Injection），是这样一个过程：由于某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。</p>\n<h2 id=\"谁依赖谁？\"><a href=\"#谁依赖谁？\" class=\"headerlink\" title=\"谁依赖谁？\"></a>谁依赖谁？</h2><pre><code> 应用程序依赖容器\n</code></pre>\n<h2 id=\"为什么需要依赖？\"><a href=\"#为什么需要依赖？\" class=\"headerlink\" title=\"为什么需要依赖？\"></a>为什么需要依赖？</h2><pre><code> 应用程序需要IoC容器来提供对象需要的外部资源\n</code></pre>\n<h2 id=\"谁注入谁？\"><a href=\"#谁注入谁？\" class=\"headerlink\" title=\"谁注入谁？\"></a>谁注入谁？</h2><pre><code> IoC容器注入应用程序某个对象，应用程序依赖的对象\n</code></pre>\n<h2 id=\"注入了什么？\"><a href=\"#注入了什么？\" class=\"headerlink\" title=\"注入了什么？\"></a>注入了什么？</h2><pre><code> 注入了某个对象所需要的外部资源（包括对象、资源、常量数据等）\n</code></pre>\n<p>依赖注入明确描述了被注入对象依赖IoC容器配置依赖对象</p>\n<h2 id=\"依赖注入三种方式\"><a href=\"#依赖注入三种方式\" class=\"headerlink\" title=\"依赖注入三种方式\"></a>依赖注入三种方式</h2><pre><code> 1.构造函数注入：在构造函数种借助参数将依赖的对象注入到创建的对象种\n 2.属性注入：通过添加Injection Attribute特性的方式将属性设置为自动注入属性\n 3.方法注入：通过调用方法实现对字段(对象)或属性(对象)的初始化\n</code></pre>\n<h2 id=\"依赖原则\"><a href=\"#依赖原则\" class=\"headerlink\" title=\"依赖原则\"></a>依赖原则</h2><pre><code> 1.高层次模块不应该依赖于低层次模块，它们都应该依赖抽象\n 2.抽象不应该依赖具体，具体应该依赖抽象\n</code></pre>\n<p><a href=\"http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html\">引用：依赖注入那些事</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"IoC：Inversion-of-Control（控制反转）\"><a href=\"#IoC：Inversion-of-Control（控制反转）\" class=\"headerlink\" title=\"IoC：Inversion of Control（控制反转）\"></a>IoC：Inversion of Control（控制反转）</h1><h2 id=\"谁控制谁？\"><a href=\"#谁控制谁？\" class=\"headerlink\" title=\"谁控制谁？\"></a>谁控制谁？</h2><pre><code> IoC容器控制对象的创建，也就是IoC容器控制对象\n</code></pre>\n<h2 id=\"控制了什么？\"><a href=\"#控制了什么？\" class=\"headerlink\" title=\"控制了什么？\"></a>控制了什么？</h2><pre><code> 控制了外部资源的获取（如对象、文件等）\n</code></pre>\n<h2 id=\"正转和反转：\"><a href=\"#正转和反转：\" class=\"headerlink\" title=\"正转和反转：\"></a>正转和反转：</h2><pre><code> 正转：如在传统应用程序里，我们主动去new对象\n 反转：容器创建对注入依赖对象\n</code></pre>\n<h2 id=\"为什么是反转？\"><a href=\"#为什么是反转？\" class=\"headerlink\" title=\"为什么是反转？\"></a>为什么是反转？</h2><pre><code> 因为是容器帮助我们查找并注入依赖对象\n</code></pre>","more":"<h1 id=\"DI：Dependency-Injection（依赖注入）\"><a href=\"#DI：Dependency-Injection（依赖注入）\" class=\"headerlink\" title=\"DI：Dependency Injection（依赖注入）\"></a>DI：Dependency Injection（依赖注入）</h1><p>由容器动态地将某个依赖关系注入到组件之中</p>\n<p>依赖注入（Dependency Injection），是这样一个过程：由于某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。</p>\n<h2 id=\"谁依赖谁？\"><a href=\"#谁依赖谁？\" class=\"headerlink\" title=\"谁依赖谁？\"></a>谁依赖谁？</h2><pre><code> 应用程序依赖容器\n</code></pre>\n<h2 id=\"为什么需要依赖？\"><a href=\"#为什么需要依赖？\" class=\"headerlink\" title=\"为什么需要依赖？\"></a>为什么需要依赖？</h2><pre><code> 应用程序需要IoC容器来提供对象需要的外部资源\n</code></pre>\n<h2 id=\"谁注入谁？\"><a href=\"#谁注入谁？\" class=\"headerlink\" title=\"谁注入谁？\"></a>谁注入谁？</h2><pre><code> IoC容器注入应用程序某个对象，应用程序依赖的对象\n</code></pre>\n<h2 id=\"注入了什么？\"><a href=\"#注入了什么？\" class=\"headerlink\" title=\"注入了什么？\"></a>注入了什么？</h2><pre><code> 注入了某个对象所需要的外部资源（包括对象、资源、常量数据等）\n</code></pre>\n<p>依赖注入明确描述了被注入对象依赖IoC容器配置依赖对象</p>\n<h2 id=\"依赖注入三种方式\"><a href=\"#依赖注入三种方式\" class=\"headerlink\" title=\"依赖注入三种方式\"></a>依赖注入三种方式</h2><pre><code> 1.构造函数注入：在构造函数种借助参数将依赖的对象注入到创建的对象种\n 2.属性注入：通过添加Injection Attribute特性的方式将属性设置为自动注入属性\n 3.方法注入：通过调用方法实现对字段(对象)或属性(对象)的初始化\n</code></pre>\n<h2 id=\"依赖原则\"><a href=\"#依赖原则\" class=\"headerlink\" title=\"依赖原则\"></a>依赖原则</h2><pre><code> 1.高层次模块不应该依赖于低层次模块，它们都应该依赖抽象\n 2.抽象不应该依赖具体，具体应该依赖抽象\n</code></pre>\n<p><a href=\"http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html\">引用：依赖注入那些事</a></p>"},{"title":"利用反射把查询到的Table、Reader转换成List、Model","id":"36319F63DF9B420D871A83484B2A40F2","date":"2018-04-12T03:58:49.000Z","_content":"\n纯粹写着玩，在不使用ORM工具的情况下通过反正转换类型。\n\n<!-- more -->\n\n通常我们从数据库查询到一个  DataReader  或者是  一个 Table , 想要转换成 一个 list 或者是 \n一个model 的话 , 一般情况下是使用foreach 循环reader或是table的rows，然后在循环内创建个对象，通过reader[“列名”]来赋值对象的属性。如果表的字段少的话，用这种方式还可以，速度也快一点。但是如果后续还会增加字段的话，那就非常麻烦了，要改很多地方。工作量太大，而且还很容易出错。所以这个时候使用反射来转换的话就非常便捷了。我们只管增加字段，改一下数据表对应的model，调用这个工具类的方法，传入相对应的参数就能得到想要的结果。\n\n```\npublic static List<T> ConvertToList<T>(DataTable dt)\n{\n    List<T> list = new List<T>(); // 定义集合\n    Type type = typeof(T); // 获得此模型的类型\n    string tempName = \"\";\n    PropertyInfo[] propertys = type.GetProperties();// 获得此模型的公共属性\n    foreach (DataRow dr in dt.Rows)\n    {\n        //新建一个模型\n        object obj = type.Assembly.CreateInstance(type.FullName);\n        foreach (PropertyInfo pi in propertys)\n        {\n            tempName = pi.Name;\n            if (dt.Columns.Contains(tempName))\n            {\n                if (!pi.CanWrite) continue;\n                object value = dr[tempName];\n                if (value != DBNull.Value)\n                    pi.SetValue(obj, value, null);\n            }\n        }\n        list.Add((T)obj);\n    }\n    return list;\n}\n\npublic static List<T> ConvertToList<T>(IDataReader reader)\n{\n    List<T> list = new List<T>(); // 定义集合\n    Type type = typeof(T); // 获得此模型的类型\n    string tempName = \"\";\n    PropertyInfo[] propertys = type.GetProperties();// 获得此模型的公共属性\n    while (reader.Read())\n    {\n        //新建一个模型\n        object obj = type.Assembly.CreateInstance(type.FullName);\n        foreach (PropertyInfo pi in propertys)\n        {\n            tempName = pi.Name;\n            if (ReaderExists(reader, tempName))\n            {\n                if (!pi.CanWrite) continue;\n                object value = reader[tempName];\n                if (value != DBNull.Value)\n                    pi.SetValue(obj, value, null);\n            }\n        }\n        list.Add((T)obj);\n    }\n    return list;\n}\n\npublic static T ConvertToModel<T>(IDataReader reader)\n{\n    Type type = typeof(T);\n    PropertyInfo[] proList = type.GetProperties();\n    //新建一个模型\n    object obj = type.Assembly.CreateInstance(type.FullName);\n    string tempName = \"\";\n    if (reader.Read())\n    {\n        foreach (PropertyInfo pi in proList)\n        {\n            tempName = pi.Name;\n            if (ReaderExists(reader, pi.Name))\n            {\n                if (!pi.CanWrite) continue;\n                object value = reader[tempName];\n                if (value != DBNull.Value)\n                    pi.SetValue(obj, value, null);\n            }\n        }\n    }\n    return (T)obj;\n}\n\npublic static T ConvertToModel<T>(DataRow row)\n{\n    Type type = typeof(T);\n    PropertyInfo[] proList = type.GetProperties();\n    //新建一个模型\n    object obj = type.Assembly.CreateInstance(type.FullName);\n    string tempName = \"\";\n    foreach (PropertyInfo pi in proList)\n    {\n        tempName = pi.Name;\n        if (!string.IsNullOrEmpty(row[tempName].ToString()))\n        {\n            if (!pi.CanWrite) continue;\n            object value = row[tempName];\n            if (value != DBNull.Value)\n                pi.SetValue(obj, value, null);\n        }\n    }\n    return (T)obj;\n}\n\n/// <summary>\n/// 验证reader是否存在某列\n/// </summary>\n/// <param name=\"reader\"></param>\n/// <param name=\"columnName\"></param>\n/// <returns></returns>\nprivate static bool ReaderExists(IDataReader reader, string columnName)\n{\n    int count = reader.FieldCount;\n    for (int i = 0; i < count; i++)\n    {\n        if (reader.GetName(i).Equals(columnName))\n        {\n            return true;\n        }\n    }\n    return false;\n}\n```\n","source":"_posts/利用反射把查询到的Table、Reader转换成List、Model.md","raw":"---\ntitle: 利用反射把查询到的Table、Reader转换成List、Model\nid: 36319F63DF9B420D871A83484B2A40F2\ndate: 2018-04-12 11:58:49\ntags: \n- C#\n- Reflex \ncategories: Technology\n---\n\n纯粹写着玩，在不使用ORM工具的情况下通过反正转换类型。\n\n<!-- more -->\n\n通常我们从数据库查询到一个  DataReader  或者是  一个 Table , 想要转换成 一个 list 或者是 \n一个model 的话 , 一般情况下是使用foreach 循环reader或是table的rows，然后在循环内创建个对象，通过reader[“列名”]来赋值对象的属性。如果表的字段少的话，用这种方式还可以，速度也快一点。但是如果后续还会增加字段的话，那就非常麻烦了，要改很多地方。工作量太大，而且还很容易出错。所以这个时候使用反射来转换的话就非常便捷了。我们只管增加字段，改一下数据表对应的model，调用这个工具类的方法，传入相对应的参数就能得到想要的结果。\n\n```\npublic static List<T> ConvertToList<T>(DataTable dt)\n{\n    List<T> list = new List<T>(); // 定义集合\n    Type type = typeof(T); // 获得此模型的类型\n    string tempName = \"\";\n    PropertyInfo[] propertys = type.GetProperties();// 获得此模型的公共属性\n    foreach (DataRow dr in dt.Rows)\n    {\n        //新建一个模型\n        object obj = type.Assembly.CreateInstance(type.FullName);\n        foreach (PropertyInfo pi in propertys)\n        {\n            tempName = pi.Name;\n            if (dt.Columns.Contains(tempName))\n            {\n                if (!pi.CanWrite) continue;\n                object value = dr[tempName];\n                if (value != DBNull.Value)\n                    pi.SetValue(obj, value, null);\n            }\n        }\n        list.Add((T)obj);\n    }\n    return list;\n}\n\npublic static List<T> ConvertToList<T>(IDataReader reader)\n{\n    List<T> list = new List<T>(); // 定义集合\n    Type type = typeof(T); // 获得此模型的类型\n    string tempName = \"\";\n    PropertyInfo[] propertys = type.GetProperties();// 获得此模型的公共属性\n    while (reader.Read())\n    {\n        //新建一个模型\n        object obj = type.Assembly.CreateInstance(type.FullName);\n        foreach (PropertyInfo pi in propertys)\n        {\n            tempName = pi.Name;\n            if (ReaderExists(reader, tempName))\n            {\n                if (!pi.CanWrite) continue;\n                object value = reader[tempName];\n                if (value != DBNull.Value)\n                    pi.SetValue(obj, value, null);\n            }\n        }\n        list.Add((T)obj);\n    }\n    return list;\n}\n\npublic static T ConvertToModel<T>(IDataReader reader)\n{\n    Type type = typeof(T);\n    PropertyInfo[] proList = type.GetProperties();\n    //新建一个模型\n    object obj = type.Assembly.CreateInstance(type.FullName);\n    string tempName = \"\";\n    if (reader.Read())\n    {\n        foreach (PropertyInfo pi in proList)\n        {\n            tempName = pi.Name;\n            if (ReaderExists(reader, pi.Name))\n            {\n                if (!pi.CanWrite) continue;\n                object value = reader[tempName];\n                if (value != DBNull.Value)\n                    pi.SetValue(obj, value, null);\n            }\n        }\n    }\n    return (T)obj;\n}\n\npublic static T ConvertToModel<T>(DataRow row)\n{\n    Type type = typeof(T);\n    PropertyInfo[] proList = type.GetProperties();\n    //新建一个模型\n    object obj = type.Assembly.CreateInstance(type.FullName);\n    string tempName = \"\";\n    foreach (PropertyInfo pi in proList)\n    {\n        tempName = pi.Name;\n        if (!string.IsNullOrEmpty(row[tempName].ToString()))\n        {\n            if (!pi.CanWrite) continue;\n            object value = row[tempName];\n            if (value != DBNull.Value)\n                pi.SetValue(obj, value, null);\n        }\n    }\n    return (T)obj;\n}\n\n/// <summary>\n/// 验证reader是否存在某列\n/// </summary>\n/// <param name=\"reader\"></param>\n/// <param name=\"columnName\"></param>\n/// <returns></returns>\nprivate static bool ReaderExists(IDataReader reader, string columnName)\n{\n    int count = reader.FieldCount;\n    for (int i = 0; i < count; i++)\n    {\n        if (reader.GetName(i).Equals(columnName))\n        {\n            return true;\n        }\n    }\n    return false;\n}\n```\n","slug":"利用反射把查询到的Table、Reader转换成List、Model","published":1,"updated":"2023-07-18T02:37:09.750Z","_id":"clk237kfo00164461058h76m6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>纯粹写着玩，在不使用ORM工具的情况下通过反正转换类型。</p>\n<span id=\"more\"></span>\n\n<p>通常我们从数据库查询到一个  DataReader  或者是  一个 Table , 想要转换成 一个 list 或者是<br>一个model 的话 , 一般情况下是使用foreach 循环reader或是table的rows，然后在循环内创建个对象，通过reader[“列名”]来赋值对象的属性。如果表的字段少的话，用这种方式还可以，速度也快一点。但是如果后续还会增加字段的话，那就非常麻烦了，要改很多地方。工作量太大，而且还很容易出错。所以这个时候使用反射来转换的话就非常便捷了。我们只管增加字段，改一下数据表对应的model，调用这个工具类的方法，传入相对应的参数就能得到想要的结果。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static List&lt;T&gt; ConvertToList&lt;T&gt;(DataTable dt)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    List&lt;T&gt; <span class=\"built_in\">list</span> = <span class=\"keyword\">new</span> List&lt;T&gt;<span class=\"literal\">()</span>; <span class=\"comment\">// 定义集合</span></span><br><span class=\"line\">    Type <span class=\"keyword\">type</span> = typeof(T); <span class=\"comment\">// 获得此模型的类型</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> tempName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    PropertyInfo<span class=\"literal\">[]</span> propertys = <span class=\"keyword\">type</span>.<span class=\"constructor\">GetProperties()</span>;<span class=\"comment\">// 获得此模型的公共属性</span></span><br><span class=\"line\">    foreach (DataRow dr <span class=\"keyword\">in</span> dt.Rows)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//新建一个模型</span></span><br><span class=\"line\">        <span class=\"keyword\">object</span> obj = <span class=\"keyword\">type</span>.Assembly.<span class=\"constructor\">CreateInstance(<span class=\"params\">type</span>.FullName)</span>;</span><br><span class=\"line\">        foreach (PropertyInfo pi <span class=\"keyword\">in</span> propertys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempName = pi.Name;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dt.Columns.<span class=\"constructor\">Contains(<span class=\"params\">tempName</span>)</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!pi.CanWrite) continue;</span><br><span class=\"line\">                <span class=\"keyword\">object</span> value = dr<span class=\"literal\">[<span class=\"identifier\">tempName</span>]</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value != DBNull.Value)</span><br><span class=\"line\">                    pi.<span class=\"constructor\">SetValue(<span class=\"params\">obj</span>, <span class=\"params\">value</span>, <span class=\"params\">null</span>)</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>.<span class=\"constructor\">Add((T)</span>obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static List&lt;T&gt; ConvertToList&lt;T&gt;(IDataReader reader)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    List&lt;T&gt; <span class=\"built_in\">list</span> = <span class=\"keyword\">new</span> List&lt;T&gt;<span class=\"literal\">()</span>; <span class=\"comment\">// 定义集合</span></span><br><span class=\"line\">    Type <span class=\"keyword\">type</span> = typeof(T); <span class=\"comment\">// 获得此模型的类型</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> tempName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    PropertyInfo<span class=\"literal\">[]</span> propertys = <span class=\"keyword\">type</span>.<span class=\"constructor\">GetProperties()</span>;<span class=\"comment\">// 获得此模型的公共属性</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (reader.<span class=\"constructor\">Read()</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//新建一个模型</span></span><br><span class=\"line\">        <span class=\"keyword\">object</span> obj = <span class=\"keyword\">type</span>.Assembly.<span class=\"constructor\">CreateInstance(<span class=\"params\">type</span>.FullName)</span>;</span><br><span class=\"line\">        foreach (PropertyInfo pi <span class=\"keyword\">in</span> propertys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempName = pi.Name;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"constructor\">ReaderExists(<span class=\"params\">reader</span>, <span class=\"params\">tempName</span>)</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!pi.CanWrite) continue;</span><br><span class=\"line\">                <span class=\"keyword\">object</span> value = reader<span class=\"literal\">[<span class=\"identifier\">tempName</span>]</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value != DBNull.Value)</span><br><span class=\"line\">                    pi.<span class=\"constructor\">SetValue(<span class=\"params\">obj</span>, <span class=\"params\">value</span>, <span class=\"params\">null</span>)</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>.<span class=\"constructor\">Add((T)</span>obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static T ConvertToModel&lt;T&gt;(IDataReader reader)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Type <span class=\"keyword\">type</span> = typeof(T);</span><br><span class=\"line\">    PropertyInfo<span class=\"literal\">[]</span> proList = <span class=\"keyword\">type</span>.<span class=\"constructor\">GetProperties()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//新建一个模型</span></span><br><span class=\"line\">    <span class=\"keyword\">object</span> obj = <span class=\"keyword\">type</span>.Assembly.<span class=\"constructor\">CreateInstance(<span class=\"params\">type</span>.FullName)</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> tempName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reader.<span class=\"constructor\">Read()</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foreach (PropertyInfo pi <span class=\"keyword\">in</span> proList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempName = pi.Name;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"constructor\">ReaderExists(<span class=\"params\">reader</span>, <span class=\"params\">pi</span>.Name)</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!pi.CanWrite) continue;</span><br><span class=\"line\">                <span class=\"keyword\">object</span> value = reader<span class=\"literal\">[<span class=\"identifier\">tempName</span>]</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value != DBNull.Value)</span><br><span class=\"line\">                    pi.<span class=\"constructor\">SetValue(<span class=\"params\">obj</span>, <span class=\"params\">value</span>, <span class=\"params\">null</span>)</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return (T)obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static T ConvertToModel&lt;T&gt;(DataRow row)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Type <span class=\"keyword\">type</span> = typeof(T);</span><br><span class=\"line\">    PropertyInfo<span class=\"literal\">[]</span> proList = <span class=\"keyword\">type</span>.<span class=\"constructor\">GetProperties()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//新建一个模型</span></span><br><span class=\"line\">    <span class=\"keyword\">object</span> obj = <span class=\"keyword\">type</span>.Assembly.<span class=\"constructor\">CreateInstance(<span class=\"params\">type</span>.FullName)</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> tempName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    foreach (PropertyInfo pi <span class=\"keyword\">in</span> proList)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempName = pi.Name;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.<span class=\"constructor\">IsNullOrEmpty(<span class=\"params\">row</span>[<span class=\"params\">tempName</span>].ToString()</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!pi.CanWrite) continue;</span><br><span class=\"line\">            <span class=\"keyword\">object</span> value = row<span class=\"literal\">[<span class=\"identifier\">tempName</span>]</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != DBNull.Value)</span><br><span class=\"line\">                pi.<span class=\"constructor\">SetValue(<span class=\"params\">obj</span>, <span class=\"params\">value</span>, <span class=\"params\">null</span>)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return (T)obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 验证reader是否存在某列</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;reader&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;columnName&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> static <span class=\"built_in\">bool</span> <span class=\"constructor\">ReaderExists(IDataReader <span class=\"params\">reader</span>, <span class=\"params\">string</span> <span class=\"params\">columnName</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> count = reader.FieldCount;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reader.<span class=\"constructor\">GetName(<span class=\"params\">i</span>)</span>.<span class=\"constructor\">Equals(<span class=\"params\">columnName</span>)</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>纯粹写着玩，在不使用ORM工具的情况下通过反正转换类型。</p>","more":"<p>通常我们从数据库查询到一个  DataReader  或者是  一个 Table , 想要转换成 一个 list 或者是<br>一个model 的话 , 一般情况下是使用foreach 循环reader或是table的rows，然后在循环内创建个对象，通过reader[“列名”]来赋值对象的属性。如果表的字段少的话，用这种方式还可以，速度也快一点。但是如果后续还会增加字段的话，那就非常麻烦了，要改很多地方。工作量太大，而且还很容易出错。所以这个时候使用反射来转换的话就非常便捷了。我们只管增加字段，改一下数据表对应的model，调用这个工具类的方法，传入相对应的参数就能得到想要的结果。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static List&lt;T&gt; ConvertToList&lt;T&gt;(DataTable dt)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    List&lt;T&gt; <span class=\"built_in\">list</span> = <span class=\"keyword\">new</span> List&lt;T&gt;<span class=\"literal\">()</span>; <span class=\"comment\">// 定义集合</span></span><br><span class=\"line\">    Type <span class=\"keyword\">type</span> = typeof(T); <span class=\"comment\">// 获得此模型的类型</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> tempName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    PropertyInfo<span class=\"literal\">[]</span> propertys = <span class=\"keyword\">type</span>.<span class=\"constructor\">GetProperties()</span>;<span class=\"comment\">// 获得此模型的公共属性</span></span><br><span class=\"line\">    foreach (DataRow dr <span class=\"keyword\">in</span> dt.Rows)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//新建一个模型</span></span><br><span class=\"line\">        <span class=\"keyword\">object</span> obj = <span class=\"keyword\">type</span>.Assembly.<span class=\"constructor\">CreateInstance(<span class=\"params\">type</span>.FullName)</span>;</span><br><span class=\"line\">        foreach (PropertyInfo pi <span class=\"keyword\">in</span> propertys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempName = pi.Name;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dt.Columns.<span class=\"constructor\">Contains(<span class=\"params\">tempName</span>)</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!pi.CanWrite) continue;</span><br><span class=\"line\">                <span class=\"keyword\">object</span> value = dr<span class=\"literal\">[<span class=\"identifier\">tempName</span>]</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value != DBNull.Value)</span><br><span class=\"line\">                    pi.<span class=\"constructor\">SetValue(<span class=\"params\">obj</span>, <span class=\"params\">value</span>, <span class=\"params\">null</span>)</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>.<span class=\"constructor\">Add((T)</span>obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static List&lt;T&gt; ConvertToList&lt;T&gt;(IDataReader reader)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    List&lt;T&gt; <span class=\"built_in\">list</span> = <span class=\"keyword\">new</span> List&lt;T&gt;<span class=\"literal\">()</span>; <span class=\"comment\">// 定义集合</span></span><br><span class=\"line\">    Type <span class=\"keyword\">type</span> = typeof(T); <span class=\"comment\">// 获得此模型的类型</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> tempName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    PropertyInfo<span class=\"literal\">[]</span> propertys = <span class=\"keyword\">type</span>.<span class=\"constructor\">GetProperties()</span>;<span class=\"comment\">// 获得此模型的公共属性</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (reader.<span class=\"constructor\">Read()</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//新建一个模型</span></span><br><span class=\"line\">        <span class=\"keyword\">object</span> obj = <span class=\"keyword\">type</span>.Assembly.<span class=\"constructor\">CreateInstance(<span class=\"params\">type</span>.FullName)</span>;</span><br><span class=\"line\">        foreach (PropertyInfo pi <span class=\"keyword\">in</span> propertys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempName = pi.Name;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"constructor\">ReaderExists(<span class=\"params\">reader</span>, <span class=\"params\">tempName</span>)</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!pi.CanWrite) continue;</span><br><span class=\"line\">                <span class=\"keyword\">object</span> value = reader<span class=\"literal\">[<span class=\"identifier\">tempName</span>]</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value != DBNull.Value)</span><br><span class=\"line\">                    pi.<span class=\"constructor\">SetValue(<span class=\"params\">obj</span>, <span class=\"params\">value</span>, <span class=\"params\">null</span>)</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>.<span class=\"constructor\">Add((T)</span>obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static T ConvertToModel&lt;T&gt;(IDataReader reader)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Type <span class=\"keyword\">type</span> = typeof(T);</span><br><span class=\"line\">    PropertyInfo<span class=\"literal\">[]</span> proList = <span class=\"keyword\">type</span>.<span class=\"constructor\">GetProperties()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//新建一个模型</span></span><br><span class=\"line\">    <span class=\"keyword\">object</span> obj = <span class=\"keyword\">type</span>.Assembly.<span class=\"constructor\">CreateInstance(<span class=\"params\">type</span>.FullName)</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> tempName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reader.<span class=\"constructor\">Read()</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foreach (PropertyInfo pi <span class=\"keyword\">in</span> proList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempName = pi.Name;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"constructor\">ReaderExists(<span class=\"params\">reader</span>, <span class=\"params\">pi</span>.Name)</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!pi.CanWrite) continue;</span><br><span class=\"line\">                <span class=\"keyword\">object</span> value = reader<span class=\"literal\">[<span class=\"identifier\">tempName</span>]</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value != DBNull.Value)</span><br><span class=\"line\">                    pi.<span class=\"constructor\">SetValue(<span class=\"params\">obj</span>, <span class=\"params\">value</span>, <span class=\"params\">null</span>)</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return (T)obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static T ConvertToModel&lt;T&gt;(DataRow row)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Type <span class=\"keyword\">type</span> = typeof(T);</span><br><span class=\"line\">    PropertyInfo<span class=\"literal\">[]</span> proList = <span class=\"keyword\">type</span>.<span class=\"constructor\">GetProperties()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//新建一个模型</span></span><br><span class=\"line\">    <span class=\"keyword\">object</span> obj = <span class=\"keyword\">type</span>.Assembly.<span class=\"constructor\">CreateInstance(<span class=\"params\">type</span>.FullName)</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> tempName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    foreach (PropertyInfo pi <span class=\"keyword\">in</span> proList)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempName = pi.Name;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.<span class=\"constructor\">IsNullOrEmpty(<span class=\"params\">row</span>[<span class=\"params\">tempName</span>].ToString()</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!pi.CanWrite) continue;</span><br><span class=\"line\">            <span class=\"keyword\">object</span> value = row<span class=\"literal\">[<span class=\"identifier\">tempName</span>]</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != DBNull.Value)</span><br><span class=\"line\">                pi.<span class=\"constructor\">SetValue(<span class=\"params\">obj</span>, <span class=\"params\">value</span>, <span class=\"params\">null</span>)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return (T)obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 验证reader是否存在某列</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;reader&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;columnName&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> static <span class=\"built_in\">bool</span> <span class=\"constructor\">ReaderExists(IDataReader <span class=\"params\">reader</span>, <span class=\"params\">string</span> <span class=\"params\">columnName</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> count = reader.FieldCount;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reader.<span class=\"constructor\">GetName(<span class=\"params\">i</span>)</span>.<span class=\"constructor\">Equals(<span class=\"params\">columnName</span>)</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"对于异步的理解","id":"6ECFDB54D0C1DDDD61E4FF75B038C197","date":"2018-04-16T00:54:00.000Z","_content":"\n**对于异步的理解**\n\n  之前对于同步方法和使用async、await的异步方法很迷惑。我觉得等待执行结果的异步和同步方法有什么区别吗？他们的执行顺序都是一样的啊？不是都需要等待执行结果吗？  \n\n<!-- more -->\n\n  今天翻了一下《C#高级编程》，才算搞清楚这里面的差异，原来使用了async、await的异步是不会阻塞线程的。  \n\n  首先说说关于同步方法和异步方法的区别。比如说web网站加载一些网络资源，是使用同步方法请求，那么此时web网站的用户界面将会阻塞，直到该方法完成对资源的网络调用，并完成结果分析。完成这些调用所需的时间取决与网络速度，以及服务器当前的工作量。\n  \n  对于用户来说，界面卡掉、一段时间的等待都是不愉快的。所以使用异步调用。\n  \n  异步可以避免阻塞，在此期间可以做更多的事情。但是异步有一个缺陷，相对于同步来说，它对于程序的流程充满了不确定性，顺序可能会颠倒。所以在某些场景，比如说有多个异步方法被调用，他们是有依赖关系的，后面的异步方法需要使用到之前异步方法的结果，我们需要按顺序调用这些异步方法，这个时候就需要使用async、await关键字来等待执行的结果，但是它不会阻塞线程。","source":"_posts/对于异步的理解.md","raw":"---\ntitle: 对于异步的理解\nid: 6ECFDB54D0C1DDDD61E4FF75B038C197\ndate: 2018-04-16 08:54:00\ntags: Async\ncategories: Technology\n---\n\n**对于异步的理解**\n\n  之前对于同步方法和使用async、await的异步方法很迷惑。我觉得等待执行结果的异步和同步方法有什么区别吗？他们的执行顺序都是一样的啊？不是都需要等待执行结果吗？  \n\n<!-- more -->\n\n  今天翻了一下《C#高级编程》，才算搞清楚这里面的差异，原来使用了async、await的异步是不会阻塞线程的。  \n\n  首先说说关于同步方法和异步方法的区别。比如说web网站加载一些网络资源，是使用同步方法请求，那么此时web网站的用户界面将会阻塞，直到该方法完成对资源的网络调用，并完成结果分析。完成这些调用所需的时间取决与网络速度，以及服务器当前的工作量。\n  \n  对于用户来说，界面卡掉、一段时间的等待都是不愉快的。所以使用异步调用。\n  \n  异步可以避免阻塞，在此期间可以做更多的事情。但是异步有一个缺陷，相对于同步来说，它对于程序的流程充满了不确定性，顺序可能会颠倒。所以在某些场景，比如说有多个异步方法被调用，他们是有依赖关系的，后面的异步方法需要使用到之前异步方法的结果，我们需要按顺序调用这些异步方法，这个时候就需要使用async、await关键字来等待执行的结果，但是它不会阻塞线程。","slug":"对于异步的理解","published":1,"updated":"2023-07-18T02:37:09.750Z","_id":"clk237kfp001a4461bqul19s7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>对于异步的理解</strong></p>\n<p>  之前对于同步方法和使用async、await的异步方法很迷惑。我觉得等待执行结果的异步和同步方法有什么区别吗？他们的执行顺序都是一样的啊？不是都需要等待执行结果吗？  </p>\n<span id=\"more\"></span>\n\n<p>  今天翻了一下《C#高级编程》，才算搞清楚这里面的差异，原来使用了async、await的异步是不会阻塞线程的。  </p>\n<p>  首先说说关于同步方法和异步方法的区别。比如说web网站加载一些网络资源，是使用同步方法请求，那么此时web网站的用户界面将会阻塞，直到该方法完成对资源的网络调用，并完成结果分析。完成这些调用所需的时间取决与网络速度，以及服务器当前的工作量。</p>\n<p>  对于用户来说，界面卡掉、一段时间的等待都是不愉快的。所以使用异步调用。</p>\n<p>  异步可以避免阻塞，在此期间可以做更多的事情。但是异步有一个缺陷，相对于同步来说，它对于程序的流程充满了不确定性，顺序可能会颠倒。所以在某些场景，比如说有多个异步方法被调用，他们是有依赖关系的，后面的异步方法需要使用到之前异步方法的结果，我们需要按顺序调用这些异步方法，这个时候就需要使用async、await关键字来等待执行的结果，但是它不会阻塞线程。</p>\n","site":{"data":{}},"excerpt":"<p><strong>对于异步的理解</strong></p>\n<p>  之前对于同步方法和使用async、await的异步方法很迷惑。我觉得等待执行结果的异步和同步方法有什么区别吗？他们的执行顺序都是一样的啊？不是都需要等待执行结果吗？  </p>","more":"<p>  今天翻了一下《C#高级编程》，才算搞清楚这里面的差异，原来使用了async、await的异步是不会阻塞线程的。  </p>\n<p>  首先说说关于同步方法和异步方法的区别。比如说web网站加载一些网络资源，是使用同步方法请求，那么此时web网站的用户界面将会阻塞，直到该方法完成对资源的网络调用，并完成结果分析。完成这些调用所需的时间取决与网络速度，以及服务器当前的工作量。</p>\n<p>  对于用户来说，界面卡掉、一段时间的等待都是不愉快的。所以使用异步调用。</p>\n<p>  异步可以避免阻塞，在此期间可以做更多的事情。但是异步有一个缺陷，相对于同步来说，它对于程序的流程充满了不确定性，顺序可能会颠倒。所以在某些场景，比如说有多个异步方法被调用，他们是有依赖关系的，后面的异步方法需要使用到之前异步方法的结果，我们需要按顺序调用这些异步方法，这个时候就需要使用async、await关键字来等待执行的结果，但是它不会阻塞线程。</p>"},{"title":"设计模式六大原则","id":"A6034B2DC7E6CD4E518DF46BF9A985D9","date":"2018-04-12T02:46:02.000Z","_content":"\n设计模式六大原则\n\n<!-- more -->\n\n# 开闭原则：  \n     一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。  \n\n     软件实体包括：  \n          1.项目软件中按照一定的逻辑规则划分的模块  \n          2.抽象和类  \n          3.方法  \n\n     如何使用：  \n          1.抽象约束  \n               1）通过接口或抽象类的扩展  \n               2）参数类型、引用对象尽量使用接口或抽象类，而不是实现类  \n               3）抽象层尽量保持稳定，一但确定即不允许修改  \n          2.元数据（metadata）控制模块行为（配置文件参数控制）  \n          3.制定项目章程  \n          4.封装变化  \n               1）将相同的变化封装到一个接口或者抽象类中  \n               2）将不同的变化封装到不同的接口或者抽象类中，不应该有两个或两个以上不同的变化出现在同一个接口或者抽象类中  \n\n# 单一原则:\n     一个类只负责一项职责  \n优点：\n\t1. 代码可读性高。  \n\t2. 易维护。修改一项职责  \n\t3. 不用担心会影响到其它的职责。  \n\n\n\n# 里氏替换原则：\n     派生类对象能够替换其基类被使用  \n  优点：\n     可以在不改变基类的情况下扩展派生类。只需继承，无需改变。\n\n# 依赖倒置原则：\n     程序要依赖于抽象接口，而不是依赖具体的实现  \n\t1. 高层模块不应依赖于底层模块，两者都需要依赖抽象  \n\t2. 抽象不依赖具体的细节，细节依赖于抽象  \n\n\n\n# 接口隔离原则：\n     客户端不应依赖它不需要的接口，类之间的依赖关系应建立在最小的接口上（不出现臃肿的接口，但“ 小 ”具有限度，需遵从单一职责原则）  \n\n# 迪米特法则：\n     一个实体应尽可能少的跟其他实体发生相互作用。致力于降低各类之间的耦合。  \n     缺点：会造成大量中介类，增加系统复杂性  \n","source":"_posts/设计模式六大原则.md","raw":"---\ntitle: 设计模式六大原则\nid: A6034B2DC7E6CD4E518DF46BF9A985D9\ndate: 2018-04-12 10:46:02\ntags: Desing\ncategories: Technology\n---\n\n设计模式六大原则\n\n<!-- more -->\n\n# 开闭原则：  \n     一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。  \n\n     软件实体包括：  \n          1.项目软件中按照一定的逻辑规则划分的模块  \n          2.抽象和类  \n          3.方法  \n\n     如何使用：  \n          1.抽象约束  \n               1）通过接口或抽象类的扩展  \n               2）参数类型、引用对象尽量使用接口或抽象类，而不是实现类  \n               3）抽象层尽量保持稳定，一但确定即不允许修改  \n          2.元数据（metadata）控制模块行为（配置文件参数控制）  \n          3.制定项目章程  \n          4.封装变化  \n               1）将相同的变化封装到一个接口或者抽象类中  \n               2）将不同的变化封装到不同的接口或者抽象类中，不应该有两个或两个以上不同的变化出现在同一个接口或者抽象类中  \n\n# 单一原则:\n     一个类只负责一项职责  \n优点：\n\t1. 代码可读性高。  \n\t2. 易维护。修改一项职责  \n\t3. 不用担心会影响到其它的职责。  \n\n\n\n# 里氏替换原则：\n     派生类对象能够替换其基类被使用  \n  优点：\n     可以在不改变基类的情况下扩展派生类。只需继承，无需改变。\n\n# 依赖倒置原则：\n     程序要依赖于抽象接口，而不是依赖具体的实现  \n\t1. 高层模块不应依赖于底层模块，两者都需要依赖抽象  \n\t2. 抽象不依赖具体的细节，细节依赖于抽象  \n\n\n\n# 接口隔离原则：\n     客户端不应依赖它不需要的接口，类之间的依赖关系应建立在最小的接口上（不出现臃肿的接口，但“ 小 ”具有限度，需遵从单一职责原则）  \n\n# 迪米特法则：\n     一个实体应尽可能少的跟其他实体发生相互作用。致力于降低各类之间的耦合。  \n     缺点：会造成大量中介类，增加系统复杂性  \n","slug":"设计模式六大原则","published":1,"updated":"2023-07-18T02:37:09.750Z","_id":"clk237kfq001d4461232674tv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>设计模式六大原则</p>\n<span id=\"more\"></span>\n\n<h1 id=\"开闭原则：\"><a href=\"#开闭原则：\" class=\"headerlink\" title=\"开闭原则：\"></a>开闭原则：</h1><pre><code> 一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。  \n\n 软件实体包括：  \n      1.项目软件中按照一定的逻辑规则划分的模块  \n      2.抽象和类  \n      3.方法  \n\n 如何使用：  \n      1.抽象约束  \n           1）通过接口或抽象类的扩展  \n           2）参数类型、引用对象尽量使用接口或抽象类，而不是实现类  \n           3）抽象层尽量保持稳定，一但确定即不允许修改  \n      2.元数据（metadata）控制模块行为（配置文件参数控制）  \n      3.制定项目章程  \n      4.封装变化  \n           1）将相同的变化封装到一个接口或者抽象类中  \n           2）将不同的变化封装到不同的接口或者抽象类中，不应该有两个或两个以上不同的变化出现在同一个接口或者抽象类中  \n</code></pre>\n<h1 id=\"单一原则\"><a href=\"#单一原则\" class=\"headerlink\" title=\"单一原则:\"></a>单一原则:</h1><pre><code> 一个类只负责一项职责  \n</code></pre>\n<p>优点：<br>    1. 代码可读性高。<br>    2. 易维护。修改一项职责<br>    3. 不用担心会影响到其它的职责。  </p>\n<h1 id=\"里氏替换原则：\"><a href=\"#里氏替换原则：\" class=\"headerlink\" title=\"里氏替换原则：\"></a>里氏替换原则：</h1><pre><code> 派生类对象能够替换其基类被使用  \n</code></pre>\n<p>  优点：<br>     可以在不改变基类的情况下扩展派生类。只需继承，无需改变。</p>\n<h1 id=\"依赖倒置原则：\"><a href=\"#依赖倒置原则：\" class=\"headerlink\" title=\"依赖倒置原则：\"></a>依赖倒置原则：</h1><pre><code> 程序要依赖于抽象接口，而不是依赖具体的实现  \n1. 高层模块不应依赖于底层模块，两者都需要依赖抽象  \n2. 抽象不依赖具体的细节，细节依赖于抽象  \n</code></pre>\n<h1 id=\"接口隔离原则：\"><a href=\"#接口隔离原则：\" class=\"headerlink\" title=\"接口隔离原则：\"></a>接口隔离原则：</h1><pre><code> 客户端不应依赖它不需要的接口，类之间的依赖关系应建立在最小的接口上（不出现臃肿的接口，但“ 小 ”具有限度，需遵从单一职责原则）  \n</code></pre>\n<h1 id=\"迪米特法则：\"><a href=\"#迪米特法则：\" class=\"headerlink\" title=\"迪米特法则：\"></a>迪米特法则：</h1><pre><code> 一个实体应尽可能少的跟其他实体发生相互作用。致力于降低各类之间的耦合。  \n 缺点：会造成大量中介类，增加系统复杂性  \n</code></pre>\n","site":{"data":{}},"excerpt":"<p>设计模式六大原则</p>","more":"<h1 id=\"开闭原则：\"><a href=\"#开闭原则：\" class=\"headerlink\" title=\"开闭原则：\"></a>开闭原则：</h1><pre><code> 一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。  \n\n 软件实体包括：  \n      1.项目软件中按照一定的逻辑规则划分的模块  \n      2.抽象和类  \n      3.方法  \n\n 如何使用：  \n      1.抽象约束  \n           1）通过接口或抽象类的扩展  \n           2）参数类型、引用对象尽量使用接口或抽象类，而不是实现类  \n           3）抽象层尽量保持稳定，一但确定即不允许修改  \n      2.元数据（metadata）控制模块行为（配置文件参数控制）  \n      3.制定项目章程  \n      4.封装变化  \n           1）将相同的变化封装到一个接口或者抽象类中  \n           2）将不同的变化封装到不同的接口或者抽象类中，不应该有两个或两个以上不同的变化出现在同一个接口或者抽象类中  \n</code></pre>\n<h1 id=\"单一原则\"><a href=\"#单一原则\" class=\"headerlink\" title=\"单一原则:\"></a>单一原则:</h1><pre><code> 一个类只负责一项职责  \n</code></pre>\n<p>优点：<br>    1. 代码可读性高。<br>    2. 易维护。修改一项职责<br>    3. 不用担心会影响到其它的职责。  </p>\n<h1 id=\"里氏替换原则：\"><a href=\"#里氏替换原则：\" class=\"headerlink\" title=\"里氏替换原则：\"></a>里氏替换原则：</h1><pre><code> 派生类对象能够替换其基类被使用  \n</code></pre>\n<p>  优点：<br>     可以在不改变基类的情况下扩展派生类。只需继承，无需改变。</p>\n<h1 id=\"依赖倒置原则：\"><a href=\"#依赖倒置原则：\" class=\"headerlink\" title=\"依赖倒置原则：\"></a>依赖倒置原则：</h1><pre><code> 程序要依赖于抽象接口，而不是依赖具体的实现  \n1. 高层模块不应依赖于底层模块，两者都需要依赖抽象  \n2. 抽象不依赖具体的细节，细节依赖于抽象  \n</code></pre>\n<h1 id=\"接口隔离原则：\"><a href=\"#接口隔离原则：\" class=\"headerlink\" title=\"接口隔离原则：\"></a>接口隔离原则：</h1><pre><code> 客户端不应依赖它不需要的接口，类之间的依赖关系应建立在最小的接口上（不出现臃肿的接口，但“ 小 ”具有限度，需遵从单一职责原则）  \n</code></pre>\n<h1 id=\"迪米特法则：\"><a href=\"#迪米特法则：\" class=\"headerlink\" title=\"迪米特法则：\"></a>迪米特法则：</h1><pre><code> 一个实体应尽可能少的跟其他实体发生相互作用。致力于降低各类之间的耦合。  \n 缺点：会造成大量中介类，增加系统复杂性  \n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"clk237kes00014461fe0pgxvy","category_id":"clk237kf000044461ecec2nsg","_id":"clk237kfd000g4461gh74fzuu"},{"post_id":"clk237key000344614pg5faeh","category_id":"clk237kf000044461ecec2nsg","_id":"clk237kfg000m4461eg369zdi"},{"post_id":"clk237kf4000744612zuo3x62","category_id":"clk237kf000044461ecec2nsg","_id":"clk237kfi000r4461c4w52sha"},{"post_id":"clk237kfg000o4461hbrf6wc1","category_id":"clk237kff000l44619ass21h8","_id":"clk237kfk000x44617peic5lo"},{"post_id":"clk237kf500084461eh1gaiqv","category_id":"clk237kff000l44619ass21h8","_id":"clk237kfm00114461empecmac"},{"post_id":"clk237kfh000q4461c7qh3gxr","category_id":"clk237kf000044461ecec2nsg","_id":"clk237kfn0014446199ch8fuh"},{"post_id":"clk237kfj000u44613km54psg","category_id":"clk237kf000044461ecec2nsg","_id":"clk237kfo00174461799c4p01"},{"post_id":"clk237kf6000944617uq49sv9","category_id":"clk237kff000l44619ass21h8","_id":"clk237kfq001b4461044bfszm"},{"post_id":"clk237kfk000w4461ghbpgh4b","category_id":"clk237kff000l44619ass21h8","_id":"clk237kfr001e446101zw4tni"},{"post_id":"clk237kfl00104461hg1xdqwx","category_id":"clk237kf000044461ecec2nsg","_id":"clk237kfs001g4461gt1g1013"},{"post_id":"clk237kf9000d44618f5xgbr0","category_id":"clk237kfk000y44611f1lbhlm","_id":"clk237kfs001j4461gml4gcg4"},{"post_id":"clk237kfm00134461g2dp6nr3","category_id":"clk237kff000l44619ass21h8","_id":"clk237kft001l4461axymfulp"},{"post_id":"clk237kfo00164461058h76m6","category_id":"clk237kff000l44619ass21h8","_id":"clk237kft001m4461b8k0dv42"},{"post_id":"clk237kfc000e44617ld9euu5","category_id":"clk237kff000l44619ass21h8","_id":"clk237kft001o4461d5vw8k6l"},{"post_id":"clk237kfp001a4461bqul19s7","category_id":"clk237kff000l44619ass21h8","_id":"clk237kft001q4461ao62ggyk"},{"post_id":"clk237kfq001d4461232674tv","category_id":"clk237kff000l44619ass21h8","_id":"clk237kft001s446170hyauwy"},{"post_id":"clk237kfe000j4461elem7tzp","category_id":"clk237kff000l44619ass21h8","_id":"clk237kfu001u44616dhbdl0n"},{"post_id":"clk237kfe000k44615i0hekp2","category_id":"clk237kff000l44619ass21h8","_id":"clk237kfu001v4461f9y2bf82"}],"PostTag":[{"post_id":"clk237kes00014461fe0pgxvy","tag_id":"clk237kf200054461emhi2m35","_id":"clk237kf9000c44615mhd6xgo"},{"post_id":"clk237key000344614pg5faeh","tag_id":"clk237kf200054461emhi2m35","_id":"clk237kfd000i4461cpordzrg"},{"post_id":"clk237kf4000744612zuo3x62","tag_id":"clk237kfd000h4461bk8ndkqq","_id":"clk237kfh000p4461dabi3a48"},{"post_id":"clk237kf500084461eh1gaiqv","tag_id":"clk237kfg000n44610yxtd2cl","_id":"clk237kfk000v4461b492a2kb"},{"post_id":"clk237kf6000944617uq49sv9","tag_id":"clk237kfj000t4461gw3dcgf7","_id":"clk237kfm001244616qe42e2n"},{"post_id":"clk237kf9000d44618f5xgbr0","tag_id":"clk237kfl000z446124b582b5","_id":"clk237kfp00194461hauxhlgz"},{"post_id":"clk237kfc000e44617ld9euu5","tag_id":"clk237kfo00184461gt006cgh","_id":"clk237kfs001h4461fdx2fpql"},{"post_id":"clk237kfe000j4461elem7tzp","tag_id":"clk237kfr001f446150vfetdy","_id":"clk237kft001p44617a1t1iqj"},{"post_id":"clk237kfe000j4461elem7tzp","tag_id":"clk237kfs001k44619j3m12zg","_id":"clk237kft001r44615pd00asa"},{"post_id":"clk237kfe000k44615i0hekp2","tag_id":"clk237kft001n44611vay7dzt","_id":"clk237kfu001x44612noc6f4c"},{"post_id":"clk237kfe000k44615i0hekp2","tag_id":"clk237kfg000n44610yxtd2cl","_id":"clk237kfu001y4461dekebspf"},{"post_id":"clk237kfg000o4461hbrf6wc1","tag_id":"clk237kft001n44611vay7dzt","_id":"clk237kfu00204461e7jk950x"},{"post_id":"clk237kfg000o4461hbrf6wc1","tag_id":"clk237kfg000n44610yxtd2cl","_id":"clk237kfv002144619fwn6j5f"},{"post_id":"clk237kfh000q4461c7qh3gxr","tag_id":"clk237kfu001z446185fa4ce0","_id":"clk237kfv00234461fm6l8c8f"},{"post_id":"clk237kfj000u44613km54psg","tag_id":"clk237kfv00224461hgsd5fcc","_id":"clk237kfv00254461g2stht8a"},{"post_id":"clk237kfk000w4461ghbpgh4b","tag_id":"clk237kfv002444612ypi0kdj","_id":"clk237kfw0028446160w14mar"},{"post_id":"clk237kfk000w4461ghbpgh4b","tag_id":"clk237kfv00264461exbwcbuv","_id":"clk237kfw002944611h6m4chp"},{"post_id":"clk237kfl00104461hg1xdqwx","tag_id":"clk237kfd000h4461bk8ndkqq","_id":"clk237kfw002b4461bqs8c8en"},{"post_id":"clk237kfl00104461hg1xdqwx","tag_id":"clk237kfw00274461b9y79756","_id":"clk237kfz002c44615vx07w3t"},{"post_id":"clk237kfm00134461g2dp6nr3","tag_id":"clk237kfw002a4461eft79to4","_id":"clk237kfz002e44615t355bpg"},{"post_id":"clk237kfo00164461058h76m6","tag_id":"clk237kfv00264461exbwcbuv","_id":"clk237kg0002h4461247oadew"},{"post_id":"clk237kfo00164461058h76m6","tag_id":"clk237kg0002f44615xrwarl7","_id":"clk237kg0002i44612062fiea"},{"post_id":"clk237kfp001a4461bqul19s7","tag_id":"clk237kg0002g4461a3jw9cye","_id":"clk237kg0002k4461c8bve4u6"},{"post_id":"clk237kfq001d4461232674tv","tag_id":"clk237kg0002j4461achiaeq0","_id":"clk237kg0002l44610gruc8iz"}],"Tag":[{"name":"Docker","_id":"clk237kf200054461emhi2m35"},{"name":"Git","_id":"clk237kfd000h4461bk8ndkqq"},{"name":".Netcore","_id":"clk237kfg000n44610yxtd2cl"},{"name":"js","_id":"clk237kfj000t4461gw3dcgf7"},{"name":"Linux","_id":"clk237kfl000z446124b582b5"},{"name":"Python","_id":"clk237kfo00184461gt006cgh"},{"name":"SQL","_id":"clk237kfr001f446150vfetdy"},{"name":"SQL Server","_id":"clk237kfs001k44619j3m12zg"},{"name":"Ubuntu","_id":"clk237kft001n44611vay7dzt"},{"name":"Test","_id":"clk237kfu001z446185fa4ce0"},{"name":"O&M","_id":"clk237kfv00224461hgsd5fcc"},{"name":"Redis","_id":"clk237kfv002444612ypi0kdj"},{"name":"C#","_id":"clk237kfv00264461exbwcbuv"},{"name":"GitHub","_id":"clk237kfw00274461b9y79756"},{"name":"Design","_id":"clk237kfw002a4461eft79to4"},{"name":"Reflex","_id":"clk237kg0002f44615xrwarl7"},{"name":"Async","_id":"clk237kg0002g4461a3jw9cye"},{"name":"Desing","_id":"clk237kg0002j4461achiaeq0"}]}}